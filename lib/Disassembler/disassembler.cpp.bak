/* This file is autogenerated by scripts/decodetree.py.  */
#include <iostream>
#include <cstdlib>
#include "Disassmbler/disassmbler.hpp"

static const char *opcode_name[] = {
    [OPC_CLO_W] = "clo.w",
    [OPC_CLZ_W] = "clz.w",
    [OPC_CTO_W] = "cto.w",
    [OPC_CTZ_W] = "ctz.w",
    [OPC_CLO_D] = "clo.d",
    [OPC_CLZ_D] = "clz.d",
    [OPC_CTO_D] = "cto.d",
    [OPC_CTZ_D] = "ctz.d",
    [OPC_REVB_2H] = "revb.2h",
    [OPC_REVB_4H] = "revb.4h",
    [OPC_REVB_2W] = "revb.2w",
    [OPC_REVB_D] = "revb.d",
    [OPC_REVH_2W] = "revh.2w",
    [OPC_REVH_D] = "revh.d",
    [OPC_BITREV_4B] = "bitrev.4b",
    [OPC_BITREV_8B] = "bitrev.8b",
    [OPC_BITREV_W] = "bitrev.w",
    [OPC_BITREV_D] = "bitrev.d",
    [OPC_EXT_W_H] = "ext.w.h",
    [OPC_EXT_W_B] = "ext.w.b",
    [OPC_RDTIMEL_W] = "rdtimel.w",
    [OPC_RDTIMEH_W] = "rdtimeh.w",
    [OPC_RDTIME_D] = "rdtime.d",
    [OPC_CPUCFG] = "cpucfg",
    [OPC_ASRTLE_D] = "asrtle.d",
    [OPC_ASRTGT_D] = "asrtgt.d",
    [OPC_ALSL_W] = "alsl.w",
    [OPC_ALSL_WU] = "alsl.wu",
    [OPC_BYTEPICK_W] = "bytepick.w",
    [OPC_BYTEPICK_D] = "bytepick.d",
    [OPC_ADD_W] = "add.w",
    [OPC_ADD_D] = "add.d",
    [OPC_SUB_W] = "sub.w",
    [OPC_SUB_D] = "sub.d",
    [OPC_SLT] = "slt",
    [OPC_SLTU] = "sltu",
    [OPC_MASKEQZ] = "maskeqz",
    [OPC_MASKNEZ] = "masknez",
    [OPC_NOR] = "nor",
    [OPC_AND] = "and",
    [OPC_OR] = "or",
    [OPC_XOR] = "xor",
    [OPC_ORN] = "orn",
    [OPC_ANDN] = "andn",
    [OPC_SLL_W] = "sll.w",
    [OPC_SRL_W] = "srl.w",
    [OPC_SRA_W] = "sra.w",
    [OPC_SLL_D] = "sll.d",
    [OPC_SRL_D] = "srl.d",
    [OPC_SRA_D] = "sra.d",
    [OPC_ROTR_W] = "rotr.w",
    [OPC_ROTR_D] = "rotr.d",
    [OPC_MUL_W] = "mul.w",
    [OPC_MULH_W] = "mulh.w",
    [OPC_MULH_WU] = "mulh.wu",
    [OPC_MUL_D] = "mul.d",
    [OPC_MULH_D] = "mulh.d",
    [OPC_MULH_DU] = "mulh.du",
    [OPC_MULW_D_W] = "mulw.d.w",
    [OPC_MULW_D_WU] = "mulw.d.wu",
    [OPC_DIV_W] = "div.w",
    [OPC_MOD_W] = "mod.w",
    [OPC_DIV_WU] = "div.wu",
    [OPC_MOD_WU] = "mod.wu",
    [OPC_DIV_D] = "div.d",
    [OPC_MOD_D] = "mod.d",
    [OPC_DIV_DU] = "div.du",
    [OPC_MOD_DU] = "mod.du",
    [OPC_CRC_W_B_W] = "crc.w.b.w",
    [OPC_CRC_W_H_W] = "crc.w.h.w",
    [OPC_CRC_W_W_W] = "crc.w.w.w",
    [OPC_CRC_W_D_W] = "crc.w.d.w",
    [OPC_CRCC_W_B_W] = "crcc.w.b.w",
    [OPC_CRCC_W_H_W] = "crcc.w.h.w",
    [OPC_CRCC_W_W_W] = "crcc.w.w.w",
    [OPC_CRCC_W_D_W] = "crcc.w.d.w",
    [OPC_BREAK] = "break",
    [OPC_DBCL] = "dbcl",
    [OPC_SYSCALL] = "syscall",
    [OPC_ALSL_D] = "alsl.d",
    [OPC_SLLI_W] = "slli.w",
    [OPC_SLLI_D] = "slli.d",
    [OPC_SRLI_W] = "srli.w",
    [OPC_SRLI_D] = "srli.d",
    [OPC_SRAI_W] = "srai.w",
    [OPC_SRAI_D] = "srai.d",
    [OPC_ROTRI_W] = "rotri.w",
    [OPC_ROTRI_D] = "rotri.d",
    [OPC_BSTRINS_W] = "bstrins.w",
    [OPC_BSTRPICK_W] = "bstrpick.w",
    [OPC_BSTRINS_D] = "bstrins.d",
    [OPC_BSTRPICK_D] = "bstrpick.d",
    [OPC_FADD_S] = "fadd.s",
    [OPC_FADD_D] = "fadd.d",
    [OPC_FSUB_S] = "fsub.s",
    [OPC_FSUB_D] = "fsub.d",
    [OPC_FMUL_S] = "fmul.s",
    [OPC_FMUL_D] = "fmul.d",
    [OPC_FDIV_S] = "fdiv.s",
    [OPC_FDIV_D] = "fdiv.d",
    [OPC_FMAX_S] = "fmax.s",
    [OPC_FMAX_D] = "fmax.d",
    [OPC_FMIN_S] = "fmin.s",
    [OPC_FMIN_D] = "fmin.d",
    [OPC_FMAXA_S] = "fmaxa.s",
    [OPC_FMAXA_D] = "fmaxa.d",
    [OPC_FMINA_S] = "fmina.s",
    [OPC_FMINA_D] = "fmina.d",
    [OPC_FSCALEB_S] = "fscaleb.s",
    [OPC_FSCALEB_D] = "fscaleb.d",
    [OPC_FCOPYSIGN_S] = "fcopysign.s",
    [OPC_FCOPYSIGN_D] = "fcopysign.d",
    [OPC_FABS_S] = "fabs.s",
    [OPC_FABS_D] = "fabs.d",
    [OPC_FNEG_S] = "fneg.s",
    [OPC_FNEG_D] = "fneg.d",
    [OPC_FLOGB_S] = "flogb.s",
    [OPC_FLOGB_D] = "flogb.d",
    [OPC_FCLASS_S] = "fclass.s",
    [OPC_FCLASS_D] = "fclass.d",
    [OPC_FSQRT_S] = "fsqrt.s",
    [OPC_FSQRT_D] = "fsqrt.d",
    [OPC_FRECIP_S] = "frecip.s",
    [OPC_FRECIP_D] = "frecip.d",
    [OPC_FRSQRT_S] = "frsqrt.s",
    [OPC_FRSQRT_D] = "frsqrt.d",
    [OPC_FMOV_S] = "fmov.s",
    [OPC_FMOV_D] = "fmov.d",
    [OPC_MOVGR2FR_W] = "movgr2fr.w",
    [OPC_MOVGR2FR_D] = "movgr2fr.d",
    [OPC_MOVGR2FRH_W] = "movgr2frh.w",
    [OPC_MOVFR2GR_S] = "movfr2gr.s",
    [OPC_MOVFR2GR_D] = "movfr2gr.d",
    [OPC_MOVFRH2GR_S] = "movfrh2gr.s",
    [OPC_MOVGR2FCSR] = "movgr2fcsr",
    [OPC_MOVFCSR2GR] = "movfcsr2gr",
    [OPC_MOVFR2CF] = "movfr2cf",
    [OPC_MOVCF2FR] = "movcf2fr",
    [OPC_MOVGR2CF] = "movgr2cf",
    [OPC_MOVCF2GR] = "movcf2gr",
    [OPC_FCVT_S_D] = "fcvt.s.d",
    [OPC_FCVT_D_S] = "fcvt.d.s",
    [OPC_FTINTRM_W_S] = "ftintrm.w.s",
    [OPC_FTINTRM_W_D] = "ftintrm.w.d",
    [OPC_FTINTRM_L_S] = "ftintrm.l.s",
    [OPC_FTINTRM_L_D] = "ftintrm.l.d",
    [OPC_FTINTRP_W_S] = "ftintrp.w.s",
    [OPC_FTINTRP_W_D] = "ftintrp.w.d",
    [OPC_FTINTRP_L_S] = "ftintrp.l.s",
        [OPC_FTINTRP_L_D] = "ftintrp.l.d",
    [OPC_FTINTRZ_W_S] = "ftintrz.w.s",
    [OPC_FTINTRZ_W_D] = "ftintrz.w.d",
    [OPC_FTINTRZ_L_S] = "ftintrz.l.s",
    [OPC_FTINTRZ_L_D] = "ftintrz.l.d",
    [OPC_FTINTRNE_W_S] = "ftintrne.w.s",
    [OPC_FTINTRNE_W_D] = "ftintrne.w.d",
    [OPC_FTINTRNE_L_S] = "ftintrne.l.s",
    [OPC_FTINTRNE_L_D] = "ftintrne.l.d",
    [OPC_FTINT_W_S] = "ftint.w.s",
    [OPC_FTINT_W_D] = "ftint.w.d",
    [OPC_FTINT_L_S] = "ftint.l.s",
    [OPC_FTINT_L_D] = "ftint.l.d",
    [OPC_FFINT_S_W] = "ffint.s.w",
    [OPC_FFINT_S_L] = "ffint.s.l",
    [OPC_FFINT_D_W] = "ffint.d.w",
    [OPC_FFINT_D_L] = "ffint.d.l",
    [OPC_FRINT_S] = "frint.s",
    [OPC_FRINT_D] = "frint.d",
    [OPC_SLTI] = "slti",
    [OPC_SLTUI] = "sltui",
    [OPC_ADDI_W] = "addi.w",
    [OPC_ADDI_D] = "addi.d",
    [OPC_LU52I_D] = "lu52i.d",
    [OPC_ANDI] = "andi",
    [OPC_ORI] = "ori",
    [OPC_XORI] = "xori",
    [OPC_CSRRD] = "csrrd",
    [OPC_CSRWR] = "csrwr",
    [OPC_CSRXCHG] = "csrxchg",
    [OPC_CACOP] = "cacop",
    [OPC_LDDIR] = "lddir",
    [OPC_LDPTE] = "ldpte",
    [OPC_IOCSRRD_B] = "iocsrrd.b",
    [OPC_IOCSRRD_H] = "iocsrrd.h",
    [OPC_IOCSRRD_W] = "iocsrrd.w",
    [OPC_IOCSRRD_D] = "iocsrrd.d",
    [OPC_IOCSRWR_B] = "iocsrwr.b",
    [OPC_IOCSRWR_H] = "iocsrwr.h",
    [OPC_IOCSRWR_W] = "iocsrwr.w",
    [OPC_IOCSRWR_D] = "iocsrwr.d",
    [OPC_TLBCLR] = "tlbclr",
    [OPC_TLBFLUSH] = "tlbflush",
    [OPC_TLBSRCH] = "tlbsrch",
    [OPC_TLBRD] = "tlbrd",
    [OPC_TLBWR] = "tlbwr",
    [OPC_TLBFILL] = "tlbfill",
    [OPC_ERTN] = "ertn",
    [OPC_IDLE] = "idle",
    [OPC_INVTLB] = "invtlb",
    [OPC_FMADD_S] = "fmadd.s",
    [OPC_FMADD_D] = "fmadd.d",
    [OPC_FMSUB_S] = "fmsub.s",
    [OPC_FMSUB_D] = "fmsub.d",
    [OPC_FNMADD_S] = "fnmadd.s",
    [OPC_FNMADD_D] = "fnmadd.d",
    [OPC_FNMSUB_S] = "fnmsub.s",
    [OPC_FNMSUB_D] = "fnmsub.d",
    [OPC_FCMP_CAF_S] = "fcmp.caf.s",
    [OPC_FCMP_SAF_S] = "fcmp.saf.s",
    [OPC_FCMP_CLT_S] = "fcmp.clt.s",
    [OPC_FCMP_STL_S] = "fcmp.stl.s",
    [OPC_FCMP_CEQ_S] = "fcmp.ceq.s",
    [OPC_FCMP_SEQ_S] = "fcmp.seq.s",
    [OPC_FCMP_CLE_S] = "fcmp.cle.s",
    [OPC_FCMP_SLE_S] = "fcmp.sle.s",
    [OPC_FCMP_CUN_S] = "fcmp.cun.s",
    [OPC_FCMP_SUN_S] = "fcmp.sun.s",
    [OPC_FCMP_CULT_S] = "fcmp.cult.s",
    [OPC_FCMP_SULT_S] = "fcmp.sult.s",
    [OPC_FCMP_CUEQ_S] = "fcmp.cueq.s",
    [OPC_FCMP_SUEQ_S] = "fcmp.sueq.s",
    [OPC_FCMP_CULE_S] = "fcmp.cule.s",
    [OPC_FCMP_SULE_S] = "fcmp.sule.s",
    [OPC_FCMP_CNE_S] = "fcmp.cne.s",
    [OPC_FCMP_SNE_S] = "fcmp.sne.s",
    [OPC_FCMP_COR_S] = "fcmp.cor.s",
    [OPC_FCMP_SOR_S] = "fcmp.sor.s",
    [OPC_FCMP_CUNE_S] = "fcmp.cune.s",
    [OPC_FCMP_SUNE_S] = "fcmp.sune.s",
    [OPC_FCMP_CAF_D] = "fcmp.caf.d",
    [OPC_FCMP_SAF_D] = "fcmp.saf.d",
    [OPC_FCMP_CLT_D] = "fcmp.clt.d",
    [OPC_FCMP_STL_D] = "fcmp.stl.d",
    [OPC_FCMP_CEQ_D] = "fcmp.ceq.d",
    [OPC_FCMP_SEQ_D] = "fcmp.seq.d",
    [OPC_FCMP_CLE_D] = "fcmp.cle.d",
    [OPC_FCMP_SLE_D] = "fcmp.sle.d",
    [OPC_FCMP_CUN_D] = "fcmp.cun.d",
    [OPC_FCMP_SUN_D] = "fcmp.sun.d",
    [OPC_FCMP_CULT_D] = "fcmp.cult.d",
    [OPC_FCMP_SULT_D] = "fcmp.sult.d",
    [OPC_FCMP_CUEQ_D] = "fcmp.cueq.d",
    [OPC_FCMP_SUEQ_D] = "fcmp.sueq.d",
    [OPC_FCMP_CULE_D] = "fcmp.cule.d",
    [OPC_FCMP_SULE_D] = "fcmp.sule.d",
    [OPC_FCMP_CNE_D] = "fcmp.cne.d",
    [OPC_FCMP_SNE_D] = "fcmp.sne.d",
    [OPC_FCMP_COR_D] = "fcmp.cor.d",
    [OPC_FCMP_SOR_D] = "fcmp.sor.d",
    [OPC_FCMP_CUNE_D] = "fcmp.cune.d",
    [OPC_FCMP_SUNE_D] = "fcmp.sune.d",
    [OPC_FSEL] = "fsel",
    [OPC_ADDU16I_D] = "addu16i.d",
    [OPC_LU12I_W] = "lu12i.w",
    [OPC_LU32I_D] = "lu32i.d",
    [OPC_PCADDI] = "pcaddi",
    [OPC_PCALAU12I] = "pcalau12i",
    [OPC_PCADDU12I] = "pcaddu12i",
    [OPC_PCADDU18I] = "pcaddu18i",
    [OPC_LL_W] = "ll.w",
    [OPC_SC_W] = "sc.w",
    [OPC_LL_D] = "ll.d",
    [OPC_SC_D] = "sc.d",
    [OPC_LDPTR_W] = "ldptr.w",
    [OPC_STPTR_W] = "stptr.w",
    [OPC_LDPTR_D] = "ldptr.d",
    [OPC_STPTR_D] = "stptr.d",
    [OPC_LD_B] = "ld.b",
    [OPC_LD_H] = "ld.h",
    [OPC_LD_W] = "ld.w",
    [OPC_LD_D] = "ld.d",
    [OPC_ST_B] = "st.b",
    [OPC_ST_H] = "st.h",
    [OPC_ST_W] = "st.w",
    [OPC_ST_D] = "st.d",
    [OPC_LD_BU] = "ld.bu",
    [OPC_LD_HU] = "ld.hu",
    [OPC_LD_WU] = "ld.wu",
    [OPC_PRELD] = "preld",
    [OPC_FLD_S] = "fld.s",
    [OPC_FST_S] = "fst.s",
    [OPC_FLD_D] = "fld.d",
    [OPC_FST_D] = "fst.d",
    [OPC_LDX_B] = "ldx.b",
    [OPC_LDX_H] = "ldx.h",
    [OPC_LDX_W] = "ldx.w",
    [OPC_LDX_D] = "ldx.d",
    [OPC_STX_B] = "stx.b",
    [OPC_STX_H] = "stx.h",
    [OPC_STX_W] = "stx.w",
    [OPC_STX_D] = "stx.d",
    [OPC_LDX_BU] = "ldx.bu",
    [OPC_LDX_HU] = "ldx.hu",
    [OPC_LDX_WU] = "ldx.wu",
    [OPC_PRELDX] = "preldx",
    [OPC_FLDX_S] = "fldx.s",
    [OPC_FLDX_D] = "fldx.d",
    [OPC_FSTX_S] = "fstx.s",
    [OPC_FSTX_D] = "fstx.d",
    [OPC_AMSWAP_W] = "amswap.w",
    [OPC_AMSWAP_D] = "amswap.d",
    [OPC_AMADD_W] = "amadd.w",
    [OPC_AMADD_D] = "amadd.d",
    [OPC_AMAND_W] = "amand.w",
    [OPC_AMAND_D] = "amand.d",
    [OPC_AMOR_W] = "amor.w",
    [OPC_AMOR_D] = "amor.d",
    [OPC_AMXOR_W] = "amxor.w",
        [OPC_AMXOR_D] = "amxor.d",
    [OPC_AMMAX_W] = "ammax.w",
    [OPC_AMMAX_D] = "ammax.d",
    [OPC_AMMIN_W] = "ammin.w",
    [OPC_AMMIN_D] = "ammin.d",
    [OPC_AMMAX_WU] = "ammax.wu",
    [OPC_AMMAX_DU] = "ammax.du",
    [OPC_AMMIN_WU] = "ammin.wu",
    [OPC_AMMIN_DU] = "ammin.du",
    [OPC_AMSWAP_DB_W] = "amswap.db.w",
    [OPC_AMSWAP_DB_D] = "amswap.db.d",
    [OPC_AMADD_DB_W] = "amadd.db.w",
    [OPC_AMADD_DB_D] = "amadd.db.d",
    [OPC_AMAND_DB_W] = "amand.db.w",
    [OPC_AMAND_DB_D] = "amand.db.d",
    [OPC_AMOR_DB_W] = "amor.db.w",
    [OPC_AMOR_DB_D] = "amor.db.d",
    [OPC_AMXOR_DB_W] = "amxor.db.w",
    [OPC_AMXOR_DB_D] = "amxor.db.d",
    [OPC_AMMAX_DB_W] = "ammax.db.w",
    [OPC_AMMAX_DB_D] = "ammax.db.d",
    [OPC_AMMIN_DB_W] = "ammin.db.w",
    [OPC_AMMIN_DB_D] = "ammin.db.d",
    [OPC_AMMAX_DB_WU] = "ammax.db.wu",
    [OPC_AMMAX_DB_DU] = "ammax.db.du",
    [OPC_AMMIN_DB_WU] = "ammin.db.wu",
    [OPC_AMMIN_DB_DU] = "ammin.db.du",
    [OPC_DBAR] = "dbar",
    [OPC_IBAR] = "ibar",
    [OPC_FLDGT_S] = "fldgt.s",
    [OPC_FLDGT_D] = "fldgt.d",
    [OPC_FLDLE_S] = "fldle.s",
    [OPC_FLDLE_D] = "fldle.d",
    [OPC_FSTGT_S] = "fstgt.s",
    [OPC_FSTGT_D] = "fstgt.d",
    [OPC_FSTLE_S] = "fstle.s",
    [OPC_FSTLE_D] = "fstle.d",
    [OPC_LDGT_B] = "ldgt.b",
    [OPC_LDGT_H] = "ldgt.h",
    [OPC_LDGT_W] = "ldgt.w",
    [OPC_LDGT_D] = "ldgt.d",
    [OPC_LDLE_B] = "ldle.b",
    [OPC_LDLE_H] = "ldle.h",
    [OPC_LDLE_W] = "ldle.w",
    [OPC_LDLE_D] = "ldle.d",
    [OPC_STGT_B] = "stgt.b",
    [OPC_STGT_H] = "stgt.h",
    [OPC_STGT_W] = "stgt.w",
    [OPC_STGT_D] = "stgt.d",
    [OPC_STLE_B] = "stle.b",
    [OPC_STLE_H] = "stle.h",
    [OPC_STLE_W] = "stle.w",
    [OPC_STLE_D] = "stle.d",
    [OPC_BEQZ] = "beqz",
    [OPC_BNEZ] = "bnez",
    [OPC_BCEQZ] = "bceqz",
    [OPC_BCNEZ] = "bcnez",
    [OPC_JIRL] = "jirl",
    [OPC_B] = "b",
    [OPC_BL] = "bl",
    [OPC_BEQ] = "beq",
    [OPC_BNE] = "bne",
    [OPC_BLT] = "blt",
    [OPC_BGE] = "bge",
    [OPC_BLTU] = "bltu",
    [OPC_BGEU] = "bgeu",
    [OPC_GR2SCR] = "gr2scr",
    [OPC_SRC2GR] = "src2gr",
    [OPC_X86MTTOP] = "x86mttop",
    [OPC_X86MFTOP] = "x86mftop",
    [OPC_SETX86LOOPE] = "setx86loope",
    [OPC_SETX86LOOPNE] = "setx86loopne",
    [OPC_X86INC_B] = "x86inc.b",
    [OPC_X86INC_H] = "x86inc.h",
    [OPC_X86INC_W] = "x86inc.w",
    [OPC_X86INC_D] = "x86inc.d",
    [OPC_X86DEC_B] = "x86dec.b",
    [OPC_X86DEC_H] = "x86dec.h",
    [OPC_X86DEC_W] = "x86dec.w",
    [OPC_X86DEC_D] = "x86dec.d",
    [OPC_X86SETTM] = "x86settm",
    [OPC_X86CLRTM] = "x86clrtm",
    [OPC_X86INCTOP] = "x86inctop",
    [OPC_X86DECTOP] = "x86dectop",
    [OPC_ROTR_B] = "rotr.b",
    [OPC_ROTR_H] = "rotr.h",
    [OPC_ADDU12I_W] = "addu12i.w",
    [OPC_ADDU12I_D] = "addu12i.d",
    [OPC_HVCL] = "hvcl",
    [OPC_ADC_B] = "adc.b",
    [OPC_ADC_H] = "adc.h",
    [OPC_ADC_W] = "adc.w",
    [OPC_ADC_D] = "adc.d",
    [OPC_SBC_B] = "sbc.b",
    [OPC_SBC_H] = "sbc.h",
    [OPC_SBC_W] = "sbc.w",
    [OPC_SBC_D] = "sbc.d",
    [OPC_RCR_B] = "rcr.b",
    [OPC_RCR_H] = "rcr.h",
    [OPC_RCR_W] = "rcr.w",
    [OPC_RCR_D] = "rcr.d",
    [OPC_ARMMOVE] = "armmove",
    [OPC_SETX86J] = "setx86j",
    [OPC_SETARMJ] = "setarmj",
    [OPC_ARMADD_W] = "armadd.w",
    [OPC_ARMSUB_W] = "armsub.w",
    [OPC_ARMADC_W] = "armadc.w",
    [OPC_ARMSBC_W] = "armsbc.w",
    [OPC_ARMAND_W] = "armand.w",
    [OPC_ARMOR_W] = "armor.w",
    [OPC_ARMXOR_W] = "armxor.w",
    [OPC_ARMSLL_W] = "armsll.w",
    [OPC_ARMSRL_W] = "armsrl.w",
    [OPC_ARMSRA_W] = "armsra.w",
    [OPC_ARMROTR_W] = "armrotr.w",
    [OPC_ARMSLLI_W] = "armslli.w",
    [OPC_ARMSRLI_W] = "armsrli.w",
    [OPC_ARMSRAI_W] = "armsrai.w",
    [OPC_ARMROTRI_W] = "armrotri.w",
    [OPC_X86MUL_B] = "x86mul.b",
    [OPC_X86MUL_H] = "x86mul.h",
    [OPC_X86MUL_W] = "x86mul.w",
    [OPC_X86MUL_D] = "x86mul.d",
    [OPC_X86MUL_BU] = "x86mul.bu",
    [OPC_X86MUL_HU] = "x86mul.hu",
    [OPC_X86MUL_WU] = "x86mul.wu",
    [OPC_X86MUL_DU] = "x86mul.du",
    [OPC_X86ADD_WU] = "x86add.wu",
    [OPC_X86ADD_DU] = "x86add.du",
    [OPC_X86SUB_WU] = "x86sub.wu",
    [OPC_X86SUB_DU] = "x86sub.du",
    [OPC_X86ADD_B] = "x86add.b",
    [OPC_X86ADD_H] = "x86add.h",
    [OPC_X86ADD_W] = "x86add.w",
    [OPC_X86ADD_D] = "x86add.d",
    [OPC_X86SUB_B] = "x86sub.b",
    [OPC_X86SUB_H] = "x86sub.h",
    [OPC_X86SUB_W] = "x86sub.w",
    [OPC_X86SUB_D] = "x86sub.d",
    [OPC_X86ADC_B] = "x86adc.b",
    [OPC_X86ADC_H] = "x86adc.h",
    [OPC_X86ADC_W] = "x86adc.w",
    [OPC_X86ADC_D] = "x86adc.d",
    [OPC_X86SBC_B] = "x86sbc.b",
    [OPC_X86SBC_H] = "x86sbc.h",
    [OPC_X86SBC_W] = "x86sbc.w",
    [OPC_X86SBC_D] = "x86sbc.d",
    [OPC_X86SLL_B] = "x86sll.b",
    [OPC_X86SLL_H] = "x86sll.h",
    [OPC_X86SLL_W] = "x86sll.w",
    [OPC_X86SLL_D] = "x86sll.d",
    [OPC_X86SRL_B] = "x86srl.b",
    [OPC_X86SRL_H] = "x86srl.h",
    [OPC_X86SRL_W] = "x86srl.w",
    [OPC_X86SRL_D] = "x86srl.d",
    [OPC_X86SRA_B] = "x86sra.b",
    [OPC_X86SRA_H] = "x86sra.h",
    [OPC_X86SRA_W] = "x86sra.w",
    [OPC_X86SRA_D] = "x86sra.d",
    [OPC_X86ROTR_B] = "x86rotr.b",
    [OPC_X86ROTR_H] = "x86rotr.h",
    [OPC_X86ROTR_D] = "x86rotr.d",
    [OPC_X86ROTR_W] = "x86rotr.w",
    [OPC_X86ROTL_B] = "x86rotl.b",
    [OPC_X86ROTL_H] = "x86rotl.h",
    [OPC_X86ROTL_W] = "x86rotl.w",
    [OPC_X86ROTL_D] = "x86rotl.d",
    [OPC_X86RCR_B] = "x86rcr.b",
    [OPC_X86RCR_H] = "x86rcr.h",
    [OPC_X86RCR_W] = "x86rcr.w",
    [OPC_X86RCR_D] = "x86rcr.d",
    [OPC_X86RCL_B] = "x86rcl.b",
    [OPC_X86RCL_H] = "x86rcl.h",
    [OPC_X86RCL_W] = "x86rcl.w",
    [OPC_X86RCL_D] = "x86rcl.d",
    [OPC_X86AND_B] = "x86and.b",
    [OPC_X86AND_H] = "x86and.h",
    [OPC_X86AND_W] = "x86and.w",
    [OPC_X86AND_D] = "x86and.d",
    [OPC_X86OR_B] = "x86or.b",
    [OPC_X86OR_H] = "x86or.h",
    [OPC_X86OR_W] = "x86or.w",
    [OPC_X86OR_D] = "x86or.d",
    [OPC_X86XOR_B] = "x86xor.b",
    [OPC_X86XOR_H] = "x86xor.h",
    [OPC_X86XOR_W] = "x86xor.w",
    [OPC_X86XOR_D] = "x86xor.d",
    [OPC_ARMNOT_W] = "armnot.w",
    [OPC_ARMMOV_W] = "armmov.w",
    [OPC_ARMMOV_D] = "armmov.d",
    [OPC_ARMRRX_W] = "armrrx.w",
    [OPC_ROTRI_B] = "rotri.b",
    [OPC_ROTRI_H] = "rotri.h",
    [OPC_RCRI_B] = "rcri.b",
    [OPC_RCRI_H] = "rcri.h",
    [OPC_RCRI_W] = "rcri.w",
    [OPC_RCRI_D] = "rcri.d",
    [OPC_X86SLLI_B] = "x86slli.b",
    [OPC_X86SLLI_H] = "x86slli.h",
    [OPC_X86SLLI_W] = "x86slli.w",
    [OPC_X86SLLI_D] = "x86slli.d",
    [OPC_X86SRLI_B] = "x86srli.b",
    [OPC_X86SRLI_H] = "x86srli.h",
    [OPC_X86SRLI_W] = "x86srli.w",
    [OPC_X86SRLI_D] = "x86srli.d",
    [OPC_X86SRAI_B] = "x86srai.b",
    [OPC_X86SRAI_H] = "x86srai.h",
    [OPC_X86SRAI_W] = "x86srai.w",
    [OPC_X86SRAI_D] = "x86srai.d",
    [OPC_X86ROTRI_B] = "x86rotri.b",
    [OPC_X86ROTRI_H] = "x86rotri.h",
    [OPC_X86ROTRI_W] = "x86rotri.w",
    [OPC_X86ROTRI_D] = "x86rotri.d",
    [OPC_X86RCRI_B] = "x86rcri.b",
    [OPC_X86RCRI_H] = "x86rcri.h",
    [OPC_X86RCRI_W] = "x86rcri.w",
    [OPC_X86RCRI_D] = "x86rcri.d",
    [OPC_X86ROTLI_B] = "x86rotli.b",
    [OPC_X86ROTLI_H] = "x86rotli.h",
    [OPC_X86ROTLI_W] = "x86rotli.w",
    [OPC_X86ROTLI_D] = "x86rotli.d",
    [OPC_X86RCLI_B] = "x86rcli.b",
    [OPC_X86RCLI_H] = "x86rcli.h",
    [OPC_X86RCLI_W] = "x86rcli.w",
    [OPC_X86RCLI_D] = "x86rcli.d",
    [OPC_X86SETTAG] = "x86settag",
    [OPC_X86MFFLAG] = "x86mfflag",
    [OPC_X86MTFLAG] = "x86mtflag",
    [OPC_ARMMFFLAG] = "armmfflag",
    [OPC_ARMMTFLAG] = "armmtflag",
    [OPC_FCVT_LD_D] = "fcvt.ld.d",
    [OPC_FCVT_UD_D] = "fcvt.ud.d",
    [OPC_FCVT_D_LC] = "fcvt.d.lc",
    [OPC_GCSRRD] = "gcsrrd",
    [OPC_GCSRWR] = "gcsrwr",
    [OPC_GCSRXCHG] = "gcsrxchg",
    [OPC_GTLBCLR] = "gtlbclr",
    [OPC_GTLBFLUSH] = "gtlbflush",
    [OPC_GTLBSRCH] = "gtlbsrch",
    [OPC_GTLBRD] = "gtlbrd",
    [OPC_GTLBWR] = "gtlbwr",
    [OPC_GTLBFILL] = "gtlbfill",
    [OPC_SCFGR_W] = "scfgr.w",
    [OPC_SCFGR_D] = "scfgr.d",
    [OPC_SCFGW_W] = "scfgw.w",
    [OPC_SCFGW_D] = "scfgw.d",
    [OPC_SNOP] = "snop",
    [OPC_LDL_W] = "ldl.w",
    [OPC_LDR_W] = "ldr.w",
    [OPC_LDL_D] = "ldl.d",
    [OPC_LDR_D] = "ldr.d",
    [OPC_STL_W] = "stl.w",
    [OPC_STR_W] = "str.w",
    [OPC_STL_D] = "stl.d",
    [OPC_STR_D] = "str.d",
    [OPC_JISCR0] = "jiscr0",
    [OPC_JISCR1] = "jiscr1",
    [OPC_VADD_B] = "vadd.b",
    [OPC_VADD_H] = "vadd.h",
    [OPC_VADD_W] = "vadd.w",
    [OPC_VADD_D] = "vadd.d",
    [OPC_VADD_Q] = "vadd.q",
    [OPC_VSUB_B] = "vsub.b",
    [OPC_VSUB_H] = "vsub.h",
    [OPC_VSUB_W] = "vsub.w",
    [OPC_VSUB_D] = "vsub.d",
    [OPC_VSUB_Q] = "vsub.q",
    [OPC_VADDI_BU] = "vaddi.bu",
    [OPC_VADDI_HU] = "vaddi.hu",
    [OPC_VADDI_WU] = "vaddi.wu",
    [OPC_VADDI_DU] = "vaddi.du",
    [OPC_VSUBI_BU] = "vsubi.bu",
    [OPC_VSUBI_HU] = "vsubi.hu",
    [OPC_VSUBI_WU] = "vsubi.wu",
    [OPC_VSUBI_DU] = "vsubi.du",
    [OPC_VNEG_B] = "vneg.b",
    [OPC_VNEG_H] = "vneg.h",
    [OPC_VNEG_W] = "vneg.w",
    [OPC_VNEG_D] = "vneg.d",
    [OPC_VSADD_B] = "vsadd.b",
    [OPC_VSADD_H] = "vsadd.h",
    [OPC_VSADD_W] = "vsadd.w",
    [OPC_VSADD_D] = "vsadd.d",
    [OPC_VSADD_BU] = "vsadd.bu",
    [OPC_VSADD_HU] = "vsadd.hu",
    [OPC_VSADD_WU] = "vsadd.wu",
    [OPC_VSADD_DU] = "vsadd.du",
    [OPC_VSSUB_B] = "vssub.b",
    [OPC_VSSUB_H] = "vssub.h",
    [OPC_VSSUB_W] = "vssub.w",
    [OPC_VSSUB_D] = "vssub.d",
    [OPC_VSSUB_BU] = "vssub.bu",
    [OPC_VSSUB_HU] = "vssub.hu",
    [OPC_VSSUB_WU] = "vssub.wu",
    [OPC_VSSUB_DU] = "vssub.du",
    [OPC_VHADDW_H_B] = "vhaddw.h.b",
    [OPC_VHADDW_W_H] = "vhaddw.w.h",
    [OPC_VHADDW_D_W] = "vhaddw.d.w",
    [OPC_VHADDW_Q_D] = "vhaddw.q.d",
    [OPC_VHADDW_HU_BU] = "vhaddw.hu.bu",
    [OPC_VHADDW_WU_HU] = "vhaddw.wu.hu",
    [OPC_VHADDW_DU_WU] = "vhaddw.du.wu",
    [OPC_VHADDW_QU_DU] = "vhaddw.qu.du",
    [OPC_VHSUBW_H_B] = "vhsubw.h.b",
    [OPC_VHSUBW_W_H] = "vhsubw.w.h",
    [OPC_VHSUBW_D_W] = "vhsubw.d.w",
    [OPC_VHSUBW_Q_D] = "vhsubw.q.d",
    [OPC_VHSUBW_HU_BU] = "vhsubw.hu.bu",
    [OPC_VHSUBW_WU_HU] = "vhsubw.wu.hu",
    [OPC_VHSUBW_DU_WU] = "vhsubw.du.wu",
    [OPC_VHSUBW_QU_DU] = "vhsubw.qu.du",
    [OPC_VADDWEV_H_B] = "vaddwev.h.b",
    [OPC_VADDWEV_W_H] = "vaddwev.w.h",
    [OPC_VADDWEV_D_W] = "vaddwev.d.w",
    [OPC_VADDWEV_Q_D] = "vaddwev.q.d",
    [OPC_VADDWOD_H_B] = "vaddwod.h.b",
    [OPC_VADDWOD_W_H] = "vaddwod.w.h",
    [OPC_VADDWOD_D_W] = "vaddwod.d.w",
    [OPC_VADDWOD_Q_D] = "vaddwod.q.d",
    [OPC_VSUBWEV_H_B] = "vsubwev.h.b",
    [OPC_VSUBWEV_W_H] = "vsubwev.w.h",
    [OPC_VSUBWEV_D_W] = "vsubwev.d.w",
    [OPC_VSUBWEV_Q_D] = "vsubwev.q.d",
    [OPC_VSUBWOD_H_B] = "vsubwod.h.b",
    [OPC_VSUBWOD_W_H] = "vsubwod.w.h",
    [OPC_VSUBWOD_D_W] = "vsubwod.d.w",
    [OPC_VSUBWOD_Q_D] = "vsubwod.q.d",
    [OPC_VADDWEV_H_BU] = "vaddwev.h.bu",
    [OPC_VADDWEV_W_HU] = "vaddwev.w.hu",
    [OPC_VADDWEV_D_WU] = "vaddwev.d.wu",
    [OPC_VADDWEV_Q_DU] = "vaddwev.q.du",
    [OPC_VADDWOD_H_BU] = "vaddwod.h.bu",
    [OPC_VADDWOD_W_HU] = "vaddwod.w.hu",
    [OPC_VADDWOD_D_WU] = "vaddwod.d.wu",
    [OPC_VADDWOD_Q_DU] = "vaddwod.q.du",
    [OPC_VSUBWEV_H_BU] = "vsubwev.h.bu",
    [OPC_VSUBWEV_W_HU] = "vsubwev.w.hu",
    [OPC_VSUBWEV_D_WU] = "vsubwev.d.wu",
    [OPC_VSUBWEV_Q_DU] = "vsubwev.q.du",
    [OPC_VSUBWOD_H_BU] = "vsubwod.h.bu",
    [OPC_VSUBWOD_W_HU] = "vsubwod.w.hu",
    [OPC_VSUBWOD_D_WU] = "vsubwod.d.wu",
    [OPC_VSUBWOD_Q_DU] = "vsubwod.q.du",
    [OPC_VADDWEV_H_BU_B] = "vaddwev.h.bu.b",
    [OPC_VADDWEV_W_HU_H] = "vaddwev.w.hu.h",
    [OPC_VADDWEV_D_WU_W] = "vaddwev.d.wu.w",
    [OPC_VADDWEV_Q_DU_D] = "vaddwev.q.du.d",
    [OPC_VADDWOD_H_BU_B] = "vaddwod.h.bu.b",
    [OPC_VADDWOD_W_HU_H] = "vaddwod.w.hu.h",
    [OPC_VADDWOD_D_WU_W] = "vaddwod.d.wu.w",
    [OPC_VADDWOD_Q_DU_D] = "vaddwod.q.du.d",
    [OPC_VAVG_B] = "vavg.b",
    [OPC_VAVG_H] = "vavg.h",
    [OPC_VAVG_W] = "vavg.w",
    [OPC_VAVG_D] = "vavg.d",
    [OPC_VAVG_BU] = "vavg.bu",
    [OPC_VAVG_HU] = "vavg.hu",
    [OPC_VAVG_WU] = "vavg.wu",
    [OPC_VAVG_DU] = "vavg.du",
    [OPC_VAVGR_B] = "vavgr.b",
    [OPC_VAVGR_H] = "vavgr.h",
    [OPC_VAVGR_W] = "vavgr.w",
    [OPC_VAVGR_D] = "vavgr.d",
    [OPC_VAVGR_BU] = "vavgr.bu",
    [OPC_VAVGR_HU] = "vavgr.hu",
    [OPC_VAVGR_WU] = "vavgr.wu",
    [OPC_VAVGR_DU] = "vavgr.du",
    [OPC_VABSD_B] = "vabsd.b",
    [OPC_VABSD_H] = "vabsd.h",
    [OPC_VABSD_W] = "vabsd.w",
    [OPC_VABSD_D] = "vabsd.d",
    [OPC_VABSD_BU] = "vabsd.bu",
    [OPC_VABSD_HU] = "vabsd.hu",
    [OPC_VABSD_WU] = "vabsd.wu",
    [OPC_VABSD_DU] = "vabsd.du",
    [OPC_VADDA_B] = "vadda.b",
    [OPC_VADDA_H] = "vadda.h",
    [OPC_VADDA_W] = "vadda.w",
    [OPC_VADDA_D] = "vadda.d",
    [OPC_VMAX_B] = "vmax.b",
    [OPC_VMAX_H] = "vmax.h",
    [OPC_VMAX_W] = "vmax.w",
    [OPC_VMAX_D] = "vmax.d",
    [OPC_VMAXI_B] = "vmaxi.b",
    [OPC_VMAXI_H] = "vmaxi.h",
    [OPC_VMAXI_W] = "vmaxi.w",
    [OPC_VMAXI_D] = "vmaxi.d",
    [OPC_VMAX_BU] = "vmax.bu",
    [OPC_VMAX_HU] = "vmax.hu",
    [OPC_VMAX_WU] = "vmax.wu",
    [OPC_VMAX_DU] = "vmax.du",
    [OPC_VMAXI_BU] = "vmaxi.bu",
    [OPC_VMAXI_HU] = "vmaxi.hu",
    [OPC_VMAXI_WU] = "vmaxi.wu",
    [OPC_VMAXI_DU] = "vmaxi.du",
    [OPC_VMIN_B] = "vmin.b",
    [OPC_VMIN_H] = "vmin.h",
    [OPC_VMIN_W] = "vmin.w",
    [OPC_VMIN_D] = "vmin.d",
    [OPC_VMINI_B] = "vmini.b",
    [OPC_VMINI_H] = "vmini.h",
    [OPC_VMINI_W] = "vmini.w",
    [OPC_VMINI_D] = "vmini.d",
    [OPC_VMIN_BU] = "vmin.bu",
    [OPC_VMIN_HU] = "vmin.hu",
    [OPC_VMIN_WU] = "vmin.wu",
    [OPC_VMIN_DU] = "vmin.du",
    [OPC_VMINI_BU] = "vmini.bu",
    [OPC_VMINI_HU] = "vmini.hu",
    [OPC_VMINI_WU] = "vmini.wu",
    [OPC_VMINI_DU] = "vmini.du",
    [OPC_VMUL_B] = "vmul.b",
    [OPC_VMUL_H] = "vmul.h",
    [OPC_VMUL_W] = "vmul.w",
    [OPC_VMUL_D] = "vmul.d",
    [OPC_VMUH_B] = "vmuh.b",
    [OPC_VMUH_H] = "vmuh.h",
    [OPC_VMUH_W] = "vmuh.w",
    [OPC_VMUH_D] = "vmuh.d",
    [OPC_VMUH_BU] = "vmuh.bu",
    [OPC_VMUH_HU] = "vmuh.hu",
    [OPC_VMUH_WU] = "vmuh.wu",
    [OPC_VMUH_DU] = "vmuh.du",
    [OPC_VMULWEV_H_B] = "vmulwev.h.b",
    [OPC_VMULWEV_W_H] = "vmulwev.w.h",
    [OPC_VMULWEV_D_W] = "vmulwev.d.w",
    [OPC_VMULWEV_Q_D] = "vmulwev.q.d",
    [OPC_VMULWOD_H_B] = "vmulwod.h.b",
    [OPC_VMULWOD_W_H] = "vmulwod.w.h",
    [OPC_VMULWOD_D_W] = "vmulwod.d.w",
    [OPC_VMULWOD_Q_D] = "vmulwod.q.d",
    [OPC_VMULWEV_H_BU] = "vmulwev.h.bu",
    [OPC_VMULWEV_W_HU] = "vmulwev.w.hu",
    [OPC_VMULWEV_D_WU] = "vmulwev.d.wu",
    [OPC_VMULWEV_Q_DU] = "vmulwev.q.du",
    [OPC_VMULWOD_H_BU] = "vmulwod.h.bu",
    [OPC_VMULWOD_W_HU] = "vmulwod.w.hu",
    [OPC_VMULWOD_D_WU] = "vmulwod.d.wu",
    [OPC_VMULWOD_Q_DU] = "vmulwod.q.du",
    [OPC_VMULWEV_H_BU_B] = "vmulwev.h.bu.b",
    [OPC_VMULWEV_W_HU_H] = "vmulwev.w.hu.h",
    [OPC_VMULWEV_D_WU_W] = "vmulwev.d.wu.w",
    [OPC_VMULWEV_Q_DU_D] = "vmulwev.q.du.d",
    [OPC_VMULWOD_H_BU_B] = "vmulwod.h.bu.b",
    [OPC_VMULWOD_W_HU_H] = "vmulwod.w.hu.h",
    [OPC_VMULWOD_D_WU_W] = "vmulwod.d.wu.w",
    [OPC_VMULWOD_Q_DU_D] = "vmulwod.q.du.d",
    [OPC_VMADD_B] = "vmadd.b",
    [OPC_VMADD_H] = "vmadd.h",
    [OPC_VMADD_W] = "vmadd.w",
    [OPC_VMADD_D] = "vmadd.d",
    [OPC_VMSUB_B] = "vmsub.b",
    [OPC_VMSUB_H] = "vmsub.h",
    [OPC_VMSUB_W] = "vmsub.w",
    [OPC_VMSUB_D] = "vmsub.d",
    [OPC_VMADDWEV_H_B] = "vmaddwev.h.b",
    [OPC_VMADDWEV_W_H] = "vmaddwev.w.h",
    [OPC_VMADDWEV_D_W] = "vmaddwev.d.w",
    [OPC_VMADDWEV_Q_D] = "vmaddwev.q.d",
    [OPC_VMADDWOD_H_B] = "vmaddwod.h.b",
    [OPC_VMADDWOD_W_H] = "vmaddwod.w.h",
    [OPC_VMADDWOD_D_W] = "vmaddwod.d.w",
    [OPC_VMADDWOD_Q_D] = "vmaddwod.q.d",
    [OPC_VMADDWEV_H_BU] = "vmaddwev.h.bu",
    [OPC_VMADDWEV_W_HU] = "vmaddwev.w.hu",
    [OPC_VMADDWEV_D_WU] = "vmaddwev.d.wu",
    [OPC_VMADDWEV_Q_DU] = "vmaddwev.q.du",
    [OPC_VMADDWOD_H_BU] = "vmaddwod.h.bu",
    [OPC_VMADDWOD_W_HU] = "vmaddwod.w.hu",
    [OPC_VMADDWOD_D_WU] = "vmaddwod.d.wu",
    [OPC_VMADDWOD_Q_DU] = "vmaddwod.q.du",
    [OPC_VMADDWEV_H_BU_B] = "vmaddwev.h.bu.b",
    [OPC_VMADDWEV_W_HU_H] = "vmaddwev.w.hu.h",
    [OPC_VMADDWEV_D_WU_W] = "vmaddwev.d.wu.w",
    [OPC_VMADDWEV_Q_DU_D] = "vmaddwev.q.du.d",
    [OPC_VMADDWOD_H_BU_B] = "vmaddwod.h.bu.b",
    [OPC_VMADDWOD_W_HU_H] = "vmaddwod.w.hu.h",
    [OPC_VMADDWOD_D_WU_W] = "vmaddwod.d.wu.w",
    [OPC_VMADDWOD_Q_DU_D] = "vmaddwod.q.du.d",
    [OPC_VDIV_B] = "vdiv.b",
    [OPC_VDIV_H] = "vdiv.h",
    [OPC_VDIV_W] = "vdiv.w",
    [OPC_VDIV_D] = "vdiv.d",
    [OPC_VDIV_BU] = "vdiv.bu",
    [OPC_VDIV_HU] = "vdiv.hu",
    [OPC_VDIV_WU] = "vdiv.wu",
    [OPC_VDIV_DU] = "vdiv.du",
    [OPC_VMOD_B] = "vmod.b",
    [OPC_VMOD_H] = "vmod.h",
    [OPC_VMOD_W] = "vmod.w",
    [OPC_VMOD_D] = "vmod.d",
    [OPC_VMOD_BU] = "vmod.bu",
    [OPC_VMOD_HU] = "vmod.hu",
    [OPC_VMOD_WU] = "vmod.wu",
    [OPC_VMOD_DU] = "vmod.du",
    [OPC_VSAT_B] = "vsat.b",
    [OPC_VSAT_H] = "vsat.h",
    [OPC_VSAT_W] = "vsat.w",
    [OPC_VSAT_D] = "vsat.d",
    [OPC_VSAT_BU] = "vsat.bu",
    [OPC_VSAT_HU] = "vsat.hu",
    [OPC_VSAT_WU] = "vsat.wu",
    [OPC_VSAT_DU] = "vsat.du",
    [OPC_VEXTH_H_B] = "vexth.h.b",
    [OPC_VEXTH_W_H] = "vexth.w.h",
    [OPC_VEXTH_D_W] = "vexth.d.w",
    [OPC_VEXTH_Q_D] = "vexth.q.d",
    [OPC_VEXTH_HU_BU] = "vexth.hu.bu",
    [OPC_VEXTH_WU_HU] = "vexth.wu.hu",
    [OPC_VEXTH_DU_WU] = "vexth.du.wu",
    [OPC_VEXTH_QU_DU] = "vexth.qu.du",
    [OPC_VSIGNCOV_B] = "vsigncov.b",
    [OPC_VSIGNCOV_H] = "vsigncov.h",
    [OPC_VSIGNCOV_W] = "vsigncov.w",
    [OPC_VSIGNCOV_D] = "vsigncov.d",
    [OPC_VMSKLTZ_B] = "vmskltz.b",
    [OPC_VMSKLTZ_H] = "vmskltz.h",
    [OPC_VMSKLTZ_W] = "vmskltz.w",
    [OPC_VMSKLTZ_D] = "vmskltz.d",
    [OPC_VMSKGEZ_B] = "vmskgez.b",
    [OPC_VMSKNZ_B] = "vmsknz.b",
    [OPC_VLDI] = "vldi",
    [OPC_VAND_V] = "vand.v",
    [OPC_VOR_V] = "vor.v",
    [OPC_VXOR_V] = "vxor.v",
    [OPC_VNOR_V] = "vnor.v",
    [OPC_VANDN_V] = "vandn.v",
    [OPC_VORN_V] = "vorn.v",
    [OPC_VANDI_B] = "vandi.b",
    [OPC_VORI_B] = "vori.b",
    [OPC_VXORI_B] = "vxori.b",
    [OPC_VNORI_B] = "vnori.b",
    [OPC_VSLL_B] = "vsll.b",
    [OPC_VSLL_H] = "vsll.h",
    [OPC_VSLL_W] = "vsll.w",
    [OPC_VSLL_D] = "vsll.d",
    [OPC_VSLLI_B] = "vslli.b",
    [OPC_VSLLI_H] = "vslli.h",
    [OPC_VSLLI_W] = "vslli.w",
    [OPC_VSLLI_D] = "vslli.d",
    [OPC_VSRL_B] = "vsrl.b",
    [OPC_VSRL_H] = "vsrl.h",
    [OPC_VSRL_W] = "vsrl.w",
    [OPC_VSRL_D] = "vsrl.d",
    [OPC_VSRLI_B] = "vsrli.b",
    [OPC_VSRLI_H] = "vsrli.h",
    [OPC_VSRLI_W] = "vsrli.w",
    [OPC_VSRLI_D] = "vsrli.d",
    [OPC_VSRA_B] = "vsra.b",
    [OPC_VSRA_H] = "vsra.h",
    [OPC_VSRA_W] = "vsra.w",
    [OPC_VSRA_D] = "vsra.d",
    [OPC_VSRAI_B] = "vsrai.b",
    [OPC_VSRAI_H] = "vsrai.h",
    [OPC_VSRAI_W] = "vsrai.w",
    [OPC_VSRAI_D] = "vsrai.d",
    [OPC_VROTR_B] = "vrotr.b",
    [OPC_VROTR_H] = "vrotr.h",
    [OPC_VROTR_W] = "vrotr.w",
    [OPC_VROTR_D] = "vrotr.d",
    [OPC_VROTRI_B] = "vrotri.b",
    [OPC_VROTRI_H] = "vrotri.h",
    [OPC_VROTRI_W] = "vrotri.w",
    [OPC_VROTRI_D] = "vrotri.d",
    [OPC_VSLLWIL_H_B] = "vsllwil.h.b",
    [OPC_VSLLWIL_W_H] = "vsllwil.w.h",
    [OPC_VSLLWIL_D_W] = "vsllwil.d.w",
    [OPC_VEXTL_Q_D] = "vextl.q.d",
    [OPC_VSLLWIL_HU_BU] = "vsllwil.hu.bu",
    [OPC_VSLLWIL_WU_HU] = "vsllwil.wu.hu",
    [OPC_VSLLWIL_DU_WU] = "vsllwil.du.wu",
    [OPC_VEXTL_QU_DU] = "vextl.qu.du",
    [OPC_VSRLR_B] = "vsrlr.b",
    [OPC_VSRLR_H] = "vsrlr.h",
    [OPC_VSRLR_W] = "vsrlr.w",
    [OPC_VSRLR_D] = "vsrlr.d",
    [OPC_VSRLRI_B] = "vsrlri.b",
    [OPC_VSRLRI_H] = "vsrlri.h",
    [OPC_VSRLRI_W] = "vsrlri.w",
    [OPC_VSRLRI_D] = "vsrlri.d",
    [OPC_VSRAR_B] = "vsrar.b",
    [OPC_VSRAR_H] = "vsrar.h",
    [OPC_VSRAR_W] = "vsrar.w",
    [OPC_VSRAR_D] = "vsrar.d",
    [OPC_VSRARI_B] = "vsrari.b",
    [OPC_VSRARI_H] = "vsrari.h",
    [OPC_VSRARI_W] = "vsrari.w",
    [OPC_VSRARI_D] = "vsrari.d",
    [OPC_VSRLN_B_H] = "vsrln.b.h",
    [OPC_VSRLN_H_W] = "vsrln.h.w",
    [OPC_VSRLN_W_D] = "vsrln.w.d",
    [OPC_VSRAN_B_H] = "vsran.b.h",
    [OPC_VSRAN_H_W] = "vsran.h.w",
    [OPC_VSRAN_W_D] = "vsran.w.d",
    [OPC_VSRLNI_B_H] = "vsrlni.b.h",
    [OPC_VSRLNI_H_W] = "vsrlni.h.w",
    [OPC_VSRLNI_W_D] = "vsrlni.w.d",
    [OPC_VSRLNI_D_Q] = "vsrlni.d.q",
    [OPC_VSRANI_B_H] = "vsrani.b.h",
    [OPC_VSRANI_H_W] = "vsrani.h.w",
    [OPC_VSRANI_W_D] = "vsrani.w.d",
    [OPC_VSRANI_D_Q] = "vsrani.d.q",
    [OPC_VSRLRN_B_H] = "vsrlrn.b.h",
    [OPC_VSRLRN_H_W] = "vsrlrn.h.w",
    [OPC_VSRLRN_W_D] = "vsrlrn.w.d",
    [OPC_VSRARN_B_H] = "vsrarn.b.h",
    [OPC_VSRARN_H_W] = "vsrarn.h.w",
    [OPC_VSRARN_W_D] = "vsrarn.w.d",
    [OPC_VSRLRNI_B_H] = "vsrlrni.b.h",
    [OPC_VSRLRNI_H_W] = "vsrlrni.h.w",
    [OPC_VSRLRNI_W_D] = "vsrlrni.w.d",
    [OPC_VSRLRNI_D_Q] = "vsrlrni.d.q",
    [OPC_VSRARNI_B_H] = "vsrarni.b.h",
    [OPC_VSRARNI_H_W] = "vsrarni.h.w",
    [OPC_VSRARNI_W_D] = "vsrarni.w.d",
    [OPC_VSRARNI_D_Q] = "vsrarni.d.q",
    [OPC_VSSRLN_B_H] = "vssrln.b.h",
    [OPC_VSSRLN_H_W] = "vssrln.h.w",
    [OPC_VSSRLN_W_D] = "vssrln.w.d",
    [OPC_VSSRAN_B_H] = "vssran.b.h",
    [OPC_VSSRAN_H_W] = "vssran.h.w",
    [OPC_VSSRAN_W_D] = "vssran.w.d",
    [OPC_VSSRLN_BU_H] = "vssrln.bu.h",
    [OPC_VSSRLN_HU_W] = "vssrln.hu.w",
    [OPC_VSSRLN_WU_D] = "vssrln.wu.d",
    [OPC_VSSRAN_BU_H] = "vssran.bu.h",
    [OPC_VSSRAN_HU_W] = "vssran.hu.w",
    [OPC_VSSRAN_WU_D] = "vssran.wu.d",
    [OPC_VSSRLNI_B_H] = "vssrlni.b.h",
    [OPC_VSSRLNI_H_W] = "vssrlni.h.w",
    [OPC_VSSRLNI_W_D] = "vssrlni.w.d",
    [OPC_VSSRLNI_D_Q] = "vssrlni.d.q",
    [OPC_VSSRANI_B_H] = "vssrani.b.h",
    [OPC_VSSRANI_H_W] = "vssrani.h.w",
    [OPC_VSSRANI_W_D] = "vssrani.w.d",
    [OPC_VSSRANI_D_Q] = "vssrani.d.q",
    [OPC_VSSRLNI_BU_H] = "vssrlni.bu.h",
    [OPC_VSSRLNI_HU_W] = "vssrlni.hu.w",
    [OPC_VSSRLNI_WU_D] = "vssrlni.wu.d",
    [OPC_VSSRLNI_DU_Q] = "vssrlni.du.q",
    [OPC_VSSRANI_BU_H] = "vssrani.bu.h",
    [OPC_VSSRANI_HU_W] = "vssrani.hu.w",
    [OPC_VSSRANI_WU_D] = "vssrani.wu.d",
    [OPC_VSSRANI_DU_Q] = "vssrani.du.q",
    [OPC_VSSRLRN_B_H] = "vssrlrn.b.h",
    [OPC_VSSRLRN_H_W] = "vssrlrn.h.w",
    [OPC_VSSRLRN_W_D] = "vssrlrn.w.d",
    [OPC_VSSRARN_B_H] = "vssrarn.b.h",
    [OPC_VSSRARN_H_W] = "vssrarn.h.w",
    [OPC_VSSRARN_W_D] = "vssrarn.w.d",
    [OPC_VSSRLRN_BU_H] = "vssrlrn.bu.h",
    [OPC_VSSRLRN_HU_W] = "vssrlrn.hu.w",
    [OPC_VSSRLRN_WU_D] = "vssrlrn.wu.d",
    [OPC_VSSRARN_BU_H] = "vssrarn.bu.h",
    [OPC_VSSRARN_HU_W] = "vssrarn.hu.w",
    [OPC_VSSRARN_WU_D] = "vssrarn.wu.d",
    [OPC_VSSRLRNI_B_H] = "vssrlrni.b.h",
    [OPC_VSSRLRNI_H_W] = "vssrlrni.h.w",
    [OPC_VSSRLRNI_W_D] = "vssrlrni.w.d",
    [OPC_VSSRLRNI_D_Q] = "vssrlrni.d.q",
    [OPC_VSSRARNI_B_H] = "vssrarni.b.h",
    [OPC_VSSRARNI_H_W] = "vssrarni.h.w",
    [OPC_VSSRARNI_W_D] = "vssrarni.w.d",
    [OPC_VSSRARNI_D_Q] = "vssrarni.d.q",
    [OPC_VSSRLRNI_BU_H] = "vssrlrni.bu.h",
    [OPC_VSSRLRNI_HU_W] = "vssrlrni.hu.w",
    [OPC_VSSRLRNI_WU_D] = "vssrlrni.wu.d",
    [OPC_VSSRLRNI_DU_Q] = "vssrlrni.du.q",
    [OPC_VSSRARNI_BU_H] = "vssrarni.bu.h",
    [OPC_VSSRARNI_HU_W] = "vssrarni.hu.w",
    [OPC_VSSRARNI_WU_D] = "vssrarni.wu.d",
    [OPC_VSSRARNI_DU_Q] = "vssrarni.du.q",
    [OPC_VCLO_B] = "vclo.b",
    [OPC_VCLO_H] = "vclo.h",
    [OPC_VCLO_W] = "vclo.w",
    [OPC_VCLO_D] = "vclo.d",
    [OPC_VCLZ_B] = "vclz.b",
    [OPC_VCLZ_H] = "vclz.h",
    [OPC_VCLZ_W] = "vclz.w",
    [OPC_VCLZ_D] = "vclz.d",
    [OPC_VPCNT_B] = "vpcnt.b",
    [OPC_VPCNT_H] = "vpcnt.h",
    [OPC_VPCNT_W] = "vpcnt.w",
    [OPC_VPCNT_D] = "vpcnt.d",
    [OPC_VBITCLR_B] = "vbitclr.b",
    [OPC_VBITCLR_H] = "vbitclr.h",
    [OPC_VBITCLR_W] = "vbitclr.w",
    [OPC_VBITCLR_D] = "vbitclr.d",
    [OPC_VBITCLRI_B] = "vbitclri.b",
    [OPC_VBITCLRI_H] = "vbitclri.h",
    [OPC_VBITCLRI_W] = "vbitclri.w",
    [OPC_VBITCLRI_D] = "vbitclri.d",
    [OPC_VBITSET_B] = "vbitset.b",
    [OPC_VBITSET_H] = "vbitset.h",
    [OPC_VBITSET_W] = "vbitset.w",
    [OPC_VBITSET_D] = "vbitset.d",
    [OPC_VBITSETI_B] = "vbitseti.b",
    [OPC_VBITSETI_H] = "vbitseti.h",
    [OPC_VBITSETI_W] = "vbitseti.w",
    [OPC_VBITSETI_D] = "vbitseti.d",
    [OPC_VBITREV_B] = "vbitrev.b",
    [OPC_VBITREV_H] = "vbitrev.h",
    [OPC_VBITREV_W] = "vbitrev.w",
    [OPC_VBITREV_D] = "vbitrev.d",
    [OPC_VBITREVI_B] = "vbitrevi.b",
    [OPC_VBITREVI_H] = "vbitrevi.h",
    [OPC_VBITREVI_W] = "vbitrevi.w",
    [OPC_VBITREVI_D] = "vbitrevi.d",
    [OPC_VFRSTP_B] = "vfrstp.b",
    [OPC_VFRSTP_H] = "vfrstp.h",
    [OPC_VFRSTPI_B] = "vfrstpi.b",
    [OPC_VFRSTPI_H] = "vfrstpi.h",
    [OPC_VFADD_S] = "vfadd.s",
    [OPC_VFADD_D] = "vfadd.d",
    [OPC_VFSUB_S] = "vfsub.s",
    [OPC_VFSUB_D] = "vfsub.d",
    [OPC_VFMUL_S] = "vfmul.s",
    [OPC_VFMUL_D] = "vfmul.d",
    [OPC_VFDIV_S] = "vfdiv.s",
    [OPC_VFDIV_D] = "vfdiv.d",
    [OPC_VFMADD_S] = "vfmadd.s",
    [OPC_VFMADD_D] = "vfmadd.d",
    [OPC_VFMSUB_S] = "vfmsub.s",
    [OPC_VFMSUB_D] = "vfmsub.d",
    [OPC_VFNMADD_S] = "vfnmadd.s",
    [OPC_VFNMADD_D] = "vfnmadd.d",
    [OPC_VFNMSUB_S] = "vfnmsub.s",
    [OPC_VFNMSUB_D] = "vfnmsub.d",
    [OPC_VFMAX_S] = "vfmax.s",
    [OPC_VFMAX_D] = "vfmax.d",
    [OPC_VFMIN_S] = "vfmin.s",
    [OPC_VFMIN_D] = "vfmin.d",
    [OPC_VFMAXA_S] = "vfmaxa.s",
    [OPC_VFMAXA_D] = "vfmaxa.d",
    [OPC_VFMINA_S] = "vfmina.s",
    [OPC_VFMINA_D] = "vfmina.d",
    [OPC_VFLOGB_S] = "vflogb.s",
    [OPC_VFLOGB_D] = "vflogb.d",
    [OPC_VFCLASS_S] = "vfclass.s",
    [OPC_VFCLASS_D] = "vfclass.d",
    [OPC_VFSQRT_S] = "vfsqrt.s",
    [OPC_VFSQRT_D] = "vfsqrt.d",
    [OPC_VFRECIP_S] = "vfrecip.s",
    [OPC_VFRECIP_D] = "vfrecip.d",
    [OPC_VFRSQRT_S] = "vfrsqrt.s",
    [OPC_VFRSQRT_D] = "vfrsqrt.d",
    [OPC_VFCVTL_S_H] = "vfcvtl.s.h",
    [OPC_VFCVTH_S_H] = "vfcvth.s.h",
    [OPC_VFCVTL_D_S] = "vfcvtl.d.s",
    [OPC_VFCVTH_D_S] = "vfcvth.d.s",
    [OPC_VFCVT_H_S] = "vfcvt.h.s",
    [OPC_VFCVT_S_D] = "vfcvt.s.d",
    [OPC_VFRINT_S] = "vfrint.s",
    [OPC_VFRINT_D] = "vfrint.d",
    [OPC_VFRINTRM_S] = "vfrintrm.s",
    [OPC_VFRINTRM_D] = "vfrintrm.d",
    [OPC_VFRINTRP_S] = "vfrintrp.s",
    [OPC_VFRINTRP_D] = "vfrintrp.d",
    [OPC_VFRINTRZ_S] = "vfrintrz.s",
    [OPC_VFRINTRZ_D] = "vfrintrz.d",
    [OPC_VFRINTRNE_S] = "vfrintrne.s",
    [OPC_VFRINTRNE_D] = "vfrintrne.d",
    [OPC_VFTINT_W_S] = "vftint.w.s",
    [OPC_VFTINT_L_D] = "vftint.l.d",
    [OPC_VFTINTRM_W_S] = "vftintrm.w.s",
    [OPC_VFTINTRM_L_D] = "vftintrm.l.d",
    [OPC_VFTINTRP_W_S] = "vftintrp.w.s",
    [OPC_VFTINTRP_L_D] = "vftintrp.l.d",
    [OPC_VFTINTRZ_W_S] = "vftintrz.w.s",
    [OPC_VFTINTRZ_L_D] = "vftintrz.l.d",
    [OPC_VFTINTRNE_W_S] = "vftintrne.w.s",
    [OPC_VFTINTRNE_L_D] = "vftintrne.l.d",
    [OPC_VFTINT_WU_S] = "vftint.wu.s",
    [OPC_VFTINT_LU_D] = "vftint.lu.d",
    [OPC_VFTINTRZ_WU_S] = "vftintrz.wu.s",
    [OPC_VFTINTRZ_LU_D] = "vftintrz.lu.d",
    [OPC_VFTINT_W_D] = "vftint.w.d",
    [OPC_VFTINTRM_W_D] = "vftintrm.w.d",
    [OPC_VFTINTRP_W_D] = "vftintrp.w.d",
    [OPC_VFTINTRZ_W_D] = "vftintrz.w.d",
    [OPC_VFTINTRNE_W_D] = "vftintrne.w.d",
    [OPC_VFTINTL_L_S] = "vftintl.l.s",
    [OPC_VFTINTH_L_S] = "vftinth.l.s",
    [OPC_VFTINTRML_L_S] = "vftintrml.l.s",
    [OPC_VFTINTRMH_L_S] = "vftintrmh.l.s",
    [OPC_VFTINTRPL_L_S] = "vftintrpl.l.s",
    [OPC_VFTINTRPH_L_S] = "vftintrph.l.s",
    [OPC_VFTINTRZL_L_S] = "vftintrzl.l.s",
    [OPC_VFTINTRZH_L_S] = "vftintrzh.l.s",
    [OPC_VFTINTRNEL_L_S] = "vftintrnel.l.s",
    [OPC_VFTINTRNEH_L_S] = "vftintrneh.l.s",
    [OPC_VFFINT_S_W] = "vffint.s.w",
    [OPC_VFFINT_S_WU] = "vffint.s.wu",
    [OPC_VFFINT_D_L] = "vffint.d.l",
    [OPC_VFFINT_D_LU] = "vffint.d.lu",
    [OPC_VFFINTL_D_W] = "vffintl.d.w",
    [OPC_VFFINTH_D_W] = "vffinth.d.w",
    [OPC_VFFINT_S_L] = "vffint.s.l",
    [OPC_VSEQ_B] = "vseq.b",
    [OPC_VSEQ_H] = "vseq.h",
    [OPC_VSEQ_W] = "vseq.w",
    [OPC_VSEQ_D] = "vseq.d",
    [OPC_VSEQI_B] = "vseqi.b",
    [OPC_VSEQI_H] = "vseqi.h",
    [OPC_VSEQI_W] = "vseqi.w",
    [OPC_VSEQI_D] = "vseqi.d",
    [OPC_VSLE_B] = "vsle.b",
    [OPC_VSLE_H] = "vsle.h",
    [OPC_VSLE_W] = "vsle.w",
    [OPC_VSLE_D] = "vsle.d",
    [OPC_VSLEI_B] = "vslei.b",
    [OPC_VSLEI_H] = "vslei.h",
    [OPC_VSLEI_W] = "vslei.w",
    [OPC_VSLEI_D] = "vslei.d",
    [OPC_VSLE_BU] = "vsle.bu",
    [OPC_VSLE_HU] = "vsle.hu",
    [OPC_VSLE_WU] = "vsle.wu",
    [OPC_VSLE_DU] = "vsle.du",
    [OPC_VSLEI_BU] = "vslei.bu",
    [OPC_VSLEI_HU] = "vslei.hu",
    [OPC_VSLEI_WU] = "vslei.wu",
    [OPC_VSLEI_DU] = "vslei.du",
    [OPC_VSLT_B] = "vslt.b",
    [OPC_VSLT_H] = "vslt.h",
    [OPC_VSLT_W] = "vslt.w",
    [OPC_VSLT_D] = "vslt.d",
    [OPC_VSLTI_B] = "vslti.b",
    [OPC_VSLTI_H] = "vslti.h",
    [OPC_VSLTI_W] = "vslti.w",
    [OPC_VSLTI_D] = "vslti.d",
    [OPC_VSLT_BU] = "vslt.bu",
    [OPC_VSLT_HU] = "vslt.hu",
    [OPC_VSLT_WU] = "vslt.wu",
    [OPC_VSLT_DU] = "vslt.du",
    [OPC_VSLTI_BU] = "vslti.bu",
    [OPC_VSLTI_HU] = "vslti.hu",
    [OPC_VSLTI_WU] = "vslti.wu",
    [OPC_VSLTI_DU] = "vslti.du",
    [OPC_VFCMP_COND_S] = "vfcmp.cond.s",
    [OPC_VFCMP_COND_D] = "vfcmp.cond.d",
    [OPC_VBITSEL_V] = "vbitsel.v",
    [OPC_VBITSELI_B] = "vbitseli.b",
    [OPC_VSETEQZ_V] = "vseteqz.v",
    [OPC_VSETNEZ_V] = "vsetnez.v",
    [OPC_VSETANYEQZ_B] = "vsetanyeqz.b",
    [OPC_VSETANYEQZ_H] = "vsetanyeqz.h",
    [OPC_VSETANYEQZ_W] = "vsetanyeqz.w",
    [OPC_VSETANYEQZ_D] = "vsetanyeqz.d",
    [OPC_VSETALLNEZ_B] = "vsetallnez.b",
    [OPC_VSETALLNEZ_H] = "vsetallnez.h",
    [OPC_VSETALLNEZ_W] = "vsetallnez.w",
    [OPC_VSETALLNEZ_D] = "vsetallnez.d",
    [OPC_VINSGR2VR_B] = "vinsgr2vr.b",
    [OPC_VINSGR2VR_H] = "vinsgr2vr.h",
    [OPC_VINSGR2VR_W] = "vinsgr2vr.w",
    [OPC_VINSGR2VR_D] = "vinsgr2vr.d",
    [OPC_VPICKVE2GR_B] = "vpickve2gr.b",
    [OPC_VPICKVE2GR_H] = "vpickve2gr.h",
    [OPC_VPICKVE2GR_W] = "vpickve2gr.w",
    [OPC_VPICKVE2GR_D] = "vpickve2gr.d",
    [OPC_VPICKVE2GR_BU] = "vpickve2gr.bu",
    [OPC_VPICKVE2GR_HU] = "vpickve2gr.hu",
    [OPC_VPICKVE2GR_WU] = "vpickve2gr.wu",
    [OPC_VPICKVE2GR_DU] = "vpickve2gr.du",
    [OPC_VREPLGR2VR_B] = "vreplgr2vr.b",
    [OPC_VREPLGR2VR_H] = "vreplgr2vr.h",
    [OPC_VREPLGR2VR_W] = "vreplgr2vr.w",
    [OPC_VREPLGR2VR_D] = "vreplgr2vr.d",
    [OPC_VREPLVE_B] = "vreplve.b",
    [OPC_VREPLVE_H] = "vreplve.h",
    [OPC_VREPLVE_W] = "vreplve.w",
    [OPC_VREPLVE_D] = "vreplve.d",
    [OPC_VREPLVEI_B] = "vreplvei.b",
    [OPC_VREPLVEI_H] = "vreplvei.h",
    [OPC_VREPLVEI_W] = "vreplvei.w",
    [OPC_VREPLVEI_D] = "vreplvei.d",
    [OPC_VBSLL_V] = "vbsll.v",
    [OPC_VBSRL_V] = "vbsrl.v",
    [OPC_VPACKEV_B] = "vpackev.b",
    [OPC_VPACKEV_H] = "vpackev.h",
    [OPC_VPACKEV_W] = "vpackev.w",
    [OPC_VPACKEV_D] = "vpackev.d",
    [OPC_VPACKOD_B] = "vpackod.b",
    [OPC_VPACKOD_H] = "vpackod.h",
    [OPC_VPACKOD_W] = "vpackod.w",
    [OPC_VPACKOD_D] = "vpackod.d",
    [OPC_VPICKEV_B] = "vpickev.b",
    [OPC_VPICKEV_H] = "vpickev.h",
    [OPC_VPICKEV_W] = "vpickev.w",
    [OPC_VPICKEV_D] = "vpickev.d",
    [OPC_VPICKOD_B] = "vpickod.b",
    [OPC_VPICKOD_H] = "vpickod.h",
    [OPC_VPICKOD_W] = "vpickod.w",
    [OPC_VPICKOD_D] = "vpickod.d",
    [OPC_VILVL_B] = "vilvl.b",
    [OPC_VILVL_H] = "vilvl.h",
    [OPC_VILVL_W] = "vilvl.w",
    [OPC_VILVL_D] = "vilvl.d",
    [OPC_VILVH_B] = "vilvh.b",
    [OPC_VILVH_H] = "vilvh.h",
    [OPC_VILVH_W] = "vilvh.w",
    [OPC_VILVH_D] = "vilvh.d",
    [OPC_VSHUF_B] = "vshuf.b",
    [OPC_VSHUF_H] = "vshuf.h",
    [OPC_VSHUF_W] = "vshuf.w",
    [OPC_VSHUF_D] = "vshuf.d",
    [OPC_VSHUF4I_B] = "vshuf4i.b",
    [OPC_VSHUF4I_H] = "vshuf4i.h",
    [OPC_VSHUF4I_W] = "vshuf4i.w",
    [OPC_VSHUF4I_D] = "vshuf4i.d",
    [OPC_VPERMI_W] = "vpermi.w",
    [OPC_VEXTRINS_D] = "vextrins.d",
    [OPC_VEXTRINS_W] = "vextrins.w",
    [OPC_VEXTRINS_H] = "vextrins.h",
    [OPC_VEXTRINS_B] = "vextrins.b",
    [OPC_VLD] = "vld",
    [OPC_VST] = "vst",
    [OPC_VLDX] = "vldx",
    [OPC_VSTX] = "vstx",
    [OPC_VLDREPL_D] = "vldrepl.d",
    [OPC_VLDREPL_W] = "vldrepl.w",
    [OPC_VLDREPL_H] = "vldrepl.h",
    [OPC_VLDREPL_B] = "vldrepl.b",
    [OPC_VSTELM_D] = "vstelm.d",
    [OPC_VSTELM_W] = "vstelm.w",
    [OPC_VSTELM_H] = "vstelm.h",
    [OPC_VSTELM_B] = "vstelm.b",
    [OPC_XVLD] = "xvld",
    [OPC_XVST] = "xvst",
};

uint32_t opc2bin[] = 
{
    [OPC_GR2SCR]=2048,
    [OPC_SRC2GR]=3072,
    [OPC_CLO_W]=4096,
    [OPC_CLZ_W]=5120,
    [OPC_CTO_W]=6144,
    [OPC_CTZ_W]=7168,
    [OPC_CLO_D]=8192,
    [OPC_CLZ_D]=9216,
    [OPC_CTO_D]=10240,
    [OPC_CTZ_D]=11264,
    [OPC_REVB_2H]=12288,
    [OPC_REVB_4H]=13312,
    [OPC_REVB_2W]=14336,
    [OPC_REVB_D]=15360,
    [OPC_REVH_2W]=16384,
    [OPC_REVH_D]=17408,
    [OPC_BITREV_4B]=18432,
    [OPC_BITREV_8B]=19456,
    [OPC_BITREV_W]=20480,
    [OPC_BITREV_D]=21504,
    [OPC_EXT_W_H]=22528,
    [OPC_EXT_W_B]=23552,
    [OPC_RDTIMEL_W]=24576,
    [OPC_RDTIMEH_W]=25600,
    [OPC_RDTIME_D]=26624,
    [OPC_CPUCFG]=27648,
    [OPC_X86MTTOP]=28672,
    [OPC_X86MFTOP]=29696,
    [OPC_SETX86LOOPE]=30720,
    [OPC_SETX86LOOPNE]=31744,
    [OPC_X86INC_B]=32768,
    [OPC_X86INC_H]=32769,
    [OPC_X86INC_W]=32770,
    [OPC_X86INC_D]=32771,
    [OPC_X86DEC_B]=32772,
    [OPC_X86DEC_H]=32773,
    [OPC_X86DEC_W]=32774,
    [OPC_X86DEC_D]=32775,
    [OPC_X86SETTM]=32776,
    [OPC_X86CLRTM]=32808,
    [OPC_X86INCTOP]=32777,
    [OPC_X86DECTOP]=32809,
    [OPC_ASRTLE_D]=65536,
    [OPC_ASRTGT_D]=98304,
    [OPC_ALSL_W]=262144,
    [OPC_ALSL_WU]=393216,
    [OPC_BYTEPICK_W]=524288,
    [OPC_BYTEPICK_D]=786432,
    [OPC_ADD_W]=1048576,
    [OPC_ADD_D]=1081344,
    [OPC_SUB_W]=1114112,
    [OPC_SUB_D]=1146880,
    [OPC_SLT]=1179648,
    [OPC_SLTU]=1212416,
    [OPC_MASKEQZ]=1245184,
    [OPC_MASKNEZ]=1277952,
    [OPC_NOR]=1310720,
    [OPC_AND]=1343488,
    [OPC_OR]=1376256,
    [OPC_XOR]=1409024,
    [OPC_ORN]=1441792,
    [OPC_ANDN]=1474560,
    [OPC_SLL_W]=1507328,
    [OPC_SRL_W]=1540096,
    [OPC_SRA_W]=1572864,
    [OPC_SLL_D]=1605632,
    [OPC_SRL_D]=1638400,
    [OPC_SRA_D]=1671168,
    [OPC_ROTR_B]=1703936,
    [OPC_ROTR_H]=1736704,
    [OPC_ROTR_W]=1769472,
    [OPC_ROTR_D]=1802240,
    [OPC_MUL_W]=1835008,
    [OPC_MULH_W]=1867776,
    [OPC_MULH_WU]=1900544,
    [OPC_MUL_D]=1933312,
    [OPC_MULH_D]=1966080,
    [OPC_MULH_DU]=1998848,
    [OPC_MULW_D_W]=2031616,
    [OPC_MULW_D_WU]=2064384,
    [OPC_DIV_W]=2097152,
    [OPC_MOD_W]=2129920,
    [OPC_DIV_WU]=2162688,
    [OPC_MOD_WU]=2195456,
    [OPC_DIV_D]=2228224,
    [OPC_MOD_D]=2260992,
    [OPC_DIV_DU]=2293760,
    [OPC_MOD_DU]=2326528,
    [OPC_CRC_W_B_W]=2359296,
    [OPC_CRC_W_H_W]=2392064,
    [OPC_CRC_W_W_W]=2424832,
    [OPC_CRC_W_D_W]=2457600,
    [OPC_CRCC_W_B_W]=2490368,
    [OPC_CRCC_W_H_W]=2523136,
    [OPC_CRCC_W_W_W]=2555904,
    [OPC_CRCC_W_D_W]=2588672,
    [OPC_ADDU12I_D]=2686976,
    [OPC_ADDU12I_W]=2719744,
    [OPC_BREAK]=2752512,
    [OPC_DBCL]=2785280,
    [OPC_SYSCALL]=2818048,
    [OPC_HVCL]=2850816,
    [OPC_ALSL_D]=2883584,
    [OPC_ADC_B]=3145728,
    [OPC_ADC_H]=3178496,
    [OPC_ADC_W]=3211264,
    [OPC_ADC_D]=3244032,
    [OPC_SBC_B]=3276800,
    [OPC_SBC_H]=3309568,
    [OPC_SBC_W]=3342336,
    [OPC_SBC_D]=3375104,
    [OPC_RCR_B]=3407872,
    [OPC_RCR_H]=3440640,
    [OPC_RCR_W]=3473408,
    [OPC_RCR_D]=3506176,
    [OPC_ARMMOVE]=3555328,
    [OPC_SETX86J]=3571712,
    [OPC_SETARMJ]=3588096,
    [OPC_ARMADD_W]=3604496,
    [OPC_ARMSUB_W]=3637264,
    [OPC_ARMADC_W]=3670032,
    [OPC_ARMSBC_W]=3702800,
    [OPC_ARMAND_W]=3735568,
    [OPC_ARMOR_W]=3768336,
    [OPC_ARMXOR_W]=3801104,
    [OPC_ARMSLL_W]=3833872,
    [OPC_ARMSRL_W]=3866640,
    [OPC_ARMSRA_W]=3899408,
    [OPC_ARMROTR_W]=3932176,
    [OPC_ARMSLLI_W]=3964944,
    [OPC_ARMSRLI_W]=3997712,
    [OPC_ARMSRAI_W]=4030480,
    [OPC_ARMROTRI_W]=4063248,
    [OPC_X86MUL_B]=4096000,
    [OPC_X86MUL_H]=4096001,
    [OPC_X86MUL_W]=4096002,
    [OPC_X86MUL_D]=4096003,
    [OPC_X86MUL_BU]=4096004,
    [OPC_X86MUL_HU]=4096005,
    [OPC_X86MUL_WU]=4096006,
    [OPC_X86MUL_DU]=4096007,
    [OPC_X86ADD_WU]=4128768,
    [OPC_X86ADD_DU]=4128769,
    [OPC_X86SUB_WU]=4128770,
    [OPC_X86SUB_DU]=4128771,
    [OPC_X86ADD_B]=4128772,
    [OPC_X86ADD_H]=4128773,
    [OPC_X86ADD_W]=4128774,
    [OPC_X86ADD_D]=4128775,
    [OPC_X86SUB_B]=4128776,
    [OPC_X86SUB_H]=4128777,
    [OPC_X86SUB_W]=4128778,
    [OPC_X86SUB_D]=4128779,
    [OPC_X86ADC_B]=4128780,
    [OPC_X86ADC_H]=4128781,
    [OPC_X86ADC_W]=4128782,
    [OPC_X86ADC_D]=4128783,
    [OPC_X86SBC_B]=4128784,
    [OPC_X86SBC_H]=4128785,
    [OPC_X86SBC_W]=4128786,
    [OPC_X86SBC_D]=4128787,
    [OPC_X86SLL_B]=4128788,
    [OPC_X86SLL_H]=4128789,
    [OPC_X86SLL_W]=4128790,
    [OPC_X86SLL_D]=4128791,
    [OPC_X86SRL_B]=4128792,
    [OPC_X86SRL_H]=4128793,
    [OPC_X86SRL_W]=4128794,
    [OPC_X86SRL_D]=4128795,
    [OPC_X86SRA_B]=4128796,
    [OPC_X86SRA_H]=4128797,
    [OPC_X86SRA_W]=4128798,
    [OPC_X86SRA_D]=4128799,
    [OPC_X86ROTR_B]=4161536,
    [OPC_X86ROTR_H]=4161537,
    [OPC_X86ROTR_D]=4161538,
    [OPC_X86ROTR_W]=4161539,
    [OPC_X86ROTL_B]=4161540,
    [OPC_X86ROTL_H]=4161541,
    [OPC_X86ROTL_W]=4161542,
    [OPC_X86ROTL_D]=4161543,
    [OPC_X86RCR_B]=4161544,
    [OPC_X86RCR_H]=4161545,
    [OPC_X86RCR_W]=4161546,
    [OPC_X86RCR_D]=4161547,
    [OPC_X86RCL_B]=4161548,
    [OPC_X86RCL_H]=4161549,
    [OPC_X86RCL_W]=4161550,
    [OPC_X86RCL_D]=4161551,
    [OPC_X86AND_B]=4161552,
    [OPC_X86AND_H]=4161553,
    [OPC_X86AND_W]=4161554,
    [OPC_X86AND_D]=4161555,
    [OPC_X86OR_B]=4161556,
    [OPC_X86OR_H]=4161557,
    [OPC_X86OR_W]=4161558,
    [OPC_X86OR_D]=4161559,
    [OPC_X86XOR_B]=4161560,
    [OPC_X86XOR_H]=4161561,
    [OPC_X86XOR_W]=4161562,
    [OPC_X86XOR_D]=4161563,
    [OPC_ARMNOT_W]=4177948,
    [OPC_ARMMOV_W]=4177949,
    [OPC_ARMMOV_D]=4177950,
    [OPC_ARMRRX_W]=4177951,
    [OPC_SLLI_W]=4227072,
    [OPC_SLLI_D]=4259840,
    [OPC_SRLI_W]=4489216,
    [OPC_SRLI_D]=4521984,
    [OPC_SRAI_W]=4751360,
    [OPC_SRAI_D]=4784128,
    [OPC_ROTRI_B]=4988928,
    [OPC_ROTRI_H]=4997120,
    [OPC_ROTRI_W]=5013504,
    [OPC_ROTRI_D]=5046272,
    [OPC_RCRI_B]=5251072,
    [OPC_RCRI_H]=5259264,
    [OPC_RCRI_W]=5275648,
    [OPC_RCRI_D]=5308416,
    [OPC_X86SLLI_B]=5513216,
    [OPC_X86SLLI_H]=5521409,
    [OPC_X86SLLI_W]=5537794,
    [OPC_X86SRLI_B]=5513220,
    [OPC_X86SRLI_H]=5521413,
    [OPC_X86SRLI_W]=5537798,
    [OPC_X86SRAI_B]=5513224,
    [OPC_X86SRAI_H]=5521417,
    [OPC_X86SRAI_W]=5537802,
    [OPC_X86ROTRI_B]=5513228,
    [OPC_X86ROTRI_H]=5521421,
    [OPC_X86ROTRI_W]=5537806,
    [OPC_X86RCRI_B]=5513232,
    [OPC_X86RCRI_H]=5521425,
    [OPC_X86RCRI_W]=5537810,
    [OPC_X86ROTLI_B]=5513236,
    [OPC_X86ROTLI_H]=5521429,
    [OPC_X86ROTLI_W]=5537814,
    [OPC_X86RCLI_B]=5513240,
    [OPC_X86RCLI_H]=5521433,
    [OPC_X86RCLI_W]=5537818,
    [OPC_X86SLLI_D]=5570563,
    [OPC_X86SRLI_D]=5570567,
    [OPC_X86SRAI_D]=5570571,
    [OPC_X86ROTRI_D]=5570575,
    [OPC_X86RCRI_D]=5570579,
    [OPC_X86ROTLI_D]=5570583,
    [OPC_X86RCLI_D]=5570587,
    [OPC_X86SETTAG]=5767168,
    [OPC_X86MFFLAG]=6029312,
    [OPC_X86MTFLAG]=6029344,
    [OPC_ARMMFFLAG]=6029376,
    [OPC_ARMMTFLAG]=6029408,
    [OPC_BSTRINS_W]=6291456,
    [OPC_BSTRPICK_W]=6324224,
    [OPC_BSTRINS_D]=8388608,
    [OPC_BSTRPICK_D]=12582912,
    [OPC_FADD_S]=16809984,
    [OPC_FADD_D]=16842752,
    [OPC_FSUB_S]=16941056,
    [OPC_FSUB_D]=16973824,
    [OPC_FMUL_S]=17072128,
    [OPC_FMUL_D]=17104896,
    [OPC_FDIV_S]=17203200,
    [OPC_FDIV_D]=17235968,
    [OPC_FMAX_S]=17334272,
    [OPC_FMAX_D]=17367040,
    [OPC_FMIN_S]=17465344,
    [OPC_FMIN_D]=17498112,
    [OPC_FMAXA_S]=17596416,
    [OPC_FMAXA_D]=17629184,
    [OPC_FMINA_S]=17727488,
    [OPC_FMINA_D]=17760256,
    [OPC_FSCALEB_S]=17858560,
    [OPC_FSCALEB_D]=17891328,
    [OPC_FCOPYSIGN_S]=17989632,
    [OPC_FCOPYSIGN_D]=18022400,
    [OPC_FABS_S]=18088960,
    [OPC_FABS_D]=18089984,
    [OPC_FNEG_S]=18093056,
    [OPC_FNEG_D]=18094080,
    [OPC_FLOGB_S]=18097152,
    [OPC_FLOGB_D]=18098176,
    [OPC_FCLASS_S]=18101248,
    [OPC_FCLASS_D]=18102272,
    [OPC_FSQRT_S]=18105344,
    [OPC_FSQRT_D]=18106368,
    [OPC_FRECIP_S]=18109440,
    [OPC_FRECIP_D]=18110464,
    [OPC_FRSQRT_S]=18113536,
    [OPC_FRSQRT_D]=18114560,
    [OPC_FMOV_S]=18125824,
    [OPC_FMOV_D]=18126848,
    [OPC_MOVGR2FR_W]=18129920,
    [OPC_MOVGR2FR_D]=18130944,
    [OPC_MOVGR2FRH_W]=18131968,
    [OPC_MOVFR2GR_S]=18134016,
    [OPC_MOVFR2GR_D]=18135040,
    [OPC_MOVFRH2GR_S]=18136064,
    [OPC_MOVGR2FCSR]=18137088,
    [OPC_MOVFCSR2GR]=18139136,
    [OPC_MOVFR2CF]=18141184,
    [OPC_MOVCF2FR]=18142208,
    [OPC_MOVGR2CF]=18143232,
    [OPC_MOVCF2GR]=18144256,
    [OPC_FCVT_LD_D]=18145280,
    [OPC_FCVT_UD_D]=18146304,
    [OPC_FCVT_D_LC]=18153472,
    [OPC_FCVT_S_D]=18421760,
    [OPC_FCVT_D_S]=18424832,
    [OPC_FTINTRM_W_S]=18482176,
    [OPC_FTINTRM_W_D]=18483200,
    [OPC_FTINTRM_L_S]=18490368,
    [OPC_FTINTRM_L_D]=18491392,
    [OPC_FTINTRP_W_S]=18498560,
    [OPC_FTINTRP_W_D]=18499584,
    [OPC_FTINTRP_L_S]=18506752,
    [OPC_FTINTRP_L_D]=18507776,
    [OPC_FTINTRZ_W_S]=18514944,
    [OPC_FTINTRZ_W_D]=18515968,
    [OPC_FTINTRZ_L_S]=18523136,
    [OPC_FTINTRZ_L_D]=18524160,
    [OPC_FTINTRNE_W_S]=18531328,
    [OPC_FTINTRNE_W_D]=18532352,
    [OPC_FTINTRNE_L_S]=18539520,
    [OPC_FTINTRNE_L_D]=18540544,
    [OPC_FTINT_W_S]=18547712,
    [OPC_FTINT_W_D]=18548736,
    [OPC_FTINT_L_S]=18555904,
    [OPC_FTINT_L_D]=18556928,
    [OPC_FFINT_S_W]=18681856,
    [OPC_FFINT_S_L]=18683904,
    [OPC_FFINT_D_W]=18685952,
    [OPC_FFINT_D_L]=18688000,
    [OPC_FRINT_S]=18760704,
    [OPC_FRINT_D]=18761728,
    [OPC_SLTI]=33554432,
    [OPC_SLTUI]=37748736,
    [OPC_ADDI_W]=41943040,
    [OPC_ADDI_D]=46137344,
    [OPC_LU52I_D]=50331648,
    [OPC_ANDI]=54525952,
    [OPC_ORI]=58720256,
    [OPC_XORI]=62914560,
    [OPC_CSRRD]=67108864,
    [OPC_CSRWR]=67108896,
    [OPC_CSRXCHG]=67108864,
    [OPC_GCSRRD]=83886080,
    [OPC_GCSRWR]=83886112,
    [OPC_GCSRXCHG]=83886080,
    [OPC_CACOP]=100663296,
    [OPC_LDDIR]=104857600,
    [OPC_LDPTE]=105119744,
    [OPC_IOCSRRD_B]=105381888,
    [OPC_IOCSRRD_H]=105382912,
    [OPC_IOCSRRD_W]=105383936,
    [OPC_IOCSRRD_D]=105384960,
    [OPC_IOCSRWR_B]=105385984,
    [OPC_IOCSRWR_H]=105387008,
    [OPC_IOCSRWR_W]=105388032,
    [OPC_IOCSRWR_D]=105389056,
    [OPC_TLBCLR]=105390080,
    [OPC_GTLBCLR]=105390081,
    [OPC_TLBFLUSH]=105391104,
    [OPC_GTLBFLUSH]=105391105,
    [OPC_TLBSRCH]=105392128,
    [OPC_GTLBSRCH]=105392129,
    [OPC_TLBRD]=105393152,
    [OPC_GTLBRD]=105393153,
    [OPC_TLBWR]=105394176,
    [OPC_GTLBWR]=105394177,
    [OPC_TLBFILL]=105395200,
    [OPC_GTLBFILL]=105395201,
    [OPC_ERTN]=105396224,
    [OPC_IDLE]=105414656,
    [OPC_SCFGR_W]=105455616,
    [OPC_SCFGR_D]=105456640,
    [OPC_SCFGW_W]=105457664,
    [OPC_SCFGW_D]=105458688,
    [OPC_SNOP]=105459712,
    [OPC_INVTLB]=105480192,
    [OPC_FMADD_S]=135266304,
    [OPC_FMADD_D]=136314880,
    [OPC_FMSUB_S]=139460608,
    [OPC_FMSUB_D]=140509184,
    [OPC_FNMADD_S]=143654912,
    [OPC_FNMADD_D]=144703488,
    [OPC_FNMSUB_S]=147849216,
    [OPC_FNMSUB_D]=148897792,
    [OPC_vfmadd_s]=152043520,
    [OPC_vfmadd_d]=153092096,
    [OPC_vfmsub_s]=156237824,
    [OPC_vfmsub_d]=157286400,
    [OPC_vfnmadd_s]=160432128,
    [OPC_vfnmadd_d]=161480704,
    [OPC_vfnmsub_s]=164626432,
    [OPC_vfnmsub_d]=165675008,
    [OPC_FCMP_CAF_S]=202375168,
    [OPC_FCMP_SAF_S]=202407936,
    [OPC_FCMP_CLT_S]=202440704,
    [OPC_FCMP_STL_S]=202473472,
    [OPC_FCMP_CEQ_S]=202506240,
    [OPC_FCMP_SEQ_S]=202539008,
    [OPC_FCMP_CLE_S]=202571776,
    [OPC_FCMP_SLE_S]=202604544,
    [OPC_FCMP_CUN_S]=202637312,
    [OPC_FCMP_SUN_S]=202670080,
    [OPC_FCMP_CULT_S]=202702848,
    [OPC_FCMP_SULT_S]=202735616,
    [OPC_FCMP_CUEQ_S]=202768384,
    [OPC_FCMP_SUEQ_S]=202801152,
    [OPC_FCMP_CULE_S]=202833920,
    [OPC_FCMP_SULE_S]=202866688,
    [OPC_FCMP_CNE_S]=202899456,
    [OPC_FCMP_SNE_S]=202932224,
    [OPC_FCMP_COR_S]=203030528,
    [OPC_FCMP_SOR_S]=203063296,
    [OPC_FCMP_CUNE_S]=203161600,
    [OPC_FCMP_SUNE_S]=203194368,
    [OPC_FCMP_CAF_D]=203423744,
    [OPC_FCMP_SAF_D]=203456512,
    [OPC_FCMP_CLT_D]=203489280,
    [OPC_FCMP_STL_D]=203522048,
    [OPC_FCMP_CEQ_D]=203554816,
    [OPC_FCMP_SEQ_D]=203587584,
    [OPC_FCMP_CLE_D]=203620352,
    [OPC_FCMP_SLE_D]=203653120,
    [OPC_FCMP_CUN_D]=203685888,
    [OPC_FCMP_SUN_D]=203718656,
    [OPC_FCMP_CULT_D]=203751424,
    [OPC_FCMP_SULT_D]=203784192,
    [OPC_FCMP_CUEQ_D]=203816960,
    [OPC_FCMP_SUEQ_D]=203849728,
    [OPC_FCMP_CULE_D]=203882496,
    [OPC_FCMP_SULE_D]=203915264,
    [OPC_FCMP_CNE_D]=203948032,
    [OPC_FCMP_SNE_D]=203980800,
    [OPC_FCMP_COR_D]=204079104,
    [OPC_FCMP_SOR_D]=204111872,
    [OPC_FCMP_CUNE_D]=204210176,
    [OPC_FCMP_SUNE_D]=204242944,
    [OPC_vfcmp_cond_s]=206569472,
    [OPC_vfcmp_cond_d]=207618048,
    [OPC_FSEL]=218103808,
    [OPC_vbitsel_v]=219152384,
    [OPC_vshuf_b]=223346688,
    [OPC_ADDU16I_D]=268435456,
    [OPC_LU12I_W]=335544320,
    [OPC_LU32I_D]=369098752,
    [OPC_PCADDI]=402653184,
    [OPC_PCALAU12I]=436207616,
    [OPC_PCADDU12I]=469762048,
    [OPC_PCADDU18I]=503316480,
    [OPC_LL_W]=536870912,
    [OPC_SC_W]=553648128,
    [OPC_LL_D]=570425344,
    [OPC_SC_D]=587202560,
    [OPC_LDPTR_W]=603979776,
    [OPC_STPTR_W]=620756992,
    [OPC_LDPTR_D]=637534208,
    [OPC_STPTR_D]=654311424,
    [OPC_LD_B]=671088640,
    [OPC_LD_H]=675282944,
    [OPC_LD_W]=679477248,
    [OPC_LD_D]=683671552,
    [OPC_ST_B]=687865856,
    [OPC_ST_H]=692060160,
    [OPC_ST_W]=696254464,
    [OPC_ST_D]=700448768,
    [OPC_LD_BU]=704643072,
    [OPC_LD_HU]=708837376,
    [OPC_LD_WU]=713031680,
    [OPC_PRELD]=717225984,
    [OPC_FLD_S]=721420288,
    [OPC_FST_S]=725614592,
    [OPC_FLD_D]=729808896,
    [OPC_FST_D]=734003200,
    [OPC_vld]=738197504,
    [OPC_vst]=742391808,
    [OPC_xvld]=746586112,
    [OPC_xvst]=750780416,
    [OPC_LDL_W]=771751936,
    [OPC_LDR_W]=775946240,
    [OPC_LDL_D]=780140544,
    [OPC_LDR_D]=784334848,
    [OPC_STL_W]=788529152,
    [OPC_STR_W]=792723456,
    [OPC_STL_D]=796917760,
    [OPC_STR_D]=801112064,
    [OPC_vldrepl_d]=806354944,
    [OPC_vldrepl_w]=807403520,
    [OPC_vldrepl_h]=809500672,
    [OPC_vldrepl_b]=813694976,
    [OPC_vstelm_d]=823132160,
    [OPC_vstelm_w]=824180736,
    [OPC_vstelm_h]=826277888,
    [OPC_vstelm_b]=830472192,
    [OPC_LDX_B]=939524096,
    [OPC_LDX_H]=939786240,
    [OPC_LDX_W]=940048384,
    [OPC_LDX_D]=940310528,
    [OPC_STX_B]=940572672,
    [OPC_STX_H]=940834816,
    [OPC_STX_W]=941096960,
    [OPC_STX_D]=941359104,
    [OPC_LDX_BU]=941621248,
    [OPC_LDX_HU]=941883392,
    [OPC_LDX_WU]=942145536,
    [OPC_PRELDX]=942407680,
    [OPC_FLDX_S]=942669824,
    [OPC_FLDX_D]=942931968,
    [OPC_FSTX_S]=943194112,
    [OPC_FSTX_D]=943456256,
    [OPC_vldx]=943718400,
    [OPC_vstx]=943980544,
    [OPC_AMSWAP_W]=945815552,
    [OPC_AMSWAP_D]=945848320,
    [OPC_AMADD_W]=945881088,
    [OPC_AMADD_D]=945913856,
    [OPC_AMAND_W]=945946624,
    [OPC_AMAND_D]=945979392,
    [OPC_AMOR_W]=946012160,
    [OPC_AMOR_D]=946044928,
    [OPC_AMXOR_W]=946077696,
    [OPC_AMXOR_D]=946110464,
    [OPC_AMMAX_W]=946143232,
    [OPC_AMMAX_D]=946176000,
    [OPC_AMMIN_W]=946208768,
    [OPC_AMMIN_D]=946241536,
    [OPC_AMMAX_WU]=946274304,
    [OPC_AMMAX_DU]=946307072,
    [OPC_AMMIN_WU]=946339840,
    [OPC_AMMIN_DU]=946372608,
    [OPC_AMSWAP_DB_W]=946405376,
    [OPC_AMSWAP_DB_D]=946438144,
    [OPC_AMADD_DB_W]=946470912,
    [OPC_AMADD_DB_D]=946503680,
    [OPC_AMAND_DB_W]=946536448,
    [OPC_AMAND_DB_D]=946569216,
    [OPC_AMOR_DB_W]=946601984,
    [OPC_AMOR_DB_D]=946634752,
    [OPC_AMXOR_DB_W]=946667520,
    [OPC_AMXOR_DB_D]=946700288,
    [OPC_AMMAX_DB_W]=946733056,
    [OPC_AMMAX_DB_D]=946765824,
    [OPC_AMMIN_DB_W]=946798592,
    [OPC_AMMIN_DB_D]=946831360,
    [OPC_AMMAX_DB_WU]=946864128,
    [OPC_AMMAX_DB_DU]=946896896,
    [OPC_AMMIN_DB_WU]=946929664,
    [OPC_AMMIN_DB_DU]=946962432,
    [OPC_DBAR]=946995200,
    [OPC_IBAR]=947027968,
    [OPC_FLDGT_S]=947126272,
    [OPC_FLDGT_D]=947159040,
    [OPC_FLDLE_S]=947191808,
    [OPC_FLDLE_D]=947224576,
    [OPC_FSTGT_S]=947257344,
    [OPC_FSTGT_D]=947290112,
    [OPC_FSTLE_S]=947322880,
    [OPC_FSTLE_D]=947355648,
    [OPC_LDGT_B]=947388416,
    [OPC_LDGT_H]=947421184,
    [OPC_LDGT_W]=947453952,
    [OPC_LDGT_D]=947486720,
    [OPC_LDLE_B]=947519488,
    [OPC_LDLE_H]=947552256,
    [OPC_LDLE_W]=947585024,
    [OPC_LDLE_D]=947617792,
    [OPC_STGT_B]=947650560,
    [OPC_STGT_H]=947683328,
    [OPC_STGT_W]=947716096,
    [OPC_STGT_D]=947748864,
    [OPC_STLE_B]=947781632,
    [OPC_STLE_H]=947814400,
    [OPC_STLE_W]=947847168,
    [OPC_STLE_D]=947879936,
    [OPC_BEQZ]=1073741824,
    [OPC_BNEZ]=1140850688,
    [OPC_BCEQZ]=1207959552,
    [OPC_BCNEZ]=1207959808,
    [OPC_JISCR0]=1207960064,
    [OPC_JISCR1]=1207960320,
    [OPC_JIRL]=1275068416,
    [OPC_B]=1342177280,
    [OPC_BL]=1409286144,
    [OPC_BEQ]=1476395008,
    [OPC_BNE]=1543503872,
    [OPC_BLT]=1610612736,
    [OPC_BGE]=1677721600,
    [OPC_BLTU]=1744830464,
    [OPC_BGEU]=1811939328,
    [OPC_vseq_b]=1879048192,
    [OPC_vseq_h]=1879080960,
    [OPC_vseq_w]=1879113728,
    [OPC_vseq_d]=1879146496,
    [OPC_vsle_b]=1879179264,
    [OPC_vsle_h]=1879212032,
    [OPC_vsle_w]=1879244800,
    [OPC_vsle_d]=1879277568,
    [OPC_vsle_bu]=1879310336,
    [OPC_vsle_hu]=1879343104,
    [OPC_vsle_wu]=1879375872,
    [OPC_vsle_du]=1879408640,
    [OPC_vslt_b]=1879441408,
    [OPC_vslt_h]=1879474176,
    [OPC_vslt_w]=1879506944,
    [OPC_vslt_d]=1879539712,
    [OPC_vslt_bu]=1879572480,
    [OPC_vslt_hu]=1879605248,
    [OPC_vslt_wu]=1879638016,
    [OPC_vslt_du]=1879670784,
    [OPC_vadd_b]=1879703552,
    [OPC_vadd_h]=1879736320,
    [OPC_vadd_w]=1879769088,
    [OPC_vadd_d]=1879801856,
    [OPC_vsub_b]=1879834624,
    [OPC_vsub_h]=1879867392,
    [OPC_vsub_w]=1879900160,
    [OPC_vsub_d]=1879932928,
    [OPC_vaddwev_h_b]=1881014272,
    [OPC_vaddwev_w_h]=1881047040,
    [OPC_vaddwev_d_w]=1881079808,
    [OPC_vaddwev_q_d]=1881112576,
    [OPC_vsubwev_h_b]=1881145344,
    [OPC_vsubwev_w_h]=1881178112,
    [OPC_vsubwev_d_w]=1881210880,
    [OPC_vsubwev_q_d]=1881243648,
    [OPC_vaddwod_h_b]=1881276416,
    [OPC_vaddwod_w_h]=1881309184,
    [OPC_vaddwod_d_w]=1881341952,
    [OPC_vaddwod_q_d]=1881374720,
    [OPC_vsubwod_h_b]=1881407488,
    [OPC_vsubwod_w_h]=1881440256,
    [OPC_vsubwod_d_w]=1881473024,
    [OPC_vsubwod_q_d]=1881505792,
    [OPC_vaddwev_h_bu]=1882062848,
    [OPC_vaddwev_w_hu]=1882095616,
    [OPC_vaddwev_d_wu]=1882128384,
    [OPC_vaddwev_q_du]=1882161152,
    [OPC_vsubwev_h_bu]=1882193920,
    [OPC_vsubwev_w_hu]=1882226688,
    [OPC_vsubwev_d_wu]=1882259456,
    [OPC_vsubwev_q_du]=1882292224,
    [OPC_vaddwod_h_bu]=1882324992,
    [OPC_vaddwod_w_hu]=1882357760,
    [OPC_vaddwod_d_wu]=1882390528,
    [OPC_vaddwod_q_du]=1882423296,
    [OPC_vsubwod_h_bu]=1882456064,
    [OPC_vsubwod_w_hu]=1882488832,
    [OPC_vsubwod_d_wu]=1882521600,
    [OPC_vsubwod_q_du]=1882554368,
    [OPC_vaddwev_h_bu_b]=1883111424,
    [OPC_vaddwev_w_hu_h]=1883144192,
    [OPC_vaddwev_d_wu_w]=1883176960,
    [OPC_vaddwev_q_du_d]=1883209728,
    [OPC_vaddwod_h_bu_b]=1883242496,
    [OPC_vaddwod_w_hu_h]=1883275264,
    [OPC_vaddwod_d_wu_w]=1883308032,
    [OPC_vaddwod_q_du_d]=1883340800,
    [OPC_vsadd_b]=1883635712,
    [OPC_vsadd_h]=1883668480,
    [OPC_vsadd_w]=1883701248,
    [OPC_vsadd_d]=1883734016,
    [OPC_vssub_b]=1883766784,
    [OPC_vssub_h]=1883799552,
    [OPC_vssub_w]=1883832320,
    [OPC_vssub_d]=1883865088,
    [OPC_vsadd_bu]=1883897856,
    [OPC_vsadd_hu]=1883930624,
    [OPC_vsadd_wu]=1883963392,
    [OPC_vsadd_du]=1883996160,
    [OPC_vssub_bu]=1884028928,
    [OPC_vssub_hu]=1884061696,
    [OPC_vssub_wu]=1884094464,
    [OPC_vssub_du]=1884127232,
    [OPC_vhaddw_h_b]=1884553216,
    [OPC_vhaddw_w_h]=1884585984,
    [OPC_vhaddw_d_w]=1884618752,
    [OPC_vhaddw_q_d]=1884651520,
    [OPC_vhsubw_h_b]=1884684288,
    [OPC_vhsubw_w_h]=1884717056,
    [OPC_vhsubw_d_w]=1884749824,
    [OPC_vhsubw_q_d]=1884782592,
    [OPC_vhaddw_hu_bu]=1884815360,
    [OPC_vhaddw_wu_hu]=1884848128,
    [OPC_vhaddw_du_wu]=1884880896,
    [OPC_vhaddw_qu_du]=1884913664,
    [OPC_vhsubw_hu_bu]=1884946432,
    [OPC_vhsubw_wu_hu]=1884979200,
    [OPC_vhsubw_du_wu]=1885011968,
    [OPC_vhsubw_qu_du]=1885044736,
    [OPC_vadda_b]=1885077504,
    [OPC_vadda_h]=1885110272,
    [OPC_vadda_w]=1885143040,
    [OPC_vadda_d]=1885175808,
    [OPC_vabsd_b]=1885339648,
    [OPC_vabsd_h]=1885372416,
    [OPC_vabsd_w]=1885405184,
    [OPC_vabsd_d]=1885437952,
    [OPC_vabsd_bu]=1885470720,
    [OPC_vabsd_hu]=1885503488,
    [OPC_vabsd_wu]=1885536256,
    [OPC_vabsd_du]=1885569024,
    [OPC_vavg_b]=1885601792,
    [OPC_vavg_h]=1885634560,
    [OPC_vavg_w]=1885667328,
    [OPC_vavg_d]=1885700096,
    [OPC_vavg_bu]=1885732864,
    [OPC_vavg_hu]=1885765632,
    [OPC_vavg_wu]=1885798400,
    [OPC_vavg_du]=1885831168,
    [OPC_vavgr_b]=1885863936,
    [OPC_vavgr_h]=1885896704,
    [OPC_vavgr_w]=1885929472,
    [OPC_vavgr_d]=1885962240,
    [OPC_vavgr_bu]=1885995008,
    [OPC_vavgr_hu]=1886027776,
    [OPC_vavgr_wu]=1886060544,
    [OPC_vavgr_du]=1886093312,
    [OPC_vmax_b]=1886388224,
    [OPC_vmax_h]=1886420992,
    [OPC_vmax_w]=1886453760,
    [OPC_vmax_d]=1886486528,
    [OPC_vmin_b]=1886519296,
    [OPC_vmin_h]=1886552064,
    [OPC_vmin_w]=1886584832,
    [OPC_vmin_d]=1886617600,
    [OPC_vmax_bu]=1886650368,
    [OPC_vmax_hu]=1886683136,
    [OPC_vmax_wu]=1886715904,
    [OPC_vmax_du]=1886748672,
    [OPC_vmin_bu]=1886781440,
    [OPC_vmin_hu]=1886814208,
    [OPC_vmin_wu]=1886846976,
    [OPC_vmin_du]=1886879744,
    [OPC_vmul_b]=1887698944,
    [OPC_vmul_h]=1887731712,
    [OPC_vmul_w]=1887764480,
    [OPC_vmul_d]=1887797248,
    [OPC_vmuh_b]=1887830016,
    [OPC_vmuh_h]=1887862784,
    [OPC_vmuh_w]=1887895552,
    [OPC_vmuh_d]=1887928320,
    [OPC_vmuh_bu]=1887961088,
    [OPC_vmuh_hu]=1887993856,
    [OPC_vmuh_wu]=1888026624,
    [OPC_vmuh_du]=1888059392,
    [OPC_vmulwev_h_b]=1888485376,
    [OPC_vmulwev_w_h]=1888518144,
    [OPC_vmulwev_d_w]=1888550912,
    [OPC_vmulwev_q_d]=1888583680,
    [OPC_vmulwod_h_b]=1888616448,
    [OPC_vmulwod_w_h]=1888649216,
    [OPC_vmulwod_d_w]=1888681984,
    [OPC_vmulwod_q_d]=1888714752,
    [OPC_vmulwev_h_bu]=1889009664,
    [OPC_vmulwev_w_hu]=1889042432,
    [OPC_vmulwev_d_wu]=1889075200,
    [OPC_vmulwev_q_du]=1889107968,
    [OPC_vmulwod_h_bu]=1889140736,
    [OPC_vmulwod_w_hu]=1889173504,
    [OPC_vmulwod_d_wu]=1889206272,
    [OPC_vmulwod_q_du]=1889239040,
    [OPC_vmulwev_h_bu_b]=1889533952,
    [OPC_vmulwev_w_hu_h]=1889566720,
    [OPC_vmulwev_d_wu_w]=1889599488,
    [OPC_vmulwev_q_du_d]=1889632256,
    [OPC_vmulwod_h_bu_b]=1889665024,
    [OPC_vmulwod_w_hu_h]=1889697792,
    [OPC_vmulwod_d_wu_w]=1889730560,
    [OPC_vmulwod_q_du_d]=1889763328,
    [OPC_vmadd_b]=1890058240,
    [OPC_vmadd_h]=1890091008,
    [OPC_vmadd_w]=1890123776,
    [OPC_vmadd_d]=1890156544,
    [OPC_vmsub_b]=1890189312,
    [OPC_vmsub_h]=1890222080,
    [OPC_vmsub_w]=1890254848,
    [OPC_vmsub_d]=1890287616,
    [OPC_vmaddwev_h_b]=1890320384,
    [OPC_vmaddwev_w_h]=1890353152,
    [OPC_vmaddwev_d_w]=1890385920,
    [OPC_vmaddwev_q_d]=1890418688,
    [OPC_vmaddwod_h_b]=1890451456,
    [OPC_vmaddwod_w_h]=1890484224,
    [OPC_vmaddwod_d_w]=1890516992,
    [OPC_vmaddwod_q_d]=1890549760,
    [OPC_vmaddwev_h_bu]=1890844672,
    [OPC_vmaddwev_w_hu]=1890877440,
    [OPC_vmaddwev_d_wu]=1890910208,
    [OPC_vmaddwev_q_du]=1890942976,
    [OPC_vmaddwod_h_bu]=1890975744,
    [OPC_vmaddwod_w_hu]=1891008512,
    [OPC_vmaddwod_d_wu]=1891041280,
    [OPC_vmaddwod_q_du]=1891074048,
    [OPC_vmaddwev_h_bu_b]=1891368960,
    [OPC_vmaddwev_w_hu_h]=1891401728,
    [OPC_vmaddwev_d_wu_w]=1891434496,
    [OPC_vmaddwev_q_du_d]=1891467264,
    [OPC_vmaddwod_h_bu_b]=1891500032,
    [OPC_vmaddwod_w_hu_h]=1891532800,
    [OPC_vmaddwod_d_wu_w]=1891565568,
    [OPC_vmaddwod_q_du_d]=1891598336,
    [OPC_vdiv_b]=1893728256,
    [OPC_vdiv_h]=1893761024,
    [OPC_vdiv_w]=1893793792,
    [OPC_vdiv_d]=1893826560,
    [OPC_vmod_b]=1893859328,
    [OPC_vmod_h]=1893892096,
    [OPC_vmod_w]=1893924864,
    [OPC_vmod_d]=1893957632,
    [OPC_vdiv_bu]=1893990400,
    [OPC_vdiv_hu]=1894023168,
    [OPC_vdiv_wu]=1894055936,
    [OPC_vdiv_du]=1894088704,
    [OPC_vmod_bu]=1894121472,
    [OPC_vmod_hu]=1894154240,
    [OPC_vmod_wu]=1894187008,
    [OPC_vmod_du]=1894219776,
    [OPC_vsll_b]=1894252544,
    [OPC_vsll_h]=1894285312,
    [OPC_vsll_w]=1894318080,
    [OPC_vsll_d]=1894350848,
    [OPC_vsrl_b]=1894383616,
    [OPC_vsrl_h]=1894416384,
    [OPC_vsrl_w]=1894449152,
    [OPC_vsrl_d]=1894481920,
    [OPC_vsra_b]=1894514688,
    [OPC_vsra_h]=1894547456,
    [OPC_vsra_w]=1894580224,
    [OPC_vsra_d]=1894612992,
    [OPC_vrotr_b]=1894645760,
    [OPC_vrotr_h]=1894678528,
    [OPC_vrotr_w]=1894711296,
    [OPC_vrotr_d]=1894744064,
    [OPC_vsrlr_b]=1894776832,
    [OPC_vsrlr_h]=1894809600,
    [OPC_vsrlr_w]=1894842368,
    [OPC_vsrlr_d]=1894875136,
    [OPC_vsrar_b]=1894907904,
    [OPC_vsrar_h]=1894940672,
    [OPC_vsrar_w]=1894973440,
    [OPC_vsrar_d]=1895006208,
    [OPC_vsrln_b_h]=1895071744,
    [OPC_vsrln_h_w]=1895104512,
    [OPC_vsrln_w_d]=1895137280,
    [OPC_vsran_b_h]=1895202816,
    [OPC_vsran_h_w]=1895235584,
    [OPC_vsran_w_d]=1895268352,
    [OPC_vsrlrn_b_h]=1895333888,
    [OPC_vsrlrn_h_w]=1895366656,
    [OPC_vsrlrn_w_d]=1895399424,
    [OPC_vsrarn_b_h]=1895464960,
    [OPC_vsrarn_h_w]=1895497728,
    [OPC_vsrarn_w_d]=1895530496,
    [OPC_vssrln_b_h]=1895596032,
    [OPC_vssrln_h_w]=1895628800,
    [OPC_vssrln_w_d]=1895661568,
    [OPC_vssran_b_h]=1895727104,
    [OPC_vssran_h_w]=1895759872,
    [OPC_vssran_w_d]=1895792640,
    [OPC_vssrlrn_b_h]=1895858176,
    [OPC_vssrlrn_h_w]=1895890944,
    [OPC_vssrlrn_w_d]=1895923712,
    [OPC_vssrarn_b_h]=1895989248,
    [OPC_vssrarn_h_w]=1896022016,
    [OPC_vssrarn_w_d]=1896054784,
    [OPC_vssrln_bu_h]=1896120320,
    [OPC_vssrln_hu_w]=1896153088,
    [OPC_vssrln_wu_d]=1896185856,
    [OPC_vssran_bu_h]=1896251392,
    [OPC_vssran_hu_w]=1896284160,
    [OPC_vssran_wu_d]=1896316928,
    [OPC_vssrlrn_bu_h]=1896382464,
    [OPC_vssrlrn_hu_w]=1896415232,
    [OPC_vssrlrn_wu_d]=1896448000,
    [OPC_vssrarn_bu_h]=1896513536,
    [OPC_vssrarn_hu_w]=1896546304,
    [OPC_vssrarn_wu_d]=1896579072,
    [OPC_vbitclr_b]=1896611840,
    [OPC_vbitclr_h]=1896644608,
    [OPC_vbitclr_w]=1896677376,
    [OPC_vbitclr_d]=1896710144,
    [OPC_vbitset_b]=1896742912,
    [OPC_vbitset_h]=1896775680,
    [OPC_vbitset_w]=1896808448,
    [OPC_vbitset_d]=1896841216,
    [OPC_vbitrev_b]=1896873984,
    [OPC_vbitrev_h]=1896906752,
    [OPC_vbitrev_w]=1896939520,
    [OPC_vbitrev_d]=1896972288,
    [OPC_vpackev_b]=1897267200,
    [OPC_vpackev_h]=1897299968,
    [OPC_vpackev_w]=1897332736,
    [OPC_vpackev_d]=1897365504,
    [OPC_vpackod_b]=1897398272,
    [OPC_vpackod_h]=1897431040,
    [OPC_vpackod_w]=1897463808,
    [OPC_vpackod_d]=1897496576,
    [OPC_vilvl_b]=1897529344,
    [OPC_vilvl_h]=1897562112,
    [OPC_vilvl_w]=1897594880,
    [OPC_vilvl_d]=1897627648,
    [OPC_vilvh_b]=1897660416,
    [OPC_vilvh_h]=1897693184,
    [OPC_vilvh_w]=1897725952,
    [OPC_vilvh_d]=1897758720,
    [OPC_vpickev_b]=1897791488,
    [OPC_vpickev_h]=1897824256,
    [OPC_vpickev_w]=1897857024,
    [OPC_vpickev_d]=1897889792,
    [OPC_vpickod_b]=1897922560,
    [OPC_vpickod_h]=1897955328,
    [OPC_vpickod_w]=1897988096,
    [OPC_vpickod_d]=1898020864,
    [OPC_vreplve_b]=1898053632,
    [OPC_vreplve_h]=1898086400,
    [OPC_vreplve_w]=1898119168,
    [OPC_vreplve_d]=1898151936,
    [OPC_vand_v]=1898315776,
    [OPC_vor_v]=1898348544,
    [OPC_vxor_v]=1898381312,
    [OPC_vnor_v]=1898414080,
    [OPC_vandn_v]=1898446848,
    [OPC_vorn_v]=1898479616,
    [OPC_vfrstp_b]=1898643456,
    [OPC_vfrstp_h]=1898676224,
    [OPC_vadd_q]=1898774528,
    [OPC_vsub_q]=1898807296,
    [OPC_vsigncov_b]=1898840064,
    [OPC_vsigncov_h]=1898872832,
    [OPC_vsigncov_w]=1898905600,
    [OPC_vsigncov_d]=1898938368,
    [OPC_vfadd_s]=1899003904,
    [OPC_vfadd_d]=1899036672,
    [OPC_vfsub_s]=1899134976,
    [OPC_vfsub_d]=1899167744,
    [OPC_vfmul_s]=1899528192,
    [OPC_vfmul_d]=1899560960,
    [OPC_vfdiv_s]=1899659264,
    [OPC_vfdiv_d]=1899692032,
    [OPC_vfmax_s]=1899790336,
    [OPC_vfmax_d]=1899823104,
    [OPC_vfmin_s]=1899921408,
    [OPC_vfmin_d]=1899954176,
    [OPC_vfmaxa_s]=1900052480,
    [OPC_vfmaxa_d]=1900085248,
    [OPC_vfmina_s]=1900183552,
    [OPC_vfmina_d]=1900216320,
    [OPC_vfcvt_h_s]=1900412928,
    [OPC_vfcvt_s_d]=1900445696,
    [OPC_vffint_s_l]=1900544000,
    [OPC_vftint_w_d]=1900642304,
    [OPC_vftintrm_w_d]=1900675072,
    [OPC_vftintrp_w_d]=1900707840,
    [OPC_vftintrz_w_d]=1900740608,
    [OPC_vftintrne_w_d]=1900773376,
    [OPC_vshuf_h]=1903853568,
    [OPC_vshuf_w]=1903886336,
    [OPC_vshuf_d]=1903919104,
    [OPC_vseqi_b]=1920991232,
    [OPC_vseqi_h]=1921024000,
    [OPC_vseqi_w]=1921056768,
    [OPC_vseqi_d]=1921089536,
    [OPC_vslei_b]=1921122304,
    [OPC_vslei_h]=1921155072,
    [OPC_vslei_w]=1921187840,
    [OPC_vslei_d]=1921220608,
    [OPC_vslei_bu]=1921253376,
    [OPC_vslei_hu]=1921286144,
    [OPC_vslei_wu]=1921318912,
    [OPC_vslei_du]=1921351680,
    [OPC_vslti_b]=1921384448,
    [OPC_vslti_h]=1921417216,
    [OPC_vslti_w]=1921449984,
    [OPC_vslti_d]=1921482752,
    [OPC_vslti_bu]=1921515520,
    [OPC_vslti_hu]=1921548288,
    [OPC_vslti_wu]=1921581056,
    [OPC_vslti_du]=1921613824,
    [OPC_vaddi_bu]=1921646592,
    [OPC_vaddi_hu]=1921679360,
    [OPC_vaddi_wu]=1921712128,
    [OPC_vaddi_du]=1921744896,
    [OPC_vsubi_bu]=1921777664,
    [OPC_vsubi_hu]=1921810432,
    [OPC_vsubi_wu]=1921843200,
    [OPC_vsubi_du]=1921875968,
    [OPC_vbsll_v]=1921908736,
    [OPC_vbsrl_v]=1921941504,
    [OPC_vmaxi_b]=1922039808,
    [OPC_vmaxi_h]=1922072576,
    [OPC_vmaxi_w]=1922105344,
    [OPC_vmaxi_d]=1922138112,
    [OPC_vmini_b]=1922170880,
    [OPC_vmini_h]=1922203648,
    [OPC_vmini_w]=1922236416,
    [OPC_vmini_d]=1922269184,
    [OPC_vmaxi_bu]=1922301952,
    [OPC_vmaxi_hu]=1922334720,
    [OPC_vmaxi_wu]=1922367488,
    [OPC_vmaxi_du]=1922400256,
    [OPC_vmini_bu]=1922433024,
    [OPC_vmini_hu]=1922465792,
    [OPC_vmini_wu]=1922498560,
    [OPC_vmini_du]=1922531328,
    [OPC_vfrstpi_b]=1922695168,
    [OPC_vfrstpi_h]=1922727936,
    [OPC_vclo_b]=1922826240,
    [OPC_vclo_h]=1922827264,
    [OPC_vclo_w]=1922828288,
    [OPC_vclo_d]=1922829312,
    [OPC_vclz_b]=1922830336,
    [OPC_vclz_h]=1922831360,
    [OPC_vclz_w]=1922832384,
    [OPC_vclz_d]=1922833408,
    [OPC_vpcnt_b]=1922834432,
    [OPC_vpcnt_h]=1922835456,
    [OPC_vpcnt_w]=1922836480,
    [OPC_vpcnt_d]=1922837504,
    [OPC_vneg_b]=1922838528,
    [OPC_vneg_h]=1922839552,
    [OPC_vneg_w]=1922840576,
    [OPC_vneg_d]=1922841600,
    [OPC_vmskltz_b]=1922842624,
    [OPC_vmskltz_h]=1922843648,
    [OPC_vmskltz_w]=1922844672,
    [OPC_vmskltz_d]=1922845696,
    [OPC_vmskgez_b]=1922846720,
    [OPC_vmsknz_b]=1922850816,
    [OPC_vseteqz_v]=1922865152,
    [OPC_vsetnez_v]=1922866176,
    [OPC_vsetanyeqz_b]=1922867200,
    [OPC_vsetanyeqz_h]=1922868224,
    [OPC_vsetanyeqz_w]=1922869248,
    [OPC_vsetanyeqz_d]=1922870272,
    [OPC_vsetallnez_b]=1922871296,
    [OPC_vsetallnez_h]=1922872320,
    [OPC_vsetallnez_w]=1922873344,
    [OPC_vsetallnez_d]=1922874368,
    [OPC_vflogb_s]=1922876416,
    [OPC_vflogb_d]=1922877440,
    [OPC_vfclass_s]=1922880512,
    [OPC_vfclass_d]=1922881536,
    [OPC_vfsqrt_s]=1922884608,
    [OPC_vfsqrt_d]=1922885632,
    [OPC_vfrecip_s]=1922888704,
    [OPC_vfrecip_d]=1922889728,
    [OPC_vfrsqrt_s]=1922892800,
    [OPC_vfrsqrt_d]=1922893824,
    [OPC_vfrint_s]=1922905088,
    [OPC_vfrint_d]=1922906112,
    [OPC_vfrintrm_s]=1922909184,
    [OPC_vfrintrm_d]=1922910208,
    [OPC_vfrintrp_s]=1922913280,
    [OPC_vfrintrp_d]=1922914304,
    [OPC_vfrintrz_s]=1922917376,
    [OPC_vfrintrz_d]=1922918400,
    [OPC_vfrintrne_s]=1922921472,
    [OPC_vfrintrne_d]=1922922496,
    [OPC_vfcvtl_s_h]=1922951168,
    [OPC_vfcvth_s_h]=1922952192,
    [OPC_vfcvtl_d_s]=1922953216,
    [OPC_vfcvth_d_s]=1922954240,
    [OPC_vffint_s_w]=1922957312,
    [OPC_vffint_s_wu]=1922958336,
    [OPC_vffint_d_l]=1922959360,
    [OPC_vffint_d_lu]=1922960384,
    [OPC_vffintl_d_w]=1922961408,
    [OPC_vffinth_d_w]=1922962432,
    [OPC_vftint_w_s]=1922969600,
    [OPC_vftint_l_d]=1922970624,
    [OPC_vftintrm_w_s]=1922971648,
    [OPC_vftintrm_l_d]=1922972672,
    [OPC_vftintrp_w_s]=1922973696,
    [OPC_vftintrp_l_d]=1922974720,
    [OPC_vftintrz_w_s]=1922975744,
    [OPC_vftintrz_l_d]=1922976768,
    [OPC_vftintrne_w_s]=1922977792,
    [OPC_vftintrne_l_d]=1922978816,
    [OPC_vftint_wu_s]=1922979840,
    [OPC_vftint_lu_d]=1922980864,
    [OPC_vftintrz_wu_s]=1922985984,
    [OPC_vftintrz_lu_d]=1922987008,
    [OPC_vftintl_l_s]=1922990080,
    [OPC_vftinth_l_s]=1922991104,
    [OPC_vftintrml_l_s]=1922992128,
    [OPC_vftintrmh_l_s]=1922993152,
    [OPC_vftintrpl_l_s]=1922994176,
    [OPC_vftintrph_l_s]=1922995200,
    [OPC_vftintrzl_l_s]=1922996224,
    [OPC_vftintrzh_l_s]=1922997248,
    [OPC_vftintrnel_l_s]=1922998272,
    [OPC_vftintrneh_l_s]=1922999296,
    [OPC_vexth_h_b]=1923014656,
    [OPC_vexth_w_h]=1923015680,
    [OPC_vexth_d_w]=1923016704,
    [OPC_vexth_q_d]=1923017728,
    [OPC_vexth_hu_bu]=1923018752,
    [OPC_vexth_wu_hu]=1923019776,
    [OPC_vexth_du_wu]=1923020800,
    [OPC_vexth_qu_du]=1923021824,
    [OPC_vreplgr2vr_b]=1923022848,
    [OPC_vreplgr2vr_h]=1923023872,
    [OPC_vreplgr2vr_w]=1923024896,
    [OPC_vreplgr2vr_d]=1923025920,
    [OPC_vrotri_b]=1923096576,
    [OPC_vrotri_h]=1923104768,
    [OPC_vrotri_w]=1923121152,
    [OPC_vrotri_d]=1923153920,
    [OPC_vsrlri_b]=1923358720,
    [OPC_vsrlri_h]=1923366912,
    [OPC_vsrlri_w]=1923383296,
    [OPC_vsrlri_d]=1923416064,
    [OPC_vsrari_b]=1923620864,
    [OPC_vsrari_h]=1923629056,
    [OPC_vsrari_w]=1923645440,
    [OPC_vsrari_d]=1923678208,
    [OPC_vinsgr2vr_b]=1928036352,
    [OPC_vinsgr2vr_h]=1928052736,
    [OPC_vinsgr2vr_w]=1928060928,
    [OPC_vinsgr2vr_d]=1928065024,
    [OPC_vpickve2gr_b]=1928298496,
    [OPC_vpickve2gr_h]=1928314880,
    [OPC_vpickve2gr_w]=1928323072,
    [OPC_vpickve2gr_d]=1928327168,
    [OPC_vpickve2gr_bu]=1928560640,
    [OPC_vpickve2gr_hu]=1928577024,
    [OPC_vpickve2gr_wu]=1928585216,
    [OPC_vpickve2gr_du]=1928589312,
    [OPC_vreplvei_b]=1928822784,
    [OPC_vreplvei_h]=1928839168,
    [OPC_vreplvei_w]=1928847360,
    [OPC_vreplvei_d]=1928851456,
    [OPC_vsllwil_h_b]=1929912320,
    [OPC_vsllwil_w_h]=1929920512,
    [OPC_vsllwil_d_w]=1929936896,
    [OPC_vextl_q_d]=1929969664,
    [OPC_vsllwil_hu_bu]=1930174464,
    [OPC_vsllwil_wu_hu]=1930182656,
    [OPC_vsllwil_du_wu]=1930199040,
    [OPC_vextl_qu_du]=1930231808,
    [OPC_vbitclri_b]=1930436608,
    [OPC_vbitclri_h]=1930444800,
    [OPC_vbitclri_w]=1930461184,
    [OPC_vbitclri_d]=1930493952,
    [OPC_vbitseti_b]=1930698752,
    [OPC_vbitseti_h]=1930706944,
    [OPC_vbitseti_w]=1930723328,
    [OPC_vbitseti_d]=1930756096,
    [OPC_vbitrevi_b]=1930960896,
    [OPC_vbitrevi_h]=1930969088,
    [OPC_vbitrevi_w]=1930985472,
    [OPC_vbitrevi_d]=1931018240,
    [OPC_vsat_b]=1931747328,
    [OPC_vsat_h]=1931755520,
    [OPC_vsat_w]=1931771904,
    [OPC_vsat_d]=1931804672,
    [OPC_vsat_bu]=1932009472,
    [OPC_vsat_hu]=1932017664,
    [OPC_vsat_wu]=1932034048,
    [OPC_vsat_du]=1932066816,
    [OPC_vslli_b]=1932271616,
    [OPC_vslli_h]=1932279808,
    [OPC_vslli_w]=1932296192,
    [OPC_vslli_d]=1932328960,
    [OPC_vsrli_b]=1932533760,
    [OPC_vsrli_h]=1932541952,
    [OPC_vsrli_w]=1932558336,
    [OPC_vsrli_d]=1932591104,
    [OPC_vsrai_b]=1932795904,
    [OPC_vsrai_h]=1932804096,
    [OPC_vsrai_w]=1932820480,
    [OPC_vsrai_d]=1932853248,
    [OPC_vsrlni_b_h]=1933590528,
    [OPC_vsrlni_h_w]=1933606912,
    [OPC_vsrlni_w_d]=1933639680,
    [OPC_vsrlni_d_q]=1933705216,
    [OPC_vsrlrni_b_h]=1933852672,
    [OPC_vsrlrni_h_w]=1933869056,
    [OPC_vsrlrni_w_d]=1933901824,
    [OPC_vsrlrni_d_q]=1933967360,
    [OPC_vssrlni_b_h]=1934114816,
    [OPC_vssrlni_h_w]=1934131200,
    [OPC_vssrlni_w_d]=1934163968,
    [OPC_vssrlni_d_q]=1934229504,
    [OPC_vssrlni_bu_h]=1934376960,
    [OPC_vssrlni_hu_w]=1934393344,
    [OPC_vssrlni_wu_d]=1934426112,
    [OPC_vssrlni_du_q]=1934491648,
    [OPC_vssrlrni_b_h]=1934639104,
    [OPC_vssrlrni_h_w]=1934655488,
    [OPC_vssrlrni_w_d]=1934688256,
    [OPC_vssrlrni_d_q]=1934753792,
    [OPC_vssrlrni_bu_h]=1934901248,
    [OPC_vssrlrni_hu_w]=1934917632,
    [OPC_vssrlrni_wu_d]=1934950400,
    [OPC_vssrlrni_du_q]=1935015936,
    [OPC_vsrani_b_h]=1935163392,
    [OPC_vsrani_h_w]=1935179776,
    [OPC_vsrani_w_d]=1935212544,
    [OPC_vsrani_d_q]=1935278080,
    [OPC_vsrarni_b_h]=1935425536,
    [OPC_vsrarni_h_w]=1935441920,
    [OPC_vsrarni_w_d]=1935474688,
    [OPC_vsrarni_d_q]=1935540224,
    [OPC_vssrani_b_h]=1935687680,
    [OPC_vssrani_h_w]=1935704064,
    [OPC_vssrani_w_d]=1935736832,
    [OPC_vssrani_d_q]=1935802368,
    [OPC_vssrani_bu_h]=1935949824,
    [OPC_vssrani_hu_w]=1935966208,
    [OPC_vssrani_wu_d]=1935998976,
    [OPC_vssrani_du_q]=1936064512,
    [OPC_vssrarni_b_h]=1936211968,
    [OPC_vssrarni_h_w]=1936228352,
    [OPC_vssrarni_w_d]=1936261120,
    [OPC_vssrarni_d_q]=1936326656,
    [OPC_vssrarni_bu_h]=1936474112,
    [OPC_vssrarni_hu_w]=1936490496,
    [OPC_vssrarni_wu_d]=1936523264,
    [OPC_vssrarni_du_q]=1936588800,
    [OPC_vextrins_d]=1937768448,
    [OPC_vextrins_w]=1938030592,
    [OPC_vextrins_h]=1938292736,
    [OPC_vextrins_b]=1938554880,
    [OPC_vshuf4i_b]=1938817024,
    [OPC_vshuf4i_h]=1939079168,
    [OPC_vshuf4i_w]=1939341312,
    [OPC_vshuf4i_d]=1939603456,
    [OPC_vbitseli_b]=1942224896,
    [OPC_vandi_b]=1943011328,
    [OPC_vori_b]=1943273472,
    [OPC_vxori_b]=1943535616,
    [OPC_vnori_b]=1943797760,
    [OPC_vldi]=1944059904,
    [OPC_vpermi_w]=1944322048,
};

    uint32_t encode(LoongArchInsInfo* info)
    {
        if(info->opc == OPC_INVALID)
                return 0;
        uint32_t insn = opc2bin[info->opc];
        uint format = insn2format[info->opc];
        encodefuncs[format](info, &insn);
        return insn;
    }

    static inline uint32_t extract32(uint32_t value, int start, int length)
    {
    	assert(start >= 0 && length > 0 && length <= 32 - start);
    	return (value >> start) & (~0U >> (32 - length));
    }

    static inline int32_t sextract32(uint32_t value, int start, int length)
    {
    	assert(start >= 0 && length > 0 && length <= 32 - start);
    	return ((int32_t)(value << (32 - length - start))) >> (32 - length);
    }

    static inline uint32_t deposit32(uint32_t value, int start, int length,
                                 uint32_t fieldval)
    {
    	uint32_t mask;
    	assert(start >= 0 && length > 0 && length <= 32 - start);
    	mask = (~0U >> (32 - length)) << start;
    	return (value & ~mask) | ((fieldval << start) & mask);
    }

static inline void encode32(uint32_t* pinsn, uint32_t field, u_int8_t start, u_int8_t len)
{
    assert(start < 32 && len < 32 && start+len <= 32);
    uint32_t mask = (1<<len)-1;
    /*
    if((field & mask) != field)
    {
        std::cerr<<"warning: "<<field <<" can't fit into "<<len<<" bit \n";
        exit(1);
    }
    */
    field &= mask;
    field <<= start;
    *pinsn |= field;
    return;
}

static inline void encode32_muti_field(uint32_t* pinsn, uint32_t field, u_int8_t* start_and_len, u_int8_t size)
{
    u_int8_t total_len = 0;
    for(int i=1;i<size;i+=2)
            total_len += start_and_len[i];

    uint32_t mask = (1<<total_len)-1;

    /*
    if((field & mask) != field)
    {
        std::cerr<<"warning: in encode32_muti_field "<<field <<" can't fit into "<<total_len<<" bit \n";
        exit(1);
    }
    */

    //may be a problem 
    for(int i=0; i<size; i+=2)
    {
        mask = (1<<start_and_len[i+1])-1;
        uint32_t field_term = field & mask;
        encode32(pinsn, field_term, start_and_len[i], start_and_len[i+1]);
        field >>= start_and_len[i+1];
    }
}
    
    static void decode_extract_format_0(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_1(LoongArchInsInfo *info, uint32_t insn)
{
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[0] = extract32(insn, 5, 5); //rj
    info->srcs_regs[1]  = extract32(insn, 10, 5);//rk
    info->opnds[1] = extract32(insn, 10, 5); //rk
    info->nb_opnds = 2;
    info->num_srcs = 2;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_10(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_freg = extract32(insn, 0, 5); //fd
    info->opnds[0] = extract32(insn, 0, 5); //fd
    info->srcs_fregs[0]  = extract32(insn, 5, 5);//fj
    info->opnds[1] = extract32(insn, 5, 5); //fj
    info->srcs_fregs[1]  = extract32(insn, 10, 5);//fk
    info->opnds[2] = extract32(insn, 10, 5); //fk
    info->nb_opnds = 3;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 2;
}

static void decode_extract_format_11(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_freg = extract32(insn, 0, 5); //fd
    info->opnds[0] = extract32(insn, 0, 5); //fd
    info->srcs_fregs[0]  = extract32(insn, 5, 5);//fj
    info->opnds[1] = extract32(insn, 5, 5); //fj
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 1;
}

static void decode_extract_format_12(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_freg = extract32(insn, 0, 5); //fd
    info->opnds[0] = extract32(insn, 0, 5); //fd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_13(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_fregs[0]  = extract32(insn, 5, 5);//fj
    info->opnds[1] = extract32(insn, 5, 5); //fj
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 1;
}

static void decode_extract_format_14(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_fcsr = extract32(insn, 0, 5); //fcsr
    info->opnds[0] = extract32(insn, 0, 5); //fcsr
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_15(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_fcsrregs[0]  = extract32(insn, 5, 5);//fcsr_1
    info->opnds[1] = extract32(insn, 5, 5); //fcsr_1
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 1;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_16(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_cfreg = extract32(insn, 0, 3); //cd
    info->opnds[0] = extract32(insn, 0, 3); //cd
    info->srcs_fregs[0]  = extract32(insn, 5, 5);//fj
    info->opnds[1] = extract32(insn, 5, 5); //fj
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 1;
}

static void decode_extract_format_17(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_freg = extract32(insn, 0, 5); //fd
    info->opnds[0] = extract32(insn, 0, 5); //fd
    info->srcs_cfregs[0]  = extract32(insn, 5, 3);//cj
    info->opnds[1] = extract32(insn, 5, 3); //cj
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 1;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_18(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_cfreg = extract32(insn, 0, 3); //cd
    info->opnds[0] = extract32(insn, 0, 3); //cd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_19(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_cfregs[0]  = extract32(insn, 5, 3);//cj
    info->opnds[1] = extract32(insn, 5, 3); //cj
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 1;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_2(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->srcs_regs[1]  = extract32(insn, 10, 5);//rk
    info->opnds[2] = extract32(insn, 10, 5); //rk
    info->sa = extract32(insn, 15, 2); //sa2
    info->opnds[3] = extract32(insn, 15, 2); //sa2
    info->nb_opnds = 4;
    info->num_srcs = 2;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_20(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->si = sextract32(insn, 10, 12); //si12
    info->opnds[2] = sextract32(insn, 10, 12); //si12
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_21(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->ui = extract32(insn, 10, 12); //ui12
    info->opnds[2] = extract32(insn, 10, 12); //ui12
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_22(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->csr = extract32(insn, 10, 14); //csr
    info->opnds[1] = extract32(insn, 10, 14); //csr
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_23(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->csr = extract32(insn, 10, 14); //csr
    info->opnds[2] = extract32(insn, 10, 14); //csr
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_24(LoongArchInsInfo *info, uint32_t insn)
{
    info->code_2 = extract32(insn, 0, 5); //code_2
    info->opnds[0] = extract32(insn, 0, 5); //code_2
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->si = sextract32(insn, 10, 12); //si12
    info->opnds[2] = sextract32(insn, 10, 12); //si12
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_25(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->level = extract32(insn, 10, 8); //level
    info->opnds[2] = extract32(insn, 10, 8); //level
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_26(LoongArchInsInfo *info, uint32_t insn)
{
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[0] = extract32(insn, 5, 5); //rj
    info->seq = extract32(insn, 10, 8); //seq
    info->opnds[1] = extract32(insn, 10, 8); //seq
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_27(LoongArchInsInfo *info, uint32_t insn)
{
    info->nb_opnds = 0;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_28(LoongArchInsInfo *info, uint32_t insn)
{
    info->level_3 = extract32(insn, 0, 15); //level_3
    info->opnds[0] = extract32(insn, 0, 15); //level_3
    info->nb_opnds = 1;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_29(LoongArchInsInfo *info, uint32_t insn)
{
    info->op = extract32(insn, 0, 5); //op
    info->opnds[0] = extract32(insn, 0, 5); //op
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->srcs_regs[1]  = extract32(insn, 10, 5);//rk
    info->opnds[2] = extract32(insn, 10, 5); //rk
    info->nb_opnds = 3;
    info->num_srcs = 2;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_3(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->srcs_regs[1]  = extract32(insn, 10, 5);//rk
    info->opnds[2] = extract32(insn, 10, 5); //rk
    info->sa = extract32(insn, 15, 3); //sa3
    info->opnds[3] = extract32(insn, 15, 3); //sa3
    info->nb_opnds = 4;
    info->num_srcs = 2;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_30(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_freg = extract32(insn, 0, 5); //fd
    info->opnds[0] = extract32(insn, 0, 5); //fd
    info->srcs_fregs[0]  = extract32(insn, 5, 5);//fj
    info->opnds[1] = extract32(insn, 5, 5); //fj
    info->srcs_fregs[1]  = extract32(insn, 10, 5);//fk
    info->opnds[2] = extract32(insn, 10, 5); //fk
    info->srcs_fregs[2]  = extract32(insn, 15, 5);//fa
    info->opnds[3] = extract32(insn, 15, 5); //fa
    info->nb_opnds = 4;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 3;
}

static void decode_extract_format_31(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_cfreg = extract32(insn, 0, 3); //cd
    info->opnds[0] = extract32(insn, 0, 3); //cd
    info->srcs_fregs[0]  = extract32(insn, 5, 5);//fj
    info->opnds[1] = extract32(insn, 5, 5); //fj
    info->srcs_fregs[1]  = extract32(insn, 10, 5);//fk
    info->opnds[2] = extract32(insn, 10, 5); //fk
    info->nb_opnds = 3;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 2;
}

static void decode_extract_format_32(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_freg = extract32(insn, 0, 5); //fd
    info->opnds[0] = extract32(insn, 0, 5); //fd
    info->srcs_fregs[0]  = extract32(insn, 5, 5);//fj
    info->opnds[1] = extract32(insn, 5, 5); //fj
    info->srcs_fregs[1]  = extract32(insn, 10, 5);//fk
    info->opnds[2] = extract32(insn, 10, 5); //fk
    info->srcs_cfregs[0]  = extract32(insn, 15, 3);//ca
    info->opnds[3] = extract32(insn, 15, 3); //ca
    info->nb_opnds = 4;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 1;
    info->num_sccrach = 0;
    info->num_fsrcs = 2;
}

static void decode_extract_format_33(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->si = sextract32(insn, 10, 16); //si16
    info->opnds[2] = sextract32(insn, 10, 16); //si16
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_34(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->si = sextract32(insn, 5, 20); //si20
    info->opnds[1] = sextract32(insn, 5, 20); //si20
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_35(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->si = sextract32(insn, 10, 14); //si14
    info->opnds[2] = sextract32(insn, 10, 14); //si14
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_36(LoongArchInsInfo *info, uint32_t insn)
{
    info->hint = extract32(insn, 0, 5); //hint
    info->opnds[0] = extract32(insn, 0, 5); //hint
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->si = sextract32(insn, 10, 12); //si12
    info->opnds[2] = sextract32(insn, 10, 12); //si12
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_37(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_freg = extract32(insn, 0, 5); //fd
    info->opnds[0] = extract32(insn, 0, 5); //fd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->si = sextract32(insn, 10, 12); //si12
    info->opnds[2] = sextract32(insn, 10, 12); //si12
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_38(LoongArchInsInfo *info, uint32_t insn)
{
    info->hint = extract32(insn, 0, 5); //hint
    info->opnds[0] = extract32(insn, 0, 5); //hint
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->srcs_regs[1]  = extract32(insn, 10, 5);//rk
    info->opnds[2] = extract32(insn, 10, 5); //rk
    info->nb_opnds = 3;
    info->num_srcs = 2;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_39(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_freg = extract32(insn, 0, 5); //fd
    info->opnds[0] = extract32(insn, 0, 5); //fd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->srcs_regs[1]  = extract32(insn, 10, 5);//rk
    info->opnds[2] = extract32(insn, 10, 5); //rk
    info->nb_opnds = 3;
    info->num_srcs = 2;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_4(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->srcs_regs[1]  = extract32(insn, 10, 5);//rk
    info->opnds[2] = extract32(insn, 10, 5); //rk
    info->nb_opnds = 3;
    info->num_srcs = 2;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_40(LoongArchInsInfo *info, uint32_t insn)
{
    info->hint = extract32(insn, 0, 15); //hint_4
    info->opnds[0] = extract32(insn, 0, 15); //hint_4
    info->nb_opnds = 1;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_41(LoongArchInsInfo *info, uint32_t insn)
{
    info->hint = extract32(insn, 0, 15); //hint_5
    info->opnds[0] = extract32(insn, 0, 15); //hint_5
    info->nb_opnds = 1;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_42(LoongArchInsInfo *info, uint32_t insn)
{
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[0] = extract32(insn, 5, 5); //rj
    info->offs = deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 5)); //offs2
    info->opnds[1] = deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 5)); //offs2
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_43(LoongArchInsInfo *info, uint32_t insn)
{
    info->srcs_cfregs[0]  = extract32(insn, 5, 3);//cj
    info->opnds[0] = extract32(insn, 5, 3); //cj
    info->offs = deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 5)); //offs2
    info->opnds[1] = deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 5)); //offs2
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 1;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_44(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->offs = sextract32(insn, 10, 16); //offs1
    info->opnds[2] = sextract32(insn, 10, 16); //offs1
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_45(LoongArchInsInfo *info, uint32_t insn)
{
    info->offs = deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 10)); //offs3
    info->opnds[0] = deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 10)); //offs3
    info->nb_opnds = 1;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_46(LoongArchInsInfo *info, uint32_t insn)
{
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[0] = extract32(insn, 5, 5); //rj
    info->dst_sccrach = extract32(insn, 0, 2); //sd
    info->opnds[1] = extract32(insn, 0, 2); //sd
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_47(LoongArchInsInfo *info, uint32_t insn)
{
    info->sccrach_regs[0]  = extract32(insn, 5, 2);//sj
    info->opnds[0] = extract32(insn, 5, 2); //sj
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[1] = extract32(insn, 0, 5); //rd
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 1;
    info->num_fsrcs = 0;
}

static void decode_extract_format_48(LoongArchInsInfo *info, uint32_t insn)
{
    info->ptr = extract32(insn, 5, 3); //ptr
    info->opnds[0] = extract32(insn, 5, 3); //ptr
    info->nb_opnds = 1;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_49(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->nb_opnds = 1;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_5(LoongArchInsInfo *info, uint32_t insn)
{
    info->code = extract32(insn, 0, 15); //code
    info->opnds[0] = extract32(insn, 0, 15); //code
    info->nb_opnds = 1;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_50(LoongArchInsInfo *info, uint32_t insn)
{
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[0] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 1;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_51(LoongArchInsInfo *info, uint32_t insn)
{
    info->si = sextract32(insn, 10, 5); //si5
    info->opnds[0] = sextract32(insn, 10, 5); //si5
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[2] = extract32(insn, 0, 5); //rd
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_52(LoongArchInsInfo *info, uint32_t insn)
{
    info->cond = extract32(insn, 10, 4); //cond_1
    info->opnds[0] = extract32(insn, 10, 4); //cond_1
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[2] = extract32(insn, 0, 5); //rd
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_53(LoongArchInsInfo *info, uint32_t insn)
{
    info->cond = extract32(insn, 10, 4); //cond_1
    info->opnds[0] = extract32(insn, 10, 4); //cond_1
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[1] = extract32(insn, 0, 5); //rd
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_54(LoongArchInsInfo *info, uint32_t insn)
{
    info->srcs_regs[0]  = extract32(insn, 10, 5);//rk
    info->opnds[0] = extract32(insn, 10, 5); //rk
    info->srcs_regs[1]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->cond = extract32(insn, 0, 4); //cond_2
    info->opnds[2] = extract32(insn, 0, 4); //cond_2
    info->nb_opnds = 3;
    info->num_srcs = 2;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_55(LoongArchInsInfo *info, uint32_t insn)
{
    info->cond = extract32(insn, 10, 4); //cond_1
    info->opnds[0] = extract32(insn, 10, 4); //cond_1
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_56(LoongArchInsInfo *info, uint32_t insn)
{
    info->ui = extract32(insn, 10, 3); //ui3
    info->opnds[0] = extract32(insn, 10, 3); //ui3
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[2] = extract32(insn, 0, 5); //rd
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_57(LoongArchInsInfo *info, uint32_t insn)
{
    info->ui = extract32(insn, 10, 4); //ui4
    info->opnds[0] = extract32(insn, 10, 4); //ui4
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[2] = extract32(insn, 0, 5); //rd
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_58(LoongArchInsInfo *info, uint32_t insn)
{
    info->ui = extract32(insn, 10, 3); //ui3
    info->opnds[0] = extract32(insn, 10, 3); //ui3
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_59(LoongArchInsInfo *info, uint32_t insn)
{
    info->ui = extract32(insn, 10, 4); //ui4
    info->opnds[0] = extract32(insn, 10, 4); //ui4
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_6(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->ui = extract32(insn, 10, 5); //ui5
    info->opnds[2] = extract32(insn, 10, 5); //ui5
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_60(LoongArchInsInfo *info, uint32_t insn)
{
    info->ui = extract32(insn, 10, 5); //ui5
    info->opnds[0] = extract32(insn, 10, 5); //ui5
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_61(LoongArchInsInfo *info, uint32_t insn)
{
    info->ui = extract32(insn, 10, 6); //ui6
    info->opnds[0] = extract32(insn, 10, 6); //ui6
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->nb_opnds = 2;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_62(LoongArchInsInfo *info, uint32_t insn)
{
    info->ui = extract32(insn, 10, 8); //ui8
    info->opnds[0] = extract32(insn, 10, 8); //ui8
    info->op = extract32(insn, 5, 5); //bt_op
    info->opnds[1] = extract32(insn, 5, 5); //bt_op
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[2] = extract32(insn, 0, 5); //rd
    info->nb_opnds = 3;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_63(LoongArchInsInfo *info, uint32_t insn)
{
    info->ui = extract32(insn, 10, 8); //ui8
    info->opnds[0] = extract32(insn, 10, 8); //ui8
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[1] = extract32(insn, 0, 5); //rd
    info->nb_opnds = 2;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_64(LoongArchInsInfo *info, uint32_t insn)
{
    info->offs = deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 5)); //offs2
    info->opnds[0] = deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 5)); //offs2
    info->nb_opnds = 1;
    info->num_srcs = 0;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_7(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->ui = extract32(insn, 10, 6); //ui6
    info->opnds[2] = extract32(insn, 10, 6); //ui6
    info->nb_opnds = 3;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_8(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->msb = extract32(insn, 16, 5); //msbw
    info->opnds[2] = extract32(insn, 16, 5); //msbw
    info->lsb = extract32(insn, 10, 5); //lsbw
    info->opnds[3] = extract32(insn, 10, 5); //lsbw
    info->nb_opnds = 4;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

static void decode_extract_format_9(LoongArchInsInfo *info, uint32_t insn)
{
    info->dst_reg = extract32(insn, 0, 5); //rd
    info->opnds[0] = extract32(insn, 0, 5); //rd
    info->srcs_regs[0]  = extract32(insn, 5, 5);//rj
    info->opnds[1] = extract32(insn, 5, 5); //rj
    info->msb = extract32(insn, 16, 6); //msbd
    info->opnds[2] = extract32(insn, 16, 6); //msbd
    info->lsb = extract32(insn, 10, 6); //lsbd
    info->opnds[3] = extract32(insn, 10, 6); //lsbd
    info->nb_opnds = 4;
    info->num_srcs = 1;
    info->num_fcsr = 0;
    info->num_cfreg = 0;
    info->num_sccrach = 0;
    info->num_fsrcs = 0;
}

bool decode(LoongArchInsInfo *info, uint32_t insn)
{
    switch ((insn >> 26) & 0x3f) {
    case 0x0:
        /* 000000.. ........ ........ ........ */
        switch ((insn >> 22) & 0xf) {
        case 0x0:
            /* 00000000 00...... ........ ........ */
            switch ((insn >> 18) & 0xf) {
            case 0x0:
                /* 00000000 000000.. ........ ........ */
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00000000 0....... ........ */
                    switch ((insn >> 10) & 0x1f) {
                    case 0x2:
                        /* 00000000 00000000 000010.. ........ */
                        decode_extract_format_46(info, insn);
                        switch ((insn >> 2) & 0x7) {
                        case 0x0:
                            /* 00000000 00000000 000010.. ...000.. */
                            /* ./loongarch.decode.2:429 */
                            info->opc = OPC_GR2SCR;
                            return true;
                            break;
                        }
                        break;
                    case 0x3:
                        /* 00000000 00000000 000011.. ........ */
                        decode_extract_format_47(info, insn);
                        switch ((insn >> 7) & 0x7) {
                        case 0x0:
                            /* 00000000 00000000 00001100 0....... */
                            /* ./loongarch.decode.2:430 */
                            info->opc = OPC_SRC2GR;
                            return true;
                            break;
                        }
                        break;
                    case 0x4:
                        /* 00000000 00000000 000100.. ........ */
                        /* ./loongarch.decode.2:52 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_CLO_W;
                        return true;
                        break;
                    case 0x5:
                        /* 00000000 00000000 000101.. ........ */
                        /* ./loongarch.decode.2:53 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_CLZ_W;
                        return true;
                        break;
                    case 0x6:
                        /* 00000000 00000000 000110.. ........ */
                        /* ./loongarch.decode.2:54 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_CTO_W;
                        return true;
                        break;
                    case 0x7:
                        /* 00000000 00000000 000111.. ........ */
                        /* ./loongarch.decode.2:55 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_CTZ_W;
                        return true;
                        break;
                    case 0x8:
                        /* 00000000 00000000 001000.. ........ */
                        /* ./loongarch.decode.2:56 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_CLO_D;
                        return true;
                        break;
                    case 0x9:
                        /* 00000000 00000000 001001.. ........ */
                        /* ./loongarch.decode.2:57 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_CLZ_D;
                        return true;
                        break;
                    case 0xa:
                        /* 00000000 00000000 001010.. ........ */
                        /* ./loongarch.decode.2:58 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_CTO_D;
                        return true;
                        break;
                    case 0xb:
                        /* 00000000 00000000 001011.. ........ */
                        /* ./loongarch.decode.2:59 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_CTZ_D;
                        return true;
                        break;
                    case 0xc:
                        /* 00000000 00000000 001100.. ........ */
                        /* ./loongarch.decode.2:60 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_REVB_2H;
                        return true;
                        break;
                    case 0xd:
                        /* 00000000 00000000 001101.. ........ */
                        /* ./loongarch.decode.2:61 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_REVB_4H;
                        return true;
                        break;
                    case 0xe:
                        /* 00000000 00000000 001110.. ........ */
                        /* ./loongarch.decode.2:62 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_REVB_2W;
                        return true;
                        break;
                    case 0xf:
                        /* 00000000 00000000 001111.. ........ */
                        /* ./loongarch.decode.2:63 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_REVB_D;
                        return true;
                        break;
                    case 0x10:
                        /* 00000000 00000000 010000.. ........ */
                        /* ./loongarch.decode.2:64 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_REVH_2W;
                        return true;
                        break;
                    case 0x11:
                        /* 00000000 00000000 010001.. ........ */
                        /* ./loongarch.decode.2:65 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_REVH_D;
                        return true;
                        break;
                    case 0x12:
                        /* 00000000 00000000 010010.. ........ */
                        /* ./loongarch.decode.2:66 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_BITREV_4B;
                        return true;
                        break;
                    case 0x13:
                        /* 00000000 00000000 010011.. ........ */
                        /* ./loongarch.decode.2:67 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_BITREV_8B;
                        return true;
                        break;
                    case 0x14:
                        /* 00000000 00000000 010100.. ........ */
                        /* ./loongarch.decode.2:68 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_BITREV_W;
                        return true;
                        break;
                    case 0x15:
                        /* 00000000 00000000 010101.. ........ */
                        /* ./loongarch.decode.2:69 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_BITREV_D;
                        return true;
                        break;
                    case 0x16:
                        /* 00000000 00000000 010110.. ........ */
                        /* ./loongarch.decode.2:70 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_EXT_W_H;
                        return true;
                        break;
                    case 0x17:
                        /* 00000000 00000000 010111.. ........ */
                        /* ./loongarch.decode.2:71 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_EXT_W_B;
                        return true;
                        break;
                    case 0x18:
                        /* 00000000 00000000 011000.. ........ */
                        /* ./loongarch.decode.2:72 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_RDTIMEL_W;
                        return true;
                        break;
                    case 0x19:
                        /* 00000000 00000000 011001.. ........ */
                        /* ./loongarch.decode.2:73 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_RDTIMEH_W;
                        return true;
                        break;
                    case 0x1a:
                        /* 00000000 00000000 011010.. ........ */
                        /* ./loongarch.decode.2:74 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_RDTIME_D;
                        return true;
                        break;
                    case 0x1b:
                        /* 00000000 00000000 011011.. ........ */
                        /* ./loongarch.decode.2:75 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_CPUCFG;
                        return true;
                        break;
                    case 0x1c:
                        /* 00000000 00000000 011100.. ........ */
                        decode_extract_format_48(info, insn);
                        switch (insn & 0x0000031f) {
                        case 0x00000000:
                            /* 00000000 00000000 01110000 ...00000 */
                            /* ./loongarch.decode.2:431 */
                            info->opc = OPC_X86MTTOP;
                            return true;
                            break;
                        }
                        break;
                    case 0x1d:
                        /* 00000000 00000000 011101.. ........ */
                        decode_extract_format_49(info, insn);
                        switch ((insn >> 5) & 0x1f) {
                        case 0x0:
                            /* 00000000 00000000 01110100 000..... */
                            /* ./loongarch.decode.2:432 */
                            info->opc = OPC_X86MFTOP;
                            return true;
                            break;
                        }
                        break;
                    case 0x1e:
                        /* 00000000 00000000 011110.. ........ */
                        /* ./loongarch.decode.2:433 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_SETX86LOOPE;
                        return true;
                        break;
                    case 0x1f:
                        /* 00000000 00000000 011111.. ........ */
                        /* ./loongarch.decode.2:434 */
                        decode_extract_format_0(info, insn);
                        info->opc = OPC_SETX86LOOPNE;
                        return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* 00000000 00000000 1....... ........ */
                    switch (insn & 0x00007c1f) {
                    case 0x00000000:
                        /* 00000000 00000000 100000.. ...00000 */
                        /* ./loongarch.decode.2:435 */
                        decode_extract_format_50(info, insn);
                        info->opc = OPC_X86INC_B;
                        return true;
                        break;
                    case 0x00000001:
                        /* 00000000 00000000 100000.. ...00001 */
                        /* ./loongarch.decode.2:436 */
                        decode_extract_format_50(info, insn);
                        info->opc = OPC_X86INC_H;
                        return true;
                        break;
                    case 0x00000002:
                        /* 00000000 00000000 100000.. ...00010 */
                        /* ./loongarch.decode.2:437 */
                        decode_extract_format_50(info, insn);
                        info->opc = OPC_X86INC_W;
                        return true;
                        break;
                    case 0x00000003:
                        /* 00000000 00000000 100000.. ...00011 */
                        /* ./loongarch.decode.2:438 */
                        decode_extract_format_50(info, insn);
                        info->opc = OPC_X86INC_D;
                        return true;
                        break;
                    case 0x00000004:
                        /* 00000000 00000000 100000.. ...00100 */
                        /* ./loongarch.decode.2:439 */
                        decode_extract_format_50(info, insn);
                        info->opc = OPC_X86DEC_B;
                        return true;
                        break;
                    case 0x00000005:
                        /* 00000000 00000000 100000.. ...00101 */
                        /* ./loongarch.decode.2:440 */
                        decode_extract_format_50(info, insn);
                        info->opc = OPC_X86DEC_H;
                        return true;
                        break;
                    case 0x00000006:
                        /* 00000000 00000000 100000.. ...00110 */
                        /* ./loongarch.decode.2:441 */
                        decode_extract_format_50(info, insn);
                        info->opc = OPC_X86DEC_W;
                        return true;
                        break;
                    case 0x00000007:
                        /* 00000000 00000000 100000.. ...00111 */
                        /* ./loongarch.decode.2:442 */
                        decode_extract_format_50(info, insn);
                        info->opc = OPC_X86DEC_D;
                        return true;
                        break;
                    case 0x00000008:
                        /* 00000000 00000000 100000.. ...01000 */
                        decode_extract_format_27(info, insn);
                        switch ((insn >> 5) & 0x1f) {
                        case 0x0:
                            /* 00000000 00000000 10000000 00001000 */
                            /* ./loongarch.decode.2:443 */
                            info->opc = OPC_X86SETTM;
                            return true;
                            break;
                        case 0x1:
                            /* 00000000 00000000 10000000 00101000 */
                            /* ./loongarch.decode.2:444 */
                            info->opc = OPC_X86CLRTM;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000009:
                        /* 00000000 00000000 100000.. ...01001 */
                        decode_extract_format_27(info, insn);
                        switch ((insn >> 5) & 0x1f) {
                        case 0x0:
                            /* 00000000 00000000 10000000 00001001 */
                            /* ./loongarch.decode.2:445 */
                            info->opc = OPC_X86INCTOP;
                            return true;
                            break;
                        case 0x1:
                            /* 00000000 00000000 10000000 00101001 */
                            /* ./loongarch.decode.2:446 */
                            info->opc = OPC_X86DECTOP;
                            return true;
                            break;
                        }
                        break;
                    }
                    break;
                case 0x2:
                    /* 00000000 00000001 0....... ........ */
                    decode_extract_format_1(info, insn);
                    switch (insn & 0x0000001f) {
                    case 0x00000000:
                        /* 00000000 00000001 0....... ...00000 */
                        /* ./loongarch.decode.2:76 */
                        info->opc = OPC_ASRTLE_D;
                        return true;
                        break;
                    }
                    break;
                case 0x3:
                    /* 00000000 00000001 1....... ........ */
                    decode_extract_format_1(info, insn);
                    switch (insn & 0x0000001f) {
                    case 0x00000000:
                        /* 00000000 00000001 1....... ...00000 */
                        /* ./loongarch.decode.2:77 */
                        info->opc = OPC_ASRTGT_D;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x1:
                /* 00000000 000001.. ........ ........ */
                decode_extract_format_2(info, insn);
                switch ((insn >> 17) & 0x1) {
                case 0x0:
                    /* 00000000 0000010. ........ ........ */
                    /* ./loongarch.decode.2:78 */
                    info->opc = OPC_ALSL_W;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 0000011. ........ ........ */
                    /* ./loongarch.decode.2:79 */
                    info->opc = OPC_ALSL_WU;
                    return true;
                    break;
                }
                break;
            case 0x2:
                /* 00000000 000010.. ........ ........ */
                decode_extract_format_2(info, insn);
                switch ((insn >> 17) & 0x1) {
                case 0x0:
                    /* 00000000 0000100. ........ ........ */
                    /* ./loongarch.decode.2:80 */
                    info->opc = OPC_BYTEPICK_W;
                    return true;
                    break;
                }
                break;
            case 0x3:
                /* 00000000 000011.. ........ ........ */
                /* ./loongarch.decode.2:81 */
                decode_extract_format_3(info, insn);
                info->opc = OPC_BYTEPICK_D;
                return true;
                break;
            case 0x4:
                /* 00000000 000100.. ........ ........ */
                decode_extract_format_4(info, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00010000 0....... ........ */
                    /* ./loongarch.decode.2:82 */
                    info->opc = OPC_ADD_W;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 00010000 1....... ........ */
                    /* ./loongarch.decode.2:83 */
                    info->opc = OPC_ADD_D;
                    return true;
                    break;
                case 0x2:
                    /* 00000000 00010001 0....... ........ */
                    /* ./loongarch.decode.2:84 */
                    info->opc = OPC_SUB_W;
                    return true;
                    break;
                case 0x3:
                    /* 00000000 00010001 1....... ........ */
                    /* ./loongarch.decode.2:85 */
                    info->opc = OPC_SUB_D;
                    return true;
                    break;
                case 0x4:
                    /* 00000000 00010010 0....... ........ */
                    /* ./loongarch.decode.2:86 */
                    info->opc = OPC_SLT;
                    return true;
                    break;
                case 0x5:
                    /* 00000000 00010010 1....... ........ */
                    /* ./loongarch.decode.2:87 */
                    info->opc = OPC_SLTU;
                    return true;
                    break;
                case 0x6:
                    /* 00000000 00010011 0....... ........ */
                    /* ./loongarch.decode.2:88 */
                    info->opc = OPC_MASKEQZ;
                    return true;
                    break;
                case 0x7:
                    /* 00000000 00010011 1....... ........ */
                    /* ./loongarch.decode.2:89 */
                    info->opc = OPC_MASKNEZ;
                    return true;
                    break;
                }
                break;
            case 0x5:
                /* 00000000 000101.. ........ ........ */
                decode_extract_format_4(info, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00010100 0....... ........ */
                    /* ./loongarch.decode.2:90 */
                    info->opc = OPC_NOR;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 00010100 1....... ........ */
                    /* ./loongarch.decode.2:91 */
                    info->opc = OPC_AND;
                    return true;
                    break;
                case 0x2:
                    /* 00000000 00010101 0....... ........ */
                    /* ./loongarch.decode.2:92 */
                    info->opc = OPC_OR;
                    return true;
                    break;
                case 0x3:
                    /* 00000000 00010101 1....... ........ */
                    /* ./loongarch.decode.2:93 */
                    info->opc = OPC_XOR;
                    return true;
                    break;
                case 0x4:
                    /* 00000000 00010110 0....... ........ */
                    /* ./loongarch.decode.2:94 */
                    info->opc = OPC_ORN;
                    return true;
                    break;
                case 0x5:
                    /* 00000000 00010110 1....... ........ */
                    /* ./loongarch.decode.2:95 */
                    info->opc = OPC_ANDN;
                    return true;
                    break;
                case 0x6:
                    /* 00000000 00010111 0....... ........ */
                    /* ./loongarch.decode.2:96 */
                    info->opc = OPC_SLL_W;
                    return true;
                    break;
                case 0x7:
                    /* 00000000 00010111 1....... ........ */
                    /* ./loongarch.decode.2:97 */
                    info->opc = OPC_SRL_W;
                    return true;
                    break;
                }
                break;
            case 0x6:
                /* 00000000 000110.. ........ ........ */
                decode_extract_format_4(info, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00011000 0....... ........ */
                    /* ./loongarch.decode.2:98 */
                    info->opc = OPC_SRA_W;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 00011000 1....... ........ */
                    /* ./loongarch.decode.2:99 */
                    info->opc = OPC_SLL_D;
                    return true;
                    break;
                case 0x2:
                    /* 00000000 00011001 0....... ........ */
                    /* ./loongarch.decode.2:100 */
                    info->opc = OPC_SRL_D;
                    return true;
                    break;
                case 0x3:
                    /* 00000000 00011001 1....... ........ */
                    /* ./loongarch.decode.2:101 */
                    info->opc = OPC_SRA_D;
                    return true;
                    break;
                case 0x4:
                    /* 00000000 00011010 0....... ........ */
                    /* ./loongarch.decode.2:447 */
                    info->opc = OPC_ROTR_B;
                    return true;
                    break;
                case 0x5:
                    /* 00000000 00011010 1....... ........ */
                    /* ./loongarch.decode.2:448 */
                    info->opc = OPC_ROTR_H;
                    return true;
                    break;
                case 0x6:
                    /* 00000000 00011011 0....... ........ */
                    /* ./loongarch.decode.2:102 */
                    info->opc = OPC_ROTR_W;
                    return true;
                    break;
                case 0x7:
                    /* 00000000 00011011 1....... ........ */
                    /* ./loongarch.decode.2:103 */
                    info->opc = OPC_ROTR_D;
                    return true;
                    break;
                }
                break;
            case 0x7:
                /* 00000000 000111.. ........ ........ */
                decode_extract_format_4(info, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00011100 0....... ........ */
                    /* ./loongarch.decode.2:104 */
                    info->opc = OPC_MUL_W;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 00011100 1....... ........ */
                    /* ./loongarch.decode.2:105 */
                    info->opc = OPC_MULH_W;
                    return true;
                    break;
                case 0x2:
                    /* 00000000 00011101 0....... ........ */
                    /* ./loongarch.decode.2:106 */
                    info->opc = OPC_MULH_WU;
                    return true;
                    break;
                case 0x3:
                    /* 00000000 00011101 1....... ........ */
                    /* ./loongarch.decode.2:107 */
                    info->opc = OPC_MUL_D;
                    return true;
                    break;
                case 0x4:
                    /* 00000000 00011110 0....... ........ */
                    /* ./loongarch.decode.2:108 */
                    info->opc = OPC_MULH_D;
                    return true;
                    break;
                case 0x5:
                    /* 00000000 00011110 1....... ........ */
                    /* ./loongarch.decode.2:109 */
                    info->opc = OPC_MULH_DU;
                    return true;
                    break;
                case 0x6:
                    /* 00000000 00011111 0....... ........ */
                    /* ./loongarch.decode.2:110 */
                    info->opc = OPC_MULW_D_W;
                    return true;
                    break;
                case 0x7:
                    /* 00000000 00011111 1....... ........ */
                    /* ./loongarch.decode.2:111 */
                    info->opc = OPC_MULW_D_WU;
                    return true;
                    break;
                }
                break;
            case 0x8:
                /* 00000000 001000.. ........ ........ */
                decode_extract_format_4(info, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00100000 0....... ........ */
                    /* ./loongarch.decode.2:112 */
                    info->opc = OPC_DIV_W;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 00100000 1....... ........ */
                    /* ./loongarch.decode.2:113 */
                    info->opc = OPC_MOD_W;
                    return true;
                    break;
                case 0x2:
                    /* 00000000 00100001 0....... ........ */
                    /* ./loongarch.decode.2:114 */
                    info->opc = OPC_DIV_WU;
                    return true;
                    break;
                case 0x3:
                    /* 00000000 00100001 1....... ........ */
                    /* ./loongarch.decode.2:115 */
                    info->opc = OPC_MOD_WU;
                    return true;
                    break;
                case 0x4:
                    /* 00000000 00100010 0....... ........ */
                    /* ./loongarch.decode.2:116 */
                    info->opc = OPC_DIV_D;
                    return true;
                    break;
                case 0x5:
                    /* 00000000 00100010 1....... ........ */
                    /* ./loongarch.decode.2:117 */
                    info->opc = OPC_MOD_D;
                    return true;
                    break;
                case 0x6:
                    /* 00000000 00100011 0....... ........ */
                    /* ./loongarch.decode.2:118 */
                    info->opc = OPC_DIV_DU;
                    return true;
                    break;
                case 0x7:
                    /* 00000000 00100011 1....... ........ */
                    /* ./loongarch.decode.2:119 */
                    info->opc = OPC_MOD_DU;
                    return true;
                    break;
                }
                break;
            case 0x9:
                /* 00000000 001001.. ........ ........ */
                decode_extract_format_4(info, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00100100 0....... ........ */
                    /* ./loongarch.decode.2:120 */
                    info->opc = OPC_CRC_W_B_W;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 00100100 1....... ........ */
                    /* ./loongarch.decode.2:121 */
                    info->opc = OPC_CRC_W_H_W;
                    return true;
                    break;
                case 0x2:
                    /* 00000000 00100101 0....... ........ */
                    /* ./loongarch.decode.2:122 */
                    info->opc = OPC_CRC_W_W_W;
                    return true;
                    break;
                case 0x3:
                    /* 00000000 00100101 1....... ........ */
                    /* ./loongarch.decode.2:123 */
                    info->opc = OPC_CRC_W_D_W;
                    return true;
                    break;
                case 0x4:
                    /* 00000000 00100110 0....... ........ */
                    /* ./loongarch.decode.2:124 */
                    info->opc = OPC_CRCC_W_B_W;
                    return true;
                    break;
                case 0x5:
                    /* 00000000 00100110 1....... ........ */
                    /* ./loongarch.decode.2:125 */
                    info->opc = OPC_CRCC_W_H_W;
                    return true;
                    break;
                case 0x6:
                    /* 00000000 00100111 0....... ........ */
                    /* ./loongarch.decode.2:126 */
                    info->opc = OPC_CRCC_W_W_W;
                    return true;
                    break;
                case 0x7:
                    /* 00000000 00100111 1....... ........ */
                    /* ./loongarch.decode.2:127 */
                    info->opc = OPC_CRCC_W_D_W;
                    return true;
                    break;
                }
                break;
            case 0xa:
                /* 00000000 001010.. ........ ........ */
                switch ((insn >> 15) & 0x7) {
                case 0x2:
                    /* 00000000 00101001 0....... ........ */
                    /* ./loongarch.decode.2:450 */
                    decode_extract_format_51(info, insn);
                    info->opc = OPC_ADDU12I_D;
                    return true;
                    break;
                case 0x3:
                    /* 00000000 00101001 1....... ........ */
                    /* ./loongarch.decode.2:449 */
                    decode_extract_format_51(info, insn);
                    info->opc = OPC_ADDU12I_W;
                    return true;
                    break;
                case 0x4:
                    /* 00000000 00101010 0....... ........ */
                    /* ./loongarch.decode.2:128 */
                    decode_extract_format_5(info, insn);
                    info->opc = OPC_BREAK;
                    return true;
                    break;
                case 0x5:
                    /* 00000000 00101010 1....... ........ */
                    /* ./loongarch.decode.2:129 */
                    decode_extract_format_5(info, insn);
                    info->opc = OPC_DBCL;
                    return true;
                    break;
                case 0x6:
                    /* 00000000 00101011 0....... ........ */
                    /* ./loongarch.decode.2:130 */
                    decode_extract_format_5(info, insn);
                    info->opc = OPC_SYSCALL;
                    return true;
                    break;
                case 0x7:
                    /* 00000000 00101011 1....... ........ */
                    /* ./loongarch.decode.2:451 */
                    decode_extract_format_5(info, insn);
                    info->opc = OPC_HVCL;
                    return true;
                    break;
                }
                break;
            case 0xb:
                /* 00000000 001011.. ........ ........ */
                decode_extract_format_2(info, insn);
                switch ((insn >> 17) & 0x1) {
                case 0x0:
                    /* 00000000 0010110. ........ ........ */
                    /* ./loongarch.decode.2:131 */
                    info->opc = OPC_ALSL_D;
                    return true;
                    break;
                }
                break;
            case 0xc:
                /* 00000000 001100.. ........ ........ */
                decode_extract_format_4(info, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00110000 0....... ........ */
                    /* ./loongarch.decode.2:452 */
                    info->opc = OPC_ADC_B;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 00110000 1....... ........ */
                    /* ./loongarch.decode.2:453 */
                    info->opc = OPC_ADC_H;
                    return true;
                    break;
                case 0x2:
                    /* 00000000 00110001 0....... ........ */
                    /* ./loongarch.decode.2:454 */
                    info->opc = OPC_ADC_W;
                    return true;
                    break;
                case 0x3:
                    /* 00000000 00110001 1....... ........ */
                    /* ./loongarch.decode.2:455 */
                    info->opc = OPC_ADC_D;
                    return true;
                    break;
                case 0x4:
                    /* 00000000 00110010 0....... ........ */
                    /* ./loongarch.decode.2:456 */
                    info->opc = OPC_SBC_B;
                    return true;
                    break;
                case 0x5:
                    /* 00000000 00110010 1....... ........ */
                    /* ./loongarch.decode.2:457 */
                    info->opc = OPC_SBC_H;
                    return true;
                    break;
                case 0x6:
                    /* 00000000 00110011 0....... ........ */
                    /* ./loongarch.decode.2:458 */
                    info->opc = OPC_SBC_W;
                    return true;
                    break;
                case 0x7:
                    /* 00000000 00110011 1....... ........ */
                    /* ./loongarch.decode.2:459 */
                    info->opc = OPC_SBC_D;
                    return true;
                    break;
                }
                break;
            case 0xd:
                /* 00000000 001101.. ........ ........ */
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00110100 0....... ........ */
                    /* ./loongarch.decode.2:460 */
                    decode_extract_format_4(info, insn);
                    info->opc = OPC_RCR_B;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 00110100 1....... ........ */
                    /* ./loongarch.decode.2:461 */
                    decode_extract_format_4(info, insn);
                    info->opc = OPC_RCR_H;
                    return true;
                    break;
                case 0x2:
                    /* 00000000 00110101 0....... ........ */
                    /* ./loongarch.decode.2:462 */
                    decode_extract_format_4(info, insn);
                    info->opc = OPC_RCR_W;
                    return true;
                    break;
                case 0x3:
                    /* 00000000 00110101 1....... ........ */
                    /* ./loongarch.decode.2:463 */
                    decode_extract_format_4(info, insn);
                    info->opc = OPC_RCR_D;
                    return true;
                    break;
                case 0x4:
                    /* 00000000 00110110 0....... ........ */
                    decode_extract_format_52(info, insn);
                    switch ((insn >> 14) & 0x1) {
                    case 0x1:
                        /* 00000000 00110110 01...... ........ */
                        /* ./loongarch.decode.2:464 */
                        info->opc = OPC_ARMMOVE;
                        return true;
                        break;
                    }
                    break;
                case 0x5:
                    /* 00000000 00110110 1....... ........ */
                    decode_extract_format_53(info, insn);
                    switch (insn & 0x000043e0) {
                    case 0x00000000:
                        /* 00000000 00110110 10....00 000..... */
                        /* ./loongarch.decode.2:465 */
                        info->opc = OPC_SETX86J;
                        return true;
                        break;
                    case 0x00004000:
                        /* 00000000 00110110 11....00 000..... */
                        /* ./loongarch.decode.2:466 */
                        info->opc = OPC_SETARMJ;
                        return true;
                        break;
                    }
                    break;
                case 0x6:
                    /* 00000000 00110111 0....... ........ */
                    decode_extract_format_54(info, insn);
                    switch ((insn >> 4) & 0x1) {
                    case 0x1:
                        /* 00000000 00110111 0....... ...1.... */
                        /* ./loongarch.decode.2:467 */
                        info->opc = OPC_ARMADD_W;
                        return true;
                        break;
                    }
                    break;
                case 0x7:
                    /* 00000000 00110111 1....... ........ */
                    decode_extract_format_54(info, insn);
                    switch ((insn >> 4) & 0x1) {
                    case 0x1:
                        /* 00000000 00110111 1....... ...1.... */
                        /* ./loongarch.decode.2:468 */
                        info->opc = OPC_ARMSUB_W;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            case 0xe:
                /* 00000000 001110.. ........ ........ */
                decode_extract_format_54(info, insn);
                switch (insn & 0x00038010) {
                case 0x00000010:
                    /* 00000000 00111000 0....... ...1.... */
                    /* ./loongarch.decode.2:469 */
                    info->opc = OPC_ARMADC_W;
                    return true;
                    break;
                case 0x00008010:
                    /* 00000000 00111000 1....... ...1.... */
                    /* ./loongarch.decode.2:470 */
                    info->opc = OPC_ARMSBC_W;
                    return true;
                    break;
                case 0x00010010:
                    /* 00000000 00111001 0....... ...1.... */
                    /* ./loongarch.decode.2:471 */
                    info->opc = OPC_ARMAND_W;
                    return true;
                    break;
                case 0x00018010:
                    /* 00000000 00111001 1....... ...1.... */
                    /* ./loongarch.decode.2:472 */
                    info->opc = OPC_ARMOR_W;
                    return true;
                    break;
                case 0x00020010:
                    /* 00000000 00111010 0....... ...1.... */
                    /* ./loongarch.decode.2:473 */
                    info->opc = OPC_ARMXOR_W;
                    return true;
                    break;
                case 0x00028010:
                    /* 00000000 00111010 1....... ...1.... */
                    /* ./loongarch.decode.2:474 */
                    info->opc = OPC_ARMSLL_W;
                    return true;
                    break;
                case 0x00030010:
                    /* 00000000 00111011 0....... ...1.... */
                    /* ./loongarch.decode.2:475 */
                    info->opc = OPC_ARMSRL_W;
                    return true;
                    break;
                case 0x00038010:
                    /* 00000000 00111011 1....... ...1.... */
                    /* ./loongarch.decode.2:476 */
                    info->opc = OPC_ARMSRA_W;
                    return true;
                    break;
                }
                break;
            case 0xf:
                /* 00000000 001111.. ........ ........ */
                switch (insn & 0x00038010) {
                case 0x00000010:
                    /* 00000000 00111100 0....... ...1.... */
                    /* ./loongarch.decode.2:477 */
                    decode_extract_format_54(info, insn);
                    info->opc = OPC_ARMROTR_W;
                    return true;
                    break;
                case 0x00008010:
                    /* 00000000 00111100 1....... ...1.... */
                    /* ./loongarch.decode.2:478 */
                    decode_extract_format_54(info, insn);
                    info->opc = OPC_ARMSLLI_W;
                    return true;
                    break;
                case 0x00010010:
                    /* 00000000 00111101 0....... ...1.... */
                    /* ./loongarch.decode.2:479 */
                    decode_extract_format_54(info, insn);
                    info->opc = OPC_ARMSRLI_W;
                    return true;
                    break;
                case 0x00018010:
                    /* 00000000 00111101 1....... ...1.... */
                    /* ./loongarch.decode.2:480 */
                    decode_extract_format_54(info, insn);
                    info->opc = OPC_ARMSRAI_W;
                    return true;
                    break;
                case 0x00020010:
                    /* 00000000 00111110 0....... ...1.... */
                    /* ./loongarch.decode.2:481 */
                    decode_extract_format_54(info, insn);
                    info->opc = OPC_ARMROTRI_W;
                    return true;
                    break;
                case 0x00028000:
                    /* 00000000 00111110 1....... ...0.... */
                    decode_extract_format_1(info, insn);
                    switch (insn & 0x0000000f) {
                    case 0x00000000:
                        /* 00000000 00111110 1....... ...00000 */
                        /* ./loongarch.decode.2:482 */
                        info->opc = OPC_X86MUL_B;
                        return true;
                        break;
                    case 0x00000001:
                        /* 00000000 00111110 1....... ...00001 */
                        /* ./loongarch.decode.2:483 */
                        info->opc = OPC_X86MUL_H;
                        return true;
                        break;
                    case 0x00000002:
                        /* 00000000 00111110 1....... ...00010 */
                        /* ./loongarch.decode.2:484 */
                        info->opc = OPC_X86MUL_W;
                        return true;
                        break;
                    case 0x00000003:
                        /* 00000000 00111110 1....... ...00011 */
                        /* ./loongarch.decode.2:485 */
                        info->opc = OPC_X86MUL_D;
                        return true;
                        break;
                    case 0x00000004:
                        /* 00000000 00111110 1....... ...00100 */
                        /* ./loongarch.decode.2:486 */
                        info->opc = OPC_X86MUL_BU;
                        return true;
                        break;
                    case 0x00000005:
                        /* 00000000 00111110 1....... ...00101 */
                        /* ./loongarch.decode.2:487 */
                        info->opc = OPC_X86MUL_HU;
                        return true;
                        break;
                    case 0x00000006:
                        /* 00000000 00111110 1....... ...00110 */
                        /* ./loongarch.decode.2:488 */
                        info->opc = OPC_X86MUL_WU;
                        return true;
                        break;
                    case 0x00000007:
                        /* 00000000 00111110 1....... ...00111 */
                        /* ./loongarch.decode.2:489 */
                        info->opc = OPC_X86MUL_DU;
                        return true;
                        break;
                    }
                    break;
                case 0x00030000:
                    /* 00000000 00111111 0....... ...0.... */
                    decode_extract_format_1(info, insn);
                    switch (insn & 0x0000000f) {
                    case 0x00000000:
                        /* 00000000 00111111 0....... ...00000 */
                        /* ./loongarch.decode.2:490 */
                        info->opc = OPC_X86ADD_WU;
                        return true;
                        break;
                    case 0x00000001:
                        /* 00000000 00111111 0....... ...00001 */
                        /* ./loongarch.decode.2:491 */
                        info->opc = OPC_X86ADD_DU;
                        return true;
                        break;
                    case 0x00000002:
                        /* 00000000 00111111 0....... ...00010 */
                        /* ./loongarch.decode.2:492 */
                        info->opc = OPC_X86SUB_WU;
                        return true;
                        break;
                    case 0x00000003:
                        /* 00000000 00111111 0....... ...00011 */
                        /* ./loongarch.decode.2:493 */
                        info->opc = OPC_X86SUB_DU;
                        return true;
                        break;
                    case 0x00000004:
                        /* 00000000 00111111 0....... ...00100 */
                        /* ./loongarch.decode.2:494 */
                        info->opc = OPC_X86ADD_B;
                        return true;
                        break;
                    case 0x00000005:
                        /* 00000000 00111111 0....... ...00101 */
                        /* ./loongarch.decode.2:495 */
                        info->opc = OPC_X86ADD_H;
                        return true;
                        break;
                    case 0x00000006:
                        /* 00000000 00111111 0....... ...00110 */
                        /* ./loongarch.decode.2:496 */
                        info->opc = OPC_X86ADD_W;
                        return true;
                        break;
                    case 0x00000007:
                        /* 00000000 00111111 0....... ...00111 */
                        /* ./loongarch.decode.2:497 */
                        info->opc = OPC_X86ADD_D;
                        return true;
                        break;
                    case 0x00000008:
                        /* 00000000 00111111 0....... ...01000 */
                        /* ./loongarch.decode.2:498 */
                        info->opc = OPC_X86SUB_B;
                        return true;
                        break;
                    case 0x00000009:
                        /* 00000000 00111111 0....... ...01001 */
                        /* ./loongarch.decode.2:499 */
                        info->opc = OPC_X86SUB_H;
                        return true;
                        break;
                    case 0x0000000a:
                        /* 00000000 00111111 0....... ...01010 */
                        /* ./loongarch.decode.2:500 */
                        info->opc = OPC_X86SUB_W;
                        return true;
                        break;
                    case 0x0000000b:
                        /* 00000000 00111111 0....... ...01011 */
                        /* ./loongarch.decode.2:501 */
                        info->opc = OPC_X86SUB_D;
                        return true;
                        break;
                    case 0x0000000c:
                        /* 00000000 00111111 0....... ...01100 */
                        /* ./loongarch.decode.2:502 */
                        info->opc = OPC_X86ADC_B;
                        return true;
                        break;
                    case 0x0000000d:
                        /* 00000000 00111111 0....... ...01101 */
                        /* ./loongarch.decode.2:503 */
                        info->opc = OPC_X86ADC_H;
                        return true;
                        break;
                    case 0x0000000e:
                        /* 00000000 00111111 0....... ...01110 */
                        /* ./loongarch.decode.2:504 */
                        info->opc = OPC_X86ADC_W;
                        return true;
                        break;
                    case 0x0000000f:
                        /* 00000000 00111111 0....... ...01111 */
                        /* ./loongarch.decode.2:505 */
                        info->opc = OPC_X86ADC_D;
                        return true;
                        break;
                    }
                    break;
                case 0x00030010:
                    /* 00000000 00111111 0....... ...1.... */
                    decode_extract_format_1(info, insn);
                    switch (insn & 0x0000000f) {
                    case 0x00000000:
                        /* 00000000 00111111 0....... ...10000 */
                        /* ./loongarch.decode.2:506 */
                        info->opc = OPC_X86SBC_B;
                        return true;
                        break;
                    case 0x00000001:
                        /* 00000000 00111111 0....... ...10001 */
                        /* ./loongarch.decode.2:507 */
                        info->opc = OPC_X86SBC_H;
                        return true;
                        break;
                    case 0x00000002:
                        /* 00000000 00111111 0....... ...10010 */
                        /* ./loongarch.decode.2:508 */
                        info->opc = OPC_X86SBC_W;
                        return true;
                        break;
                    case 0x00000003:
                        /* 00000000 00111111 0....... ...10011 */
                        /* ./loongarch.decode.2:509 */
                        info->opc = OPC_X86SBC_D;
                        return true;
                        break;
                    case 0x00000004:
                        /* 00000000 00111111 0....... ...10100 */
                        /* ./loongarch.decode.2:510 */
                        info->opc = OPC_X86SLL_B;
                        return true;
                        break;
                    case 0x00000005:
                        /* 00000000 00111111 0....... ...10101 */
                        /* ./loongarch.decode.2:511 */
                        info->opc = OPC_X86SLL_H;
                        return true;
                        break;
                    case 0x00000006:
                        /* 00000000 00111111 0....... ...10110 */
                        /* ./loongarch.decode.2:512 */
                        info->opc = OPC_X86SLL_W;
                        return true;
                        break;
                    case 0x00000007:
                        /* 00000000 00111111 0....... ...10111 */
                        /* ./loongarch.decode.2:513 */
                        info->opc = OPC_X86SLL_D;
                        return true;
                        break;
                    case 0x00000008:
                        /* 00000000 00111111 0....... ...11000 */
                        /* ./loongarch.decode.2:514 */
                        info->opc = OPC_X86SRL_B;
                        return true;
                        break;
                    case 0x00000009:
                        /* 00000000 00111111 0....... ...11001 */
                        /* ./loongarch.decode.2:515 */
                        info->opc = OPC_X86SRL_H;
                        return true;
                        break;
                    case 0x0000000a:
                        /* 00000000 00111111 0....... ...11010 */
                        /* ./loongarch.decode.2:516 */
                        info->opc = OPC_X86SRL_W;
                        return true;
                        break;
                    case 0x0000000b:
                        /* 00000000 00111111 0....... ...11011 */
                        /* ./loongarch.decode.2:517 */
                        info->opc = OPC_X86SRL_D;
                        return true;
                        break;
                    case 0x0000000c:
                        /* 00000000 00111111 0....... ...11100 */
                        /* ./loongarch.decode.2:518 */
                        info->opc = OPC_X86SRA_B;
                        return true;
                        break;
                    case 0x0000000d:
                        /* 00000000 00111111 0....... ...11101 */
                        /* ./loongarch.decode.2:519 */
                        info->opc = OPC_X86SRA_H;
                        return true;
                        break;
                    case 0x0000000e:
                        /* 00000000 00111111 0....... ...11110 */
                        /* ./loongarch.decode.2:520 */
                        info->opc = OPC_X86SRA_W;
                        return true;
                        break;
                    case 0x0000000f:
                        /* 00000000 00111111 0....... ...11111 */
                        /* ./loongarch.decode.2:521 */
                        info->opc = OPC_X86SRA_D;
                        return true;
                        break;
                    }
                    break;
                case 0x00038000:
                    /* 00000000 00111111 1....... ...0.... */
                    decode_extract_format_1(info, insn);
                    switch (insn & 0x0000000f) {
                    case 0x00000000:
                        /* 00000000 00111111 1....... ...00000 */
                        /* ./loongarch.decode.2:522 */
                        info->opc = OPC_X86ROTR_B;
                        return true;
                        break;
                    case 0x00000001:
                        /* 00000000 00111111 1....... ...00001 */
                        /* ./loongarch.decode.2:523 */
                        info->opc = OPC_X86ROTR_H;
                        return true;
                        break;
                    case 0x00000002:
                        /* 00000000 00111111 1....... ...00010 */
                        /* ./loongarch.decode.2:524 */
                        info->opc = OPC_X86ROTR_D;
                        return true;
                        break;
                    case 0x00000003:
                        /* 00000000 00111111 1....... ...00011 */
                        /* ./loongarch.decode.2:525 */
                        info->opc = OPC_X86ROTR_W;
                        return true;
                        break;
                    case 0x00000004:
                        /* 00000000 00111111 1....... ...00100 */
                        /* ./loongarch.decode.2:526 */
                        info->opc = OPC_X86ROTL_B;
                        return true;
                        break;
                    case 0x00000005:
                        /* 00000000 00111111 1....... ...00101 */
                        /* ./loongarch.decode.2:527 */
                        info->opc = OPC_X86ROTL_H;
                        return true;
                        break;
                    case 0x00000006:
                        /* 00000000 00111111 1....... ...00110 */
                        /* ./loongarch.decode.2:528 */
                        info->opc = OPC_X86ROTL_W;
                        return true;
                        break;
                    case 0x00000007:
                        /* 00000000 00111111 1....... ...00111 */
                        /* ./loongarch.decode.2:529 */
                        info->opc = OPC_X86ROTL_D;
                        return true;
                        break;
                    case 0x00000008:
                        /* 00000000 00111111 1....... ...01000 */
                        /* ./loongarch.decode.2:530 */
                        info->opc = OPC_X86RCR_B;
                        return true;
                        break;
                    case 0x00000009:
                        /* 00000000 00111111 1....... ...01001 */
                        /* ./loongarch.decode.2:531 */
                        info->opc = OPC_X86RCR_H;
                        return true;
                        break;
                    case 0x0000000a:
                        /* 00000000 00111111 1....... ...01010 */
                        /* ./loongarch.decode.2:532 */
                        info->opc = OPC_X86RCR_W;
                        return true;
                        break;
                    case 0x0000000b:
                        /* 00000000 00111111 1....... ...01011 */
                        /* ./loongarch.decode.2:533 */
                        info->opc = OPC_X86RCR_D;
                        return true;
                        break;
                    case 0x0000000c:
                        /* 00000000 00111111 1....... ...01100 */
                        /* ./loongarch.decode.2:534 */
                        info->opc = OPC_X86RCL_B;
                        return true;
                        break;
                    case 0x0000000d:
                        /* 00000000 00111111 1....... ...01101 */
                        /* ./loongarch.decode.2:535 */
                        info->opc = OPC_X86RCL_H;
                        return true;
                        break;
                    case 0x0000000e:
                        /* 00000000 00111111 1....... ...01110 */
                        /* ./loongarch.decode.2:536 */
                        info->opc = OPC_X86RCL_W;
                        return true;
                        break;
                    case 0x0000000f:
                        /* 00000000 00111111 1....... ...01111 */
                        /* ./loongarch.decode.2:537 */
                        info->opc = OPC_X86RCL_D;
                        return true;
                        break;
                    }
                    break;
                case 0x00038010:
                    /* 00000000 00111111 1....... ...1.... */
                    switch (insn & 0x0000000f) {
                    case 0x00000000:
                        /* 00000000 00111111 1....... ...10000 */
                        /* ./loongarch.decode.2:538 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86AND_B;
                        return true;
                        break;
                    case 0x00000001:
                        /* 00000000 00111111 1....... ...10001 */
                        /* ./loongarch.decode.2:539 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86AND_H;
                        return true;
                        break;
                    case 0x00000002:
                        /* 00000000 00111111 1....... ...10010 */
                        /* ./loongarch.decode.2:540 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86AND_W;
                        return true;
                        break;
                    case 0x00000003:
                        /* 00000000 00111111 1....... ...10011 */
                        /* ./loongarch.decode.2:541 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86AND_D;
                        return true;
                        break;
                    case 0x00000004:
                        /* 00000000 00111111 1....... ...10100 */
                        /* ./loongarch.decode.2:542 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86OR_B;
                        return true;
                        break;
                    case 0x00000005:
                        /* 00000000 00111111 1....... ...10101 */
                        /* ./loongarch.decode.2:543 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86OR_H;
                        return true;
                        break;
                    case 0x00000006:
                        /* 00000000 00111111 1....... ...10110 */
                        /* ./loongarch.decode.2:544 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86OR_W;
                        return true;
                        break;
                    case 0x00000007:
                        /* 00000000 00111111 1....... ...10111 */
                        /* ./loongarch.decode.2:545 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86OR_D;
                        return true;
                        break;
                    case 0x00000008:
                        /* 00000000 00111111 1....... ...11000 */
                        /* ./loongarch.decode.2:546 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86XOR_B;
                        return true;
                        break;
                    case 0x00000009:
                        /* 00000000 00111111 1....... ...11001 */
                        /* ./loongarch.decode.2:547 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86XOR_H;
                        return true;
                        break;
                    case 0x0000000a:
                        /* 00000000 00111111 1....... ...11010 */
                        /* ./loongarch.decode.2:548 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86XOR_W;
                        return true;
                        break;
                    case 0x0000000b:
                        /* 00000000 00111111 1....... ...11011 */
                        /* ./loongarch.decode.2:549 */
                        decode_extract_format_1(info, insn);
                        info->opc = OPC_X86XOR_D;
                        return true;
                        break;
                    case 0x0000000c:
                        /* 00000000 00111111 1....... ...11100 */
                        decode_extract_format_55(info, insn);
                        switch ((insn >> 14) & 0x1) {
                        case 0x1:
                            /* 00000000 00111111 11...... ...11100 */
                            /* ./loongarch.decode.2:550 */
                            info->opc = OPC_ARMNOT_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x0000000d:
                        /* 00000000 00111111 1....... ...11101 */
                        decode_extract_format_55(info, insn);
                        switch ((insn >> 14) & 0x1) {
                        case 0x1:
                            /* 00000000 00111111 11...... ...11101 */
                            /* ./loongarch.decode.2:551 */
                            info->opc = OPC_ARMMOV_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x0000000e:
                        /* 00000000 00111111 1....... ...11110 */
                        decode_extract_format_55(info, insn);
                        switch ((insn >> 14) & 0x1) {
                        case 0x1:
                            /* 00000000 00111111 11...... ...11110 */
                            /* ./loongarch.decode.2:552 */
                            info->opc = OPC_ARMMOV_D;
                            return true;
                            break;
                        }
                        break;
                    case 0x0000000f:
                        /* 00000000 00111111 1....... ...11111 */
                        decode_extract_format_55(info, insn);
                        switch ((insn >> 14) & 0x1) {
                        case 0x1:
                            /* 00000000 00111111 11...... ...11111 */
                            /* ./loongarch.decode.2:553 */
                            info->opc = OPC_ARMRRX_W;
                            return true;
                            break;
                        }
                        break;
                    }
                    break;
                }
                break;
            }
            break;
        case 0x1:
            /* 00000000 01...... ........ ........ */
            switch ((insn >> 21) & 0x1) {
            case 0x0:
                /* 00000000 010..... ........ ........ */
                switch ((insn >> 18) & 0x7) {
                case 0x0:
                    /* 00000000 010000.. ........ ........ */
                    switch ((insn >> 16) & 0x3) {
                    case 0x0:
                        /* 00000000 01000000 ........ ........ */
                        decode_extract_format_6(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01000000 1....... ........ */
                            /* ./loongarch.decode.2:132 */
                            info->opc = OPC_SLLI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x1:
                        /* 00000000 01000001 ........ ........ */
                        /* ./loongarch.decode.2:133 */
                        decode_extract_format_7(info, insn);
                        info->opc = OPC_SLLI_D;
                        return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* 00000000 010001.. ........ ........ */
                    switch ((insn >> 16) & 0x3) {
                    case 0x0:
                        /* 00000000 01000100 ........ ........ */
                        decode_extract_format_6(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01000100 1....... ........ */
                            /* ./loongarch.decode.2:134 */
                            info->opc = OPC_SRLI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x1:
                        /* 00000000 01000101 ........ ........ */
                        /* ./loongarch.decode.2:135 */
                        decode_extract_format_7(info, insn);
                        info->opc = OPC_SRLI_D;
                        return true;
                        break;
                    }
                    break;
                case 0x2:
                    /* 00000000 010010.. ........ ........ */
                    switch ((insn >> 16) & 0x3) {
                    case 0x0:
                        /* 00000000 01001000 ........ ........ */
                        decode_extract_format_6(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01001000 1....... ........ */
                            /* ./loongarch.decode.2:136 */
                            info->opc = OPC_SRAI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x1:
                        /* 00000000 01001001 ........ ........ */
                        /* ./loongarch.decode.2:137 */
                        decode_extract_format_7(info, insn);
                        info->opc = OPC_SRAI_D;
                        return true;
                        break;
                    }
                    break;
                case 0x3:
                    /* 00000000 010011.. ........ ........ */
                    switch ((insn >> 16) & 0x3) {
                    case 0x0:
                        /* 00000000 01001100 ........ ........ */
                        switch ((insn >> 15) & 0x1) {
                        case 0x0:
                            /* 00000000 01001100 0....... ........ */
                            switch ((insn >> 14) & 0x1) {
                            case 0x0:
                                /* 00000000 01001100 00...... ........ */
                                decode_extract_format_56(info, insn);
                                switch ((insn >> 13) & 0x1) {
                                case 0x1:
                                    /* 00000000 01001100 001..... ........ */
                                    /* ./loongarch.decode.2:554 */
                                    info->opc = OPC_ROTRI_B;
                                    return true;
                                    break;
                                }
                                break;
                            case 0x1:
                                /* 00000000 01001100 01...... ........ */
                                /* ./loongarch.decode.2:555 */
                                decode_extract_format_57(info, insn);
                                info->opc = OPC_ROTRI_H;
                                return true;
                                break;
                            }
                            break;
                        case 0x1:
                            /* 00000000 01001100 1....... ........ */
                            /* ./loongarch.decode.2:138 */
                            decode_extract_format_6(info, insn);
                            info->opc = OPC_ROTRI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x1:
                        /* 00000000 01001101 ........ ........ */
                        /* ./loongarch.decode.2:139 */
                        decode_extract_format_7(info, insn);
                        info->opc = OPC_ROTRI_D;
                        return true;
                        break;
                    }
                    break;
                case 0x4:
                    /* 00000000 010100.. ........ ........ */
                    switch ((insn >> 16) & 0x3) {
                    case 0x0:
                        /* 00000000 01010000 ........ ........ */
                        switch ((insn >> 15) & 0x1) {
                        case 0x0:
                            /* 00000000 01010000 0....... ........ */
                            switch ((insn >> 14) & 0x1) {
                            case 0x0:
                                /* 00000000 01010000 00...... ........ */
                                decode_extract_format_56(info, insn);
                                switch ((insn >> 13) & 0x1) {
                                case 0x1:
                                    /* 00000000 01010000 001..... ........ */
                                    /* ./loongarch.decode.2:556 */
                                    info->opc = OPC_RCRI_B;
                                    return true;
                                    break;
                                }
                                break;
                            case 0x1:
                                /* 00000000 01010000 01...... ........ */
                                /* ./loongarch.decode.2:557 */
                                decode_extract_format_57(info, insn);
                                info->opc = OPC_RCRI_H;
                                return true;
                                break;
                            }
                            break;
                        case 0x1:
                            /* 00000000 01010000 1....... ........ */
                            /* ./loongarch.decode.2:558 */
                            decode_extract_format_6(info, insn);
                            info->opc = OPC_RCRI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x1:
                        /* 00000000 01010001 ........ ........ */
                        /* ./loongarch.decode.2:559 */
                        decode_extract_format_7(info, insn);
                        info->opc = OPC_RCRI_D;
                        return true;
                        break;
                    }
                    break;
                case 0x5:
                    /* 00000000 010101.. ........ ........ */
                    switch (insn & 0x0003001f) {
                    case 0x00000000:
                        /* 00000000 01010100 ........ ...00000 */
                        decode_extract_format_58(info, insn);
                        switch ((insn >> 13) & 0x7) {
                        case 0x1:
                            /* 00000000 01010100 001..... ...00000 */
                            /* ./loongarch.decode.2:560 */
                            info->opc = OPC_X86SLLI_B;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000001:
                        /* 00000000 01010100 ........ ...00001 */
                        decode_extract_format_59(info, insn);
                        switch ((insn >> 14) & 0x3) {
                        case 0x1:
                            /* 00000000 01010100 01...... ...00001 */
                            /* ./loongarch.decode.2:561 */
                            info->opc = OPC_X86SLLI_H;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000002:
                        /* 00000000 01010100 ........ ...00010 */
                        decode_extract_format_60(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01010100 1....... ...00010 */
                            /* ./loongarch.decode.2:562 */
                            info->opc = OPC_X86SLLI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000004:
                        /* 00000000 01010100 ........ ...00100 */
                        decode_extract_format_58(info, insn);
                        switch ((insn >> 13) & 0x7) {
                        case 0x1:
                            /* 00000000 01010100 001..... ...00100 */
                            /* ./loongarch.decode.2:564 */
                            info->opc = OPC_X86SRLI_B;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000005:
                        /* 00000000 01010100 ........ ...00101 */
                        decode_extract_format_59(info, insn);
                        switch ((insn >> 14) & 0x3) {
                        case 0x1:
                            /* 00000000 01010100 01...... ...00101 */
                            /* ./loongarch.decode.2:565 */
                            info->opc = OPC_X86SRLI_H;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000006:
                        /* 00000000 01010100 ........ ...00110 */
                        decode_extract_format_60(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01010100 1....... ...00110 */
                            /* ./loongarch.decode.2:566 */
                            info->opc = OPC_X86SRLI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000008:
                        /* 00000000 01010100 ........ ...01000 */
                        decode_extract_format_58(info, insn);
                        switch ((insn >> 13) & 0x7) {
                        case 0x1:
                            /* 00000000 01010100 001..... ...01000 */
                            /* ./loongarch.decode.2:568 */
                            info->opc = OPC_X86SRAI_B;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000009:
                        /* 00000000 01010100 ........ ...01001 */
                        decode_extract_format_59(info, insn);
                        switch ((insn >> 14) & 0x3) {
                        case 0x1:
                            /* 00000000 01010100 01...... ...01001 */
                            /* ./loongarch.decode.2:569 */
                            info->opc = OPC_X86SRAI_H;
                            return true;
                            break;
                        }
                        break;
                    case 0x0000000a:
                        /* 00000000 01010100 ........ ...01010 */
                        decode_extract_format_60(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01010100 1....... ...01010 */
                            /* ./loongarch.decode.2:570 */
                            info->opc = OPC_X86SRAI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x0000000c:
                        /* 00000000 01010100 ........ ...01100 */
                        decode_extract_format_58(info, insn);
                        switch ((insn >> 13) & 0x7) {
                        case 0x1:
                            /* 00000000 01010100 001..... ...01100 */
                            /* ./loongarch.decode.2:572 */
                            info->opc = OPC_X86ROTRI_B;
                            return true;
                            break;
                        }
                        break;
                    case 0x0000000d:
                        /* 00000000 01010100 ........ ...01101 */
                        decode_extract_format_59(info, insn);
                        switch ((insn >> 14) & 0x3) {
                        case 0x1:
                            /* 00000000 01010100 01...... ...01101 */
                            /* ./loongarch.decode.2:573 */
                            info->opc = OPC_X86ROTRI_H;
                            return true;
                            break;
                        }
                        break;
                    case 0x0000000e:
                        /* 00000000 01010100 ........ ...01110 */
                        decode_extract_format_60(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01010100 1....... ...01110 */
                            /* ./loongarch.decode.2:574 */
                            info->opc = OPC_X86ROTRI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000010:
                        /* 00000000 01010100 ........ ...10000 */
                        decode_extract_format_58(info, insn);
                        switch ((insn >> 13) & 0x7) {
                        case 0x1:
                            /* 00000000 01010100 001..... ...10000 */
                            /* ./loongarch.decode.2:576 */
                            info->opc = OPC_X86RCRI_B;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000011:
                        /* 00000000 01010100 ........ ...10001 */
                        decode_extract_format_59(info, insn);
                        switch ((insn >> 14) & 0x3) {
                        case 0x1:
                            /* 00000000 01010100 01...... ...10001 */
                            /* ./loongarch.decode.2:577 */
                            info->opc = OPC_X86RCRI_H;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000012:
                        /* 00000000 01010100 ........ ...10010 */
                        decode_extract_format_60(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01010100 1....... ...10010 */
                            /* ./loongarch.decode.2:578 */
                            info->opc = OPC_X86RCRI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000014:
                        /* 00000000 01010100 ........ ...10100 */
                        decode_extract_format_58(info, insn);
                        switch ((insn >> 13) & 0x7) {
                        case 0x1:
                            /* 00000000 01010100 001..... ...10100 */
                            /* ./loongarch.decode.2:580 */
                            info->opc = OPC_X86ROTLI_B;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000015:
                        /* 00000000 01010100 ........ ...10101 */
                        decode_extract_format_59(info, insn);
                        switch ((insn >> 14) & 0x3) {
                        case 0x1:
                            /* 00000000 01010100 01...... ...10101 */
                            /* ./loongarch.decode.2:581 */
                            info->opc = OPC_X86ROTLI_H;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000016:
                        /* 00000000 01010100 ........ ...10110 */
                        decode_extract_format_60(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01010100 1....... ...10110 */
                            /* ./loongarch.decode.2:582 */
                            info->opc = OPC_X86ROTLI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000018:
                        /* 00000000 01010100 ........ ...11000 */
                        decode_extract_format_58(info, insn);
                        switch ((insn >> 13) & 0x7) {
                        case 0x1:
                            /* 00000000 01010100 001..... ...11000 */
                            /* ./loongarch.decode.2:584 */
                            info->opc = OPC_X86RCLI_B;
                            return true;
                            break;
                        }
                        break;
                    case 0x00000019:
                        /* 00000000 01010100 ........ ...11001 */
                        decode_extract_format_59(info, insn);
                        switch ((insn >> 14) & 0x3) {
                        case 0x1:
                            /* 00000000 01010100 01...... ...11001 */
                            /* ./loongarch.decode.2:585 */
                            info->opc = OPC_X86RCLI_H;
                            return true;
                            break;
                        }
                        break;
                    case 0x0000001a:
                        /* 00000000 01010100 ........ ...11010 */
                        decode_extract_format_60(info, insn);
                        switch ((insn >> 15) & 0x1) {
                        case 0x1:
                            /* 00000000 01010100 1....... ...11010 */
                            /* ./loongarch.decode.2:586 */
                            info->opc = OPC_X86RCLI_W;
                            return true;
                            break;
                        }
                        break;
                    case 0x00010003:
                        /* 00000000 01010101 ........ ...00011 */
                        /* ./loongarch.decode.2:563 */
                        decode_extract_format_61(info, insn);
                        info->opc = OPC_X86SLLI_D;
                        return true;
                        break;
                    case 0x00010007:
                        /* 00000000 01010101 ........ ...00111 */
                        /* ./loongarch.decode.2:567 */
                        decode_extract_format_61(info, insn);
                        info->opc = OPC_X86SRLI_D;
                        return true;
                        break;
                    case 0x0001000b:
                        /* 00000000 01010101 ........ ...01011 */
                        /* ./loongarch.decode.2:571 */
                        decode_extract_format_61(info, insn);
                        info->opc = OPC_X86SRAI_D;
                        return true;
                        break;
                    case 0x0001000f:
                        /* 00000000 01010101 ........ ...01111 */
                        /* ./loongarch.decode.2:575 */
                        decode_extract_format_61(info, insn);
                        info->opc = OPC_X86ROTRI_D;
                        return true;
                        break;
                    case 0x00010013:
                        /* 00000000 01010101 ........ ...10011 */
                        /* ./loongarch.decode.2:579 */
                        decode_extract_format_61(info, insn);
                        info->opc = OPC_X86RCRI_D;
                        return true;
                        break;
                    case 0x00010017:
                        /* 00000000 01010101 ........ ...10111 */
                        /* ./loongarch.decode.2:583 */
                        decode_extract_format_61(info, insn);
                        info->opc = OPC_X86ROTLI_D;
                        return true;
                        break;
                    case 0x0001001b:
                        /* 00000000 01010101 ........ ...11011 */
                        /* ./loongarch.decode.2:587 */
                        decode_extract_format_61(info, insn);
                        info->opc = OPC_X86RCLI_D;
                        return true;
                        break;
                    }
                    break;
                case 0x6:
                    /* 00000000 010110.. ........ ........ */
                    /* ./loongarch.decode.2:588 */
                    decode_extract_format_62(info, insn);
                    info->opc = OPC_X86SETTAG;
                    return true;
                    break;
                case 0x7:
                    /* 00000000 010111.. ........ ........ */
                    decode_extract_format_63(info, insn);
                    switch ((insn >> 5) & 0x1f) {
                    case 0x0:
                        /* 00000000 010111.. ......00 000..... */
                        /* ./loongarch.decode.2:589 */
                        info->opc = OPC_X86MFFLAG;
                        return true;
                        break;
                    case 0x1:
                        /* 00000000 010111.. ......00 001..... */
                        /* ./loongarch.decode.2:590 */
                        info->opc = OPC_X86MTFLAG;
                        return true;
                        break;
                    case 0x2:
                        /* 00000000 010111.. ......00 010..... */
                        /* ./loongarch.decode.2:591 */
                        info->opc = OPC_ARMMFFLAG;
                        return true;
                        break;
                    case 0x3:
                        /* 00000000 010111.. ......00 011..... */
                        /* ./loongarch.decode.2:592 */
                        info->opc = OPC_ARMMTFLAG;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x1:
                /* 00000000 011..... ........ ........ */
                decode_extract_format_8(info, insn);
                switch ((insn >> 15) & 0x1) {
                case 0x0:
                    /* 00000000 011..... 0....... ........ */
                    /* ./loongarch.decode.2:140 */
                    info->opc = OPC_BSTRINS_W;
                    return true;
                    break;
                case 0x1:
                    /* 00000000 011..... 1....... ........ */
                    /* ./loongarch.decode.2:141 */
                    info->opc = OPC_BSTRPICK_W;
                    return true;
                    break;
                }
                break;
            }
            break;
        case 0x2:
            /* 00000000 10...... ........ ........ */
            /* ./loongarch.decode.2:142 */
            decode_extract_format_9(info, insn);
            info->opc = OPC_BSTRINS_D;
            return true;
            break;
        case 0x3:
            /* 00000000 11...... ........ ........ */
            /* ./loongarch.decode.2:143 */
            decode_extract_format_9(info, insn);
            info->opc = OPC_BSTRPICK_D;
            return true;
            break;
        case 0x4:
            /* 00000001 00...... ........ ........ */
            switch ((insn >> 15) & 0x7f) {
            case 0x1:
                /* 00000001 00000000 1....... ........ */
                /* ./loongarch.decode.2:144 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FADD_S;
                return true;
                break;
            case 0x2:
                /* 00000001 00000001 0....... ........ */
                /* ./loongarch.decode.2:145 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FADD_D;
                return true;
                break;
            case 0x5:
                /* 00000001 00000010 1....... ........ */
                /* ./loongarch.decode.2:146 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FSUB_S;
                return true;
                break;
            case 0x6:
                /* 00000001 00000011 0....... ........ */
                /* ./loongarch.decode.2:147 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FSUB_D;
                return true;
                break;
            case 0x9:
                /* 00000001 00000100 1....... ........ */
                /* ./loongarch.decode.2:148 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMUL_S;
                return true;
                break;
            case 0xa:
                /* 00000001 00000101 0....... ........ */
                /* ./loongarch.decode.2:149 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMUL_D;
                return true;
                break;
            case 0xd:
                /* 00000001 00000110 1....... ........ */
                /* ./loongarch.decode.2:150 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FDIV_S;
                return true;
                break;
            case 0xe:
                /* 00000001 00000111 0....... ........ */
                /* ./loongarch.decode.2:151 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FDIV_D;
                return true;
                break;
            case 0x11:
                /* 00000001 00001000 1....... ........ */
                /* ./loongarch.decode.2:152 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMAX_S;
                return true;
                break;
            case 0x12:
                /* 00000001 00001001 0....... ........ */
                /* ./loongarch.decode.2:153 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMAX_D;
                return true;
                break;
            case 0x15:
                /* 00000001 00001010 1....... ........ */
                /* ./loongarch.decode.2:154 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMIN_S;
                return true;
                break;
            case 0x16:
                /* 00000001 00001011 0....... ........ */
                /* ./loongarch.decode.2:155 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMIN_D;
                return true;
                break;
            case 0x19:
                /* 00000001 00001100 1....... ........ */
                /* ./loongarch.decode.2:156 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMAXA_S;
                return true;
                break;
            case 0x1a:
                /* 00000001 00001101 0....... ........ */
                /* ./loongarch.decode.2:157 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMAXA_D;
                return true;
                break;
            case 0x1d:
                /* 00000001 00001110 1....... ........ */
                /* ./loongarch.decode.2:158 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMINA_S;
                return true;
                break;
            case 0x1e:
                /* 00000001 00001111 0....... ........ */
                /* ./loongarch.decode.2:159 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FMINA_D;
                return true;
                break;
            case 0x21:
                /* 00000001 00010000 1....... ........ */
                /* ./loongarch.decode.2:160 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FSCALEB_S;
                return true;
                break;
            case 0x22:
                /* 00000001 00010001 0....... ........ */
                /* ./loongarch.decode.2:161 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FSCALEB_D;
                return true;
                break;
            case 0x25:
                /* 00000001 00010010 1....... ........ */
                /* ./loongarch.decode.2:162 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FCOPYSIGN_S;
                return true;
                break;
            case 0x26:
                /* 00000001 00010011 0....... ........ */
                /* ./loongarch.decode.2:163 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FCOPYSIGN_D;
                return true;
                break;
            case 0x28:
                /* 00000001 00010100 0....... ........ */
                decode_extract_format_11(info, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x1:
                    /* 00000001 00010100 000001.. ........ */
                    /* ./loongarch.decode.2:164 */
                    info->opc = OPC_FABS_S;
                    return true;
                    break;
                case 0x2:
                    /* 00000001 00010100 000010.. ........ */
                    /* ./loongarch.decode.2:165 */
                    info->opc = OPC_FABS_D;
                    return true;
                    break;
                case 0x5:
                    /* 00000001 00010100 000101.. ........ */
                    /* ./loongarch.decode.2:166 */
                    info->opc = OPC_FNEG_S;
                    return true;
                    break;
                case 0x6:
                    /* 00000001 00010100 000110.. ........ */
                    /* ./loongarch.decode.2:167 */
                    info->opc = OPC_FNEG_D;
                    return true;
                    break;
                case 0x9:
                    /* 00000001 00010100 001001.. ........ */
                    /* ./loongarch.decode.2:168 */
                    info->opc = OPC_FLOGB_S;
                    return true;
                    break;
                case 0xa:
                    /* 00000001 00010100 001010.. ........ */
                    /* ./loongarch.decode.2:169 */
                    info->opc = OPC_FLOGB_D;
                    return true;
                    break;
                case 0xd:
                    /* 00000001 00010100 001101.. ........ */
                    /* ./loongarch.decode.2:170 */
                    info->opc = OPC_FCLASS_S;
                    return true;
                    break;
                case 0xe:
                    /* 00000001 00010100 001110.. ........ */
                    /* ./loongarch.decode.2:171 */
                    info->opc = OPC_FCLASS_D;
                    return true;
                    break;
                case 0x11:
                    /* 00000001 00010100 010001.. ........ */
                    /* ./loongarch.decode.2:172 */
                    info->opc = OPC_FSQRT_S;
                    return true;
                    break;
                case 0x12:
                    /* 00000001 00010100 010010.. ........ */
                    /* ./loongarch.decode.2:173 */
                    info->opc = OPC_FSQRT_D;
                    return true;
                    break;
                case 0x15:
                    /* 00000001 00010100 010101.. ........ */
                    /* ./loongarch.decode.2:174 */
                    info->opc = OPC_FRECIP_S;
                    return true;
                    break;
                case 0x16:
                    /* 00000001 00010100 010110.. ........ */
                    /* ./loongarch.decode.2:175 */
                    info->opc = OPC_FRECIP_D;
                    return true;
                    break;
                case 0x19:
                    /* 00000001 00010100 011001.. ........ */
                    /* ./loongarch.decode.2:176 */
                    info->opc = OPC_FRSQRT_S;
                    return true;
                    break;
                case 0x1a:
                    /* 00000001 00010100 011010.. ........ */
                    /* ./loongarch.decode.2:177 */
                    info->opc = OPC_FRSQRT_D;
                    return true;
                    break;
                }
                break;
            case 0x29:
                /* 00000001 00010100 1....... ........ */
                switch ((insn >> 10) & 0x1f) {
                case 0x5:
                    /* 00000001 00010100 100101.. ........ */
                    /* ./loongarch.decode.2:178 */
                    decode_extract_format_11(info, insn);
                    info->opc = OPC_FMOV_S;
                    return true;
                    break;
                case 0x6:
                    /* 00000001 00010100 100110.. ........ */
                    /* ./loongarch.decode.2:179 */
                    decode_extract_format_11(info, insn);
                    info->opc = OPC_FMOV_D;
                    return true;
                    break;
                case 0x9:
                    /* 00000001 00010100 101001.. ........ */
                    /* ./loongarch.decode.2:180 */
                    decode_extract_format_12(info, insn);
                    info->opc = OPC_MOVGR2FR_W;
                    return true;
                    break;
                case 0xa:
                    /* 00000001 00010100 101010.. ........ */
                    /* ./loongarch.decode.2:181 */
                    decode_extract_format_12(info, insn);
                    info->opc = OPC_MOVGR2FR_D;
                    return true;
                    break;
                case 0xb:
                    /* 00000001 00010100 101011.. ........ */
                    /* ./loongarch.decode.2:182 */
                    decode_extract_format_12(info, insn);
                    info->opc = OPC_MOVGR2FRH_W;
                    return true;
                    break;
                case 0xd:
                    /* 00000001 00010100 101101.. ........ */
                    /* ./loongarch.decode.2:183 */
                    decode_extract_format_13(info, insn);
                    info->opc = OPC_MOVFR2GR_S;
                    return true;
                    break;
                case 0xe:
                    /* 00000001 00010100 101110.. ........ */
                    /* ./loongarch.decode.2:184 */
                    decode_extract_format_13(info, insn);
                    info->opc = OPC_MOVFR2GR_D;
                    return true;
                    break;
                case 0xf:
                    /* 00000001 00010100 101111.. ........ */
                    /* ./loongarch.decode.2:185 */
                    decode_extract_format_13(info, insn);
                    info->opc = OPC_MOVFRH2GR_S;
                    return true;
                    break;
                case 0x10:
                    /* 00000001 00010100 110000.. ........ */
                    /* ./loongarch.decode.2:186 */
                    decode_extract_format_14(info, insn);
                    info->opc = OPC_MOVGR2FCSR;
                    return true;
                    break;
                case 0x12:
                    /* 00000001 00010100 110010.. ........ */
                    /* ./loongarch.decode.2:187 */
                    decode_extract_format_15(info, insn);
                    info->opc = OPC_MOVFCSR2GR;
                    return true;
                    break;
                case 0x14:
                    /* 00000001 00010100 110100.. ........ */
                    decode_extract_format_16(info, insn);
                    switch ((insn >> 3) & 0x3) {
                    case 0x0:
                        /* 00000001 00010100 110100.. ...00... */
                        /* ./loongarch.decode.2:188 */
                        info->opc = OPC_MOVFR2CF;
                        return true;
                        break;
                    }
                    break;
                case 0x15:
                    /* 00000001 00010100 110101.. ........ */
                    decode_extract_format_17(info, insn);
                    switch ((insn >> 8) & 0x3) {
                    case 0x0:
                        /* 00000001 00010100 11010100 ........ */
                        /* ./loongarch.decode.2:189 */
                        info->opc = OPC_MOVCF2FR;
                        return true;
                        break;
                    }
                    break;
                case 0x16:
                    /* 00000001 00010100 110110.. ........ */
                    decode_extract_format_18(info, insn);
                    switch ((insn >> 3) & 0x3) {
                    case 0x0:
                        /* 00000001 00010100 110110.. ...00... */
                        /* ./loongarch.decode.2:190 */
                        info->opc = OPC_MOVGR2CF;
                        return true;
                        break;
                    }
                    break;
                case 0x17:
                    /* 00000001 00010100 110111.. ........ */
                    decode_extract_format_19(info, insn);
                    switch ((insn >> 8) & 0x3) {
                    case 0x0:
                        /* 00000001 00010100 11011100 ........ */
                        /* ./loongarch.decode.2:191 */
                        info->opc = OPC_MOVCF2GR;
                        return true;
                        break;
                    }
                    break;
                case 0x18:
                    /* 00000001 00010100 111000.. ........ */
                    /* ./loongarch.decode.2:593 */
                    decode_extract_format_11(info, insn);
                    info->opc = OPC_FCVT_LD_D;
                    return true;
                    break;
                case 0x19:
                    /* 00000001 00010100 111001.. ........ */
                    /* ./loongarch.decode.2:594 */
                    decode_extract_format_11(info, insn);
                    info->opc = OPC_FCVT_UD_D;
                    return true;
                    break;
                }
                break;
            case 0x2a:
                /* 00000001 00010101 0....... ........ */
                /* ./loongarch.decode.2:595 */
                decode_extract_format_10(info, insn);
                info->opc = OPC_FCVT_D_LC;
                return true;
                break;
            case 0x32:
                /* 00000001 00011001 0....... ........ */
                decode_extract_format_11(info, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x6:
                    /* 00000001 00011001 000110.. ........ */
                    /* ./loongarch.decode.2:192 */
                    info->opc = OPC_FCVT_S_D;
                    return true;
                    break;
                case 0x9:
                    /* 00000001 00011001 001001.. ........ */
                    /* ./loongarch.decode.2:193 */
                    info->opc = OPC_FCVT_D_S;
                    return true;
                    break;
                }
                break;
            case 0x34:
                /* 00000001 00011010 0....... ........ */
                decode_extract_format_11(info, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x1:
                    /* 00000001 00011010 000001.. ........ */
                    /* ./loongarch.decode.2:194 */
                    info->opc = OPC_FTINTRM_W_S;
                    return true;
                    break;
                case 0x2:
                    /* 00000001 00011010 000010.. ........ */
                    /* ./loongarch.decode.2:195 */
                    info->opc = OPC_FTINTRM_W_D;
                    return true;
                    break;
                case 0x9:
                    /* 00000001 00011010 001001.. ........ */
                    /* ./loongarch.decode.2:196 */
                    info->opc = OPC_FTINTRM_L_S;
                    return true;
                    break;
                case 0xa:
                    /* 00000001 00011010 001010.. ........ */
                    /* ./loongarch.decode.2:197 */
                    info->opc = OPC_FTINTRM_L_D;
                    return true;
                    break;
                case 0x11:
                    /* 00000001 00011010 010001.. ........ */
                    /* ./loongarch.decode.2:198 */
                    info->opc = OPC_FTINTRP_W_S;
                    return true;
                    break;
                case 0x12:
                    /* 00000001 00011010 010010.. ........ */
                    /* ./loongarch.decode.2:199 */
                    info->opc = OPC_FTINTRP_W_D;
                    return true;
                    break;
                case 0x19:
                    /* 00000001 00011010 011001.. ........ */
                    /* ./loongarch.decode.2:200 */
                    info->opc = OPC_FTINTRP_L_S;
                    return true;
                    break;
                case 0x1a:
                    /* 00000001 00011010 011010.. ........ */
                    /* ./loongarch.decode.2:201 */
                    info->opc = OPC_FTINTRP_L_D;
                    return true;
                    break;
                }
                break;
            case 0x35:
                /* 00000001 00011010 1....... ........ */
                decode_extract_format_11(info, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x1:
                    /* 00000001 00011010 100001.. ........ */
                    /* ./loongarch.decode.2:202 */
                    info->opc = OPC_FTINTRZ_W_S;
                    return true;
                    break;
                case 0x2:
                    /* 00000001 00011010 100010.. ........ */
                    /* ./loongarch.decode.2:203 */
                    info->opc = OPC_FTINTRZ_W_D;
                    return true;
                    break;
                case 0x9:
                    /* 00000001 00011010 101001.. ........ */
                    /* ./loongarch.decode.2:204 */
                    info->opc = OPC_FTINTRZ_L_S;
                    return true;
                    break;
                case 0xa:
                    /* 00000001 00011010 101010.. ........ */
                    /* ./loongarch.decode.2:205 */
                    info->opc = OPC_FTINTRZ_L_D;
                    return true;
                    break;
                case 0x11:
                    /* 00000001 00011010 110001.. ........ */
                    /* ./loongarch.decode.2:206 */
                    info->opc = OPC_FTINTRNE_W_S;
                    return true;
                    break;
                case 0x12:
                    /* 00000001 00011010 110010.. ........ */
                    /* ./loongarch.decode.2:207 */
                    info->opc = OPC_FTINTRNE_W_D;
                    return true;
                    break;
                case 0x19:
                    /* 00000001 00011010 111001.. ........ */
                    /* ./loongarch.decode.2:208 */
                    info->opc = OPC_FTINTRNE_L_S;
                    return true;
                    break;
                case 0x1a:
                    /* 00000001 00011010 111010.. ........ */
                    /* ./loongarch.decode.2:209 */
                    info->opc = OPC_FTINTRNE_L_D;
                    return true;
                    break;
                }
                break;
            case 0x36:
                /* 00000001 00011011 0....... ........ */
                decode_extract_format_11(info, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x1:
                    /* 00000001 00011011 000001.. ........ */
                    /* ./loongarch.decode.2:210 */
                    info->opc = OPC_FTINT_W_S;
                    return true;
                    break;
                case 0x2:
                    /* 00000001 00011011 000010.. ........ */
                    /* ./loongarch.decode.2:211 */
                    info->opc = OPC_FTINT_W_D;
                    return true;
                    break;
                case 0x9:
                    /* 00000001 00011011 001001.. ........ */
                    /* ./loongarch.decode.2:212 */
                    info->opc = OPC_FTINT_L_S;
                    return true;
                    break;
                case 0xa:
                    /* 00000001 00011011 001010.. ........ */
                    /* ./loongarch.decode.2:213 */
                    info->opc = OPC_FTINT_L_D;
                    return true;
                    break;
                }
                break;
            case 0x3a:
                /* 00000001 00011101 0....... ........ */
                decode_extract_format_11(info, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x4:
                    /* 00000001 00011101 000100.. ........ */
                    /* ./loongarch.decode.2:214 */
                    info->opc = OPC_FFINT_S_W;
                    return true;
                    break;
                case 0x6:
                    /* 00000001 00011101 000110.. ........ */
                    /* ./loongarch.decode.2:215 */
                    info->opc = OPC_FFINT_S_L;
                    return true;
                    break;
                case 0x8:
                    /* 00000001 00011101 001000.. ........ */
                    /* ./loongarch.decode.2:216 */
                    info->opc = OPC_FFINT_D_W;
                    return true;
                    break;
                case 0xa:
                    /* 00000001 00011101 001010.. ........ */
                    /* ./loongarch.decode.2:217 */
                    info->opc = OPC_FFINT_D_L;
                    return true;
                    break;
                }
                break;
            case 0x3c:
                /* 00000001 00011110 0....... ........ */
                decode_extract_format_11(info, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x11:
                    /* 00000001 00011110 010001.. ........ */
                    /* ./loongarch.decode.2:218 */
                    info->opc = OPC_FRINT_S;
                    return true;
                    break;
                case 0x12:
                    /* 00000001 00011110 010010.. ........ */
                    /* ./loongarch.decode.2:219 */
                    info->opc = OPC_FRINT_D;
                    return true;
                    break;
                }
                break;
            }
            break;
        case 0x8:
            /* 00000010 00...... ........ ........ */
            /* ./loongarch.decode.2:220 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_SLTI;
            return true;
            break;
        case 0x9:
            /* 00000010 01...... ........ ........ */
            /* ./loongarch.decode.2:221 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_SLTUI;
            return true;
            break;
        case 0xa:
            /* 00000010 10...... ........ ........ */
            /* ./loongarch.decode.2:222 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_ADDI_W;
            return true;
            break;
        case 0xb:
            /* 00000010 11...... ........ ........ */
            /* ./loongarch.decode.2:223 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_ADDI_D;
            return true;
            break;
        case 0xc:
            /* 00000011 00...... ........ ........ */
            /* ./loongarch.decode.2:224 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_LU52I_D;
            return true;
            break;
        case 0xd:
            /* 00000011 01...... ........ ........ */
            /* ./loongarch.decode.2:225 */
            decode_extract_format_21(info, insn);
            info->opc = OPC_ANDI;
            return true;
            break;
        case 0xe:
            /* 00000011 10...... ........ ........ */
            /* ./loongarch.decode.2:226 */
            decode_extract_format_21(info, insn);
            info->opc = OPC_ORI;
            return true;
            break;
        case 0xf:
            /* 00000011 11...... ........ ........ */
            /* ./loongarch.decode.2:227 */
            decode_extract_format_21(info, insn);
            info->opc = OPC_XORI;
            return true;
            break;
        }
        break;
    case 0x1:
        /* 000001.. ........ ........ ........ */
        switch ((insn >> 24) & 0x3) {
        case 0x0:
            /* 00000100 ........ ........ ........ */
            if ((insn & 0x000003e0) == 0x00000000) {
                /* 00000100 ........ ......00 000..... */
                /* ./loongarch.decode.2:229 */
                decode_extract_format_22(info, insn);
                info->opc = OPC_CSRRD;
                return true;
            }
            if ((insn & 0x000003e0) == 0x00000020) {
                /* 00000100 ........ ......00 001..... */
                /* ./loongarch.decode.2:230 */
                decode_extract_format_22(info, insn);
                info->opc = OPC_CSRWR;
                return true;
            }
            /* ./loongarch.decode.2:231 */
            decode_extract_format_23(info, insn);
            info->opc = OPC_CSRXCHG;
            return true;
            break;
        case 0x1:
            /* 00000101 ........ ........ ........ */
            if ((insn & 0x000003e0) == 0x00000000) {
                /* 00000101 ........ ......00 000..... */
                /* ./loongarch.decode.2:597 */
                decode_extract_format_22(info, insn);
                info->opc = OPC_GCSRRD;
                return true;
            }
            if ((insn & 0x000003e0) == 0x00000020) {
                /* 00000101 ........ ......00 001..... */
                /* ./loongarch.decode.2:598 */
                decode_extract_format_22(info, insn);
                info->opc = OPC_GCSRWR;
                return true;
            }
            /* ./loongarch.decode.2:599 */
            decode_extract_format_23(info, insn);
            info->opc = OPC_GCSRXCHG;
            return true;
            break;
        case 0x2:
            /* 00000110 ........ ........ ........ */
            switch ((insn >> 22) & 0x3) {
            case 0x0:
                /* 00000110 00...... ........ ........ */
                /* ./loongarch.decode.2:233 */
                decode_extract_format_24(info, insn);
                info->opc = OPC_CACOP;
                return true;
                break;
            case 0x1:
                /* 00000110 01...... ........ ........ */
                switch ((insn >> 18) & 0xf) {
                case 0x0:
                    /* 00000110 010000.. ........ ........ */
                    /* ./loongarch.decode.2:234 */
                    decode_extract_format_25(info, insn);
                    info->opc = OPC_LDDIR;
                    return true;
                    break;
                case 0x1:
                    /* 00000110 010001.. ........ ........ */
                    decode_extract_format_26(info, insn);
                    switch (insn & 0x0000001f) {
                    case 0x00000000:
                        /* 00000110 010001.. ........ ...00000 */
                        /* ./loongarch.decode.2:235 */
                        info->opc = OPC_LDPTE;
                        return true;
                        break;
                    }
                    break;
                case 0x2:
                    /* 00000110 010010.. ........ ........ */
                    switch ((insn >> 15) & 0x7) {
                    case 0x0:
                        /* 00000110 01001000 0....... ........ */
                        switch ((insn >> 10) & 0x1f) {
                        case 0x0:
                            /* 00000110 01001000 000000.. ........ */
                            /* ./loongarch.decode.2:236 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_IOCSRRD_B;
                            return true;
                            break;
                        case 0x1:
                            /* 00000110 01001000 000001.. ........ */
                            /* ./loongarch.decode.2:237 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_IOCSRRD_H;
                            return true;
                            break;
                        case 0x2:
                            /* 00000110 01001000 000010.. ........ */
                            /* ./loongarch.decode.2:238 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_IOCSRRD_W;
                            return true;
                            break;
                        case 0x3:
                            /* 00000110 01001000 000011.. ........ */
                            /* ./loongarch.decode.2:239 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_IOCSRRD_D;
                            return true;
                            break;
                        case 0x4:
                            /* 00000110 01001000 000100.. ........ */
                            /* ./loongarch.decode.2:240 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_IOCSRWR_B;
                            return true;
                            break;
                        case 0x5:
                            /* 00000110 01001000 000101.. ........ */
                            /* ./loongarch.decode.2:241 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_IOCSRWR_H;
                            return true;
                            break;
                        case 0x6:
                            /* 00000110 01001000 000110.. ........ */
                            /* ./loongarch.decode.2:242 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_IOCSRWR_W;
                            return true;
                            break;
                        case 0x7:
                            /* 00000110 01001000 000111.. ........ */
                            /* ./loongarch.decode.2:243 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_IOCSRWR_D;
                            return true;
                            break;
                        case 0x8:
                            /* 00000110 01001000 001000.. ........ */
                            decode_extract_format_27(info, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00100000 00000000 */
                                /* ./loongarch.decode.2:244 */
                                info->opc = OPC_TLBCLR;
                                return true;
                                break;
                            case 0x00000001:
                                /* 00000110 01001000 00100000 00000001 */
                                /* ./loongarch.decode.2:601 */
                                info->opc = OPC_GTLBCLR;
                                return true;
                                break;
                            }
                            break;
                        case 0x9:
                            /* 00000110 01001000 001001.. ........ */
                            decode_extract_format_27(info, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00100100 00000000 */
                                /* ./loongarch.decode.2:245 */
                                info->opc = OPC_TLBFLUSH;
                                return true;
                                break;
                            case 0x00000001:
                                /* 00000110 01001000 00100100 00000001 */
                                /* ./loongarch.decode.2:602 */
                                info->opc = OPC_GTLBFLUSH;
                                return true;
                                break;
                            }
                            break;
                        case 0xa:
                            /* 00000110 01001000 001010.. ........ */
                            decode_extract_format_27(info, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00101000 00000000 */
                                /* ./loongarch.decode.2:246 */
                                info->opc = OPC_TLBSRCH;
                                return true;
                                break;
                            case 0x00000001:
                                /* 00000110 01001000 00101000 00000001 */
                                /* ./loongarch.decode.2:603 */
                                info->opc = OPC_GTLBSRCH;
                                return true;
                                break;
                            }
                            break;
                        case 0xb:
                            /* 00000110 01001000 001011.. ........ */
                            decode_extract_format_27(info, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00101100 00000000 */
                                /* ./loongarch.decode.2:247 */
                                info->opc = OPC_TLBRD;
                                return true;
                                break;
                            case 0x00000001:
                                /* 00000110 01001000 00101100 00000001 */
                                /* ./loongarch.decode.2:604 */
                                info->opc = OPC_GTLBRD;
                                return true;
                                break;
                            }
                            break;
                        case 0xc:
                            /* 00000110 01001000 001100.. ........ */
                            decode_extract_format_27(info, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00110000 00000000 */
                                /* ./loongarch.decode.2:248 */
                                info->opc = OPC_TLBWR;
                                return true;
                                break;
                            case 0x00000001:
                                /* 00000110 01001000 00110000 00000001 */
                                /* ./loongarch.decode.2:605 */
                                info->opc = OPC_GTLBWR;
                                return true;
                                break;
                            }
                            break;
                        case 0xd:
                            /* 00000110 01001000 001101.. ........ */
                            decode_extract_format_27(info, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00110100 00000000 */
                                /* ./loongarch.decode.2:249 */
                                info->opc = OPC_TLBFILL;
                                return true;
                                break;
                            case 0x00000001:
                                /* 00000110 01001000 00110100 00000001 */
                                /* ./loongarch.decode.2:606 */
                                info->opc = OPC_GTLBFILL;
                                return true;
                                break;
                            }
                            break;
                        case 0xe:
                            /* 00000110 01001000 001110.. ........ */
                            decode_extract_format_27(info, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00111000 00000000 */
                                /* ./loongarch.decode.2:250 */
                                info->opc = OPC_ERTN;
                                return true;
                                break;
                            }
                            break;
                        }
                        break;
                    case 0x1:
                        /* 00000110 01001000 1....... ........ */
                        /* ./loongarch.decode.2:251 */
                        decode_extract_format_28(info, insn);
                        info->opc = OPC_IDLE;
                        return true;
                        break;
                    case 0x2:
                        /* 00000110 01001001 0....... ........ */
                        switch ((insn >> 10) & 0x1f) {
                        case 0x8:
                            /* 00000110 01001001 001000.. ........ */
                            /* ./loongarch.decode.2:607 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_SCFGR_W;
                            return true;
                            break;
                        case 0x9:
                            /* 00000110 01001001 001001.. ........ */
                            /* ./loongarch.decode.2:608 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_SCFGR_D;
                            return true;
                            break;
                        case 0xa:
                            /* 00000110 01001001 001010.. ........ */
                            /* ./loongarch.decode.2:609 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_SCFGW_W;
                            return true;
                            break;
                        case 0xb:
                            /* 00000110 01001001 001011.. ........ */
                            /* ./loongarch.decode.2:610 */
                            decode_extract_format_0(info, insn);
                            info->opc = OPC_SCFGW_D;
                            return true;
                            break;
                        case 0xc:
                            /* 00000110 01001001 001100.. ........ */
                            decode_extract_format_27(info, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001001 00110000 00000000 */
                                /* ./loongarch.decode.2:611 */
                                info->opc = OPC_SNOP;
                                return true;
                                break;
                            }
                            break;
                        }
                        break;
                    case 0x3:
                        /* 00000110 01001001 1....... ........ */
                        /* ./loongarch.decode.2:252 */
                        decode_extract_format_29(info, insn);
                        info->opc = OPC_INVTLB;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            }
            break;
        }
        break;
    case 0x2:
        /* 000010.. ........ ........ ........ */
        decode_extract_format_30(info, insn);
        switch ((insn >> 20) & 0x3f) {
        case 0x1:
            /* 00001000 0001.... ........ ........ */
            /* ./loongarch.decode.2:253 */
            info->opc = OPC_FMADD_S;
            return true;
            break;
        case 0x2:
            /* 00001000 0010.... ........ ........ */
            /* ./loongarch.decode.2:254 */
            info->opc = OPC_FMADD_D;
            return true;
            break;
        case 0x5:
            /* 00001000 0101.... ........ ........ */
            /* ./loongarch.decode.2:255 */
            info->opc = OPC_FMSUB_S;
            return true;
            break;
        case 0x6:
            /* 00001000 0110.... ........ ........ */
            /* ./loongarch.decode.2:256 */
            info->opc = OPC_FMSUB_D;
            return true;
            break;
        case 0x9:
            /* 00001000 1001.... ........ ........ */
            /* ./loongarch.decode.2:257 */
            info->opc = OPC_FNMADD_S;
            return true;
            break;
        case 0xa:
            /* 00001000 1010.... ........ ........ */
            /* ./loongarch.decode.2:258 */
            info->opc = OPC_FNMADD_D;
            return true;
            break;
        case 0xd:
            /* 00001000 1101.... ........ ........ */
            /* ./loongarch.decode.2:259 */
            info->opc = OPC_FNMSUB_S;
            return true;
            break;
        case 0xe:
            /* 00001000 1110.... ........ ........ */
            /* ./loongarch.decode.2:260 */
            info->opc = OPC_FNMSUB_D;
            return true;
            break;
        }
        break;
    case 0x3:
        /* 000011.. ........ ........ ........ */
        switch ((insn >> 18) & 0xff) {
        case 0x4:
            /* 00001100 000100.. ........ ........ */
            decode_extract_format_31(info, insn);
            switch (insn & 0x00038018) {
            case 0x00000000:
                /* 00001100 00010000 0....... ...00... */
                /* ./loongarch.decode.2:261 */
                info->opc = OPC_FCMP_CAF_S;
                return true;
                break;
            case 0x00008000:
                /* 00001100 00010000 1....... ...00... */
                /* ./loongarch.decode.2:262 */
                info->opc = OPC_FCMP_SAF_S;
                return true;
                break;
            case 0x00010000:
                /* 00001100 00010001 0....... ...00... */
                /* ./loongarch.decode.2:263 */
                info->opc = OPC_FCMP_CLT_S;
                return true;
                break;
            case 0x00018000:
                /* 00001100 00010001 1....... ...00... */
                /* ./loongarch.decode.2:264 */
                info->opc = OPC_FCMP_STL_S;
                return true;
                break;
            case 0x00020000:
                /* 00001100 00010010 0....... ...00... */
                /* ./loongarch.decode.2:265 */
                info->opc = OPC_FCMP_CEQ_S;
                return true;
                break;
            case 0x00028000:
                /* 00001100 00010010 1....... ...00... */
                /* ./loongarch.decode.2:266 */
                info->opc = OPC_FCMP_SEQ_S;
                return true;
                break;
            case 0x00030000:
                /* 00001100 00010011 0....... ...00... */
                /* ./loongarch.decode.2:267 */
                info->opc = OPC_FCMP_CLE_S;
                return true;
                break;
            case 0x00038000:
                /* 00001100 00010011 1....... ...00... */
                /* ./loongarch.decode.2:268 */
                info->opc = OPC_FCMP_SLE_S;
                return true;
                break;
            }
            break;
        case 0x5:
            /* 00001100 000101.. ........ ........ */
            decode_extract_format_31(info, insn);
            switch (insn & 0x00038018) {
            case 0x00000000:
                /* 00001100 00010100 0....... ...00... */
                /* ./loongarch.decode.2:269 */
                info->opc = OPC_FCMP_CUN_S;
                return true;
                break;
            case 0x00008000:
                /* 00001100 00010100 1....... ...00... */
                /* ./loongarch.decode.2:270 */
                info->opc = OPC_FCMP_SUN_S;
                return true;
                break;
            case 0x00010000:
                /* 00001100 00010101 0....... ...00... */
                /* ./loongarch.decode.2:271 */
                info->opc = OPC_FCMP_CULT_S;
                return true;
                break;
            case 0x00018000:
                /* 00001100 00010101 1....... ...00... */
                /* ./loongarch.decode.2:272 */
                info->opc = OPC_FCMP_SULT_S;
                return true;
                break;
            case 0x00020000:
                /* 00001100 00010110 0....... ...00... */
                /* ./loongarch.decode.2:273 */
                info->opc = OPC_FCMP_CUEQ_S;
                return true;
                break;
            case 0x00028000:
                /* 00001100 00010110 1....... ...00... */
                /* ./loongarch.decode.2:274 */
                info->opc = OPC_FCMP_SUEQ_S;
                return true;
                break;
            case 0x00030000:
                /* 00001100 00010111 0....... ...00... */
                /* ./loongarch.decode.2:275 */
                info->opc = OPC_FCMP_CULE_S;
                return true;
                break;
            case 0x00038000:
                /* 00001100 00010111 1....... ...00... */
                /* ./loongarch.decode.2:276 */
                info->opc = OPC_FCMP_SULE_S;
                return true;
                break;
            }
            break;
        case 0x6:
            /* 00001100 000110.. ........ ........ */
            decode_extract_format_31(info, insn);
            switch (insn & 0x00038018) {
            case 0x00000000:
                /* 00001100 00011000 0....... ...00... */
                /* ./loongarch.decode.2:277 */
                info->opc = OPC_FCMP_CNE_S;
                return true;
                break;
            case 0x00008000:
                /* 00001100 00011000 1....... ...00... */
                /* ./loongarch.decode.2:278 */
                info->opc = OPC_FCMP_SNE_S;
                return true;
                break;
            case 0x00020000:
                /* 00001100 00011010 0....... ...00... */
                /* ./loongarch.decode.2:279 */
                info->opc = OPC_FCMP_COR_S;
                return true;
                break;
            case 0x00028000:
                /* 00001100 00011010 1....... ...00... */
                /* ./loongarch.decode.2:280 */
                info->opc = OPC_FCMP_SOR_S;
                return true;
                break;
            }
            break;
        case 0x7:
            /* 00001100 000111.. ........ ........ */
            decode_extract_format_31(info, insn);
            switch (insn & 0x00038018) {
            case 0x00000000:
                /* 00001100 00011100 0....... ...00... */
                /* ./loongarch.decode.2:281 */
                info->opc = OPC_FCMP_CUNE_S;
                return true;
                break;
            case 0x00008000:
                /* 00001100 00011100 1....... ...00... */
                /* ./loongarch.decode.2:282 */
                info->opc = OPC_FCMP_SUNE_S;
                return true;
                break;
            }
            break;
        case 0x8:
            /* 00001100 001000.. ........ ........ */
            decode_extract_format_31(info, insn);
            switch (insn & 0x00038018) {
            case 0x00000000:
                /* 00001100 00100000 0....... ...00... */
                /* ./loongarch.decode.2:283 */
                info->opc = OPC_FCMP_CAF_D;
                return true;
                break;
            case 0x00008000:
                /* 00001100 00100000 1....... ...00... */
                /* ./loongarch.decode.2:284 */
                info->opc = OPC_FCMP_SAF_D;
                return true;
                break;
            case 0x00010000:
                /* 00001100 00100001 0....... ...00... */
                /* ./loongarch.decode.2:285 */
                info->opc = OPC_FCMP_CLT_D;
                return true;
                break;
            case 0x00018000:
                /* 00001100 00100001 1....... ...00... */
                /* ./loongarch.decode.2:286 */
                info->opc = OPC_FCMP_STL_D;
                return true;
                break;
            case 0x00020000:
                /* 00001100 00100010 0....... ...00... */
                /* ./loongarch.decode.2:287 */
                info->opc = OPC_FCMP_CEQ_D;
                return true;
                break;
            case 0x00028000:
                /* 00001100 00100010 1....... ...00... */
                /* ./loongarch.decode.2:288 */
                info->opc = OPC_FCMP_SEQ_D;
                return true;
                break;
            case 0x00030000:
                /* 00001100 00100011 0....... ...00... */
                /* ./loongarch.decode.2:289 */
                info->opc = OPC_FCMP_CLE_D;
                return true;
                break;
            case 0x00038000:
                /* 00001100 00100011 1....... ...00... */
                /* ./loongarch.decode.2:290 */
                info->opc = OPC_FCMP_SLE_D;
                return true;
                break;
            }
            break;
        case 0x9:
            /* 00001100 001001.. ........ ........ */
            decode_extract_format_31(info, insn);
            switch (insn & 0x00038018) {
            case 0x00000000:
                /* 00001100 00100100 0....... ...00... */
                /* ./loongarch.decode.2:291 */
                info->opc = OPC_FCMP_CUN_D;
                return true;
                break;
            case 0x00008000:
                /* 00001100 00100100 1....... ...00... */
                /* ./loongarch.decode.2:292 */
                info->opc = OPC_FCMP_SUN_D;
                return true;
                break;
            case 0x00010000:
                /* 00001100 00100101 0....... ...00... */
                /* ./loongarch.decode.2:293 */
                info->opc = OPC_FCMP_CULT_D;
                return true;
                break;
            case 0x00018000:
                /* 00001100 00100101 1....... ...00... */
                /* ./loongarch.decode.2:294 */
                info->opc = OPC_FCMP_SULT_D;
                return true;
                break;
            case 0x00020000:
                /* 00001100 00100110 0....... ...00... */
                /* ./loongarch.decode.2:295 */
                info->opc = OPC_FCMP_CUEQ_D;
                return true;
                break;
            case 0x00028000:
                /* 00001100 00100110 1....... ...00... */
                /* ./loongarch.decode.2:296 */
                info->opc = OPC_FCMP_SUEQ_D;
                return true;
                break;
            case 0x00030000:
                /* 00001100 00100111 0....... ...00... */
                /* ./loongarch.decode.2:297 */
                info->opc = OPC_FCMP_CULE_D;
                return true;
                break;
            case 0x00038000:
                /* 00001100 00100111 1....... ...00... */
                /* ./loongarch.decode.2:298 */
                info->opc = OPC_FCMP_SULE_D;
                return true;
                break;
            }
            break;
        case 0xa:
            /* 00001100 001010.. ........ ........ */
            decode_extract_format_31(info, insn);
            switch (insn & 0x00038018) {
            case 0x00000000:
                /* 00001100 00101000 0....... ...00... */
                /* ./loongarch.decode.2:299 */
                info->opc = OPC_FCMP_CNE_D;
                return true;
                break;
            case 0x00008000:
                /* 00001100 00101000 1....... ...00... */
                /* ./loongarch.decode.2:300 */
                info->opc = OPC_FCMP_SNE_D;
                return true;
                break;
            case 0x00020000:
                /* 00001100 00101010 0....... ...00... */
                /* ./loongarch.decode.2:301 */
                info->opc = OPC_FCMP_COR_D;
                return true;
                break;
            case 0x00028000:
                /* 00001100 00101010 1....... ...00... */
                /* ./loongarch.decode.2:302 */
                info->opc = OPC_FCMP_SOR_D;
                return true;
                break;
            }
            break;
        case 0xb:
            /* 00001100 001011.. ........ ........ */
            decode_extract_format_31(info, insn);
            switch (insn & 0x00038018) {
            case 0x00000000:
                /* 00001100 00101100 0....... ...00... */
                /* ./loongarch.decode.2:303 */
                info->opc = OPC_FCMP_CUNE_D;
                return true;
                break;
            case 0x00008000:
                /* 00001100 00101100 1....... ...00... */
                /* ./loongarch.decode.2:304 */
                info->opc = OPC_FCMP_SUNE_D;
                return true;
                break;
            }
            break;
        case 0x40:
            /* 00001101 000000.. ........ ........ */
            /* ./loongarch.decode.2:305 */
            decode_extract_format_32(info, insn);
            info->opc = OPC_FSEL;
            return true;
            break;
        }
        break;
    case 0x4:
        /* 000100.. ........ ........ ........ */
        /* ./loongarch.decode.2:306 */
        decode_extract_format_33(info, insn);
        info->opc = OPC_ADDU16I_D;
        return true;
        break;
    case 0x5:
        /* 000101.. ........ ........ ........ */
        decode_extract_format_34(info, insn);
        switch ((insn >> 25) & 0x1) {
        case 0x0:
            /* 0001010. ........ ........ ........ */
            /* ./loongarch.decode.2:307 */
            info->opc = OPC_LU12I_W;
            return true;
            break;
        case 0x1:
            /* 0001011. ........ ........ ........ */
            /* ./loongarch.decode.2:308 */
            info->opc = OPC_LU32I_D;
            return true;
            break;
        }
        break;
    case 0x6:
        /* 000110.. ........ ........ ........ */
        decode_extract_format_34(info, insn);
        switch ((insn >> 25) & 0x1) {
        case 0x0:
            /* 0001100. ........ ........ ........ */
            /* ./loongarch.decode.2:309 */
            info->opc = OPC_PCADDI;
            return true;
            break;
        case 0x1:
            /* 0001101. ........ ........ ........ */
            /* ./loongarch.decode.2:310 */
            info->opc = OPC_PCALAU12I;
            return true;
            break;
        }
        break;
    case 0x7:
        /* 000111.. ........ ........ ........ */
        decode_extract_format_34(info, insn);
        switch ((insn >> 25) & 0x1) {
        case 0x0:
            /* 0001110. ........ ........ ........ */
            /* ./loongarch.decode.2:311 */
            info->opc = OPC_PCADDU12I;
            return true;
            break;
        case 0x1:
            /* 0001111. ........ ........ ........ */
            /* ./loongarch.decode.2:312 */
            info->opc = OPC_PCADDU18I;
            return true;
            break;
        }
        break;
    case 0x8:
        /* 001000.. ........ ........ ........ */
        decode_extract_format_35(info, insn);
        switch ((insn >> 24) & 0x3) {
        case 0x0:
            /* 00100000 ........ ........ ........ */
            /* ./loongarch.decode.2:313 */
            info->opc = OPC_LL_W;
            return true;
            break;
        case 0x1:
            /* 00100001 ........ ........ ........ */
            /* ./loongarch.decode.2:314 */
            info->opc = OPC_SC_W;
            return true;
            break;
        case 0x2:
            /* 00100010 ........ ........ ........ */
            /* ./loongarch.decode.2:315 */
            info->opc = OPC_LL_D;
            return true;
            break;
        case 0x3:
            /* 00100011 ........ ........ ........ */
            /* ./loongarch.decode.2:316 */
            info->opc = OPC_SC_D;
            return true;
            break;
        }
        break;
    case 0x9:
        /* 001001.. ........ ........ ........ */
        decode_extract_format_35(info, insn);
        switch ((insn >> 24) & 0x3) {
        case 0x0:
            /* 00100100 ........ ........ ........ */
            /* ./loongarch.decode.2:317 */
            info->opc = OPC_LDPTR_W;
            return true;
            break;
        case 0x1:
            /* 00100101 ........ ........ ........ */
            /* ./loongarch.decode.2:318 */
            info->opc = OPC_STPTR_W;
            return true;
            break;
        case 0x2:
            /* 00100110 ........ ........ ........ */
            /* ./loongarch.decode.2:319 */
            info->opc = OPC_LDPTR_D;
            return true;
            break;
        case 0x3:
            /* 00100111 ........ ........ ........ */
            /* ./loongarch.decode.2:320 */
            info->opc = OPC_STPTR_D;
            return true;
            break;
        }
        break;
    case 0xa:
        /* 001010.. ........ ........ ........ */
        switch ((insn >> 22) & 0xf) {
        case 0x0:
            /* 00101000 00...... ........ ........ */
            /* ./loongarch.decode.2:321 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_LD_B;
            return true;
            break;
        case 0x1:
            /* 00101000 01...... ........ ........ */
            /* ./loongarch.decode.2:322 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_LD_H;
            return true;
            break;
        case 0x2:
            /* 00101000 10...... ........ ........ */
            /* ./loongarch.decode.2:323 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_LD_W;
            return true;
            break;
        case 0x3:
            /* 00101000 11...... ........ ........ */
            /* ./loongarch.decode.2:324 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_LD_D;
            return true;
            break;
        case 0x4:
            /* 00101001 00...... ........ ........ */
            /* ./loongarch.decode.2:325 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_ST_B;
            return true;
            break;
        case 0x5:
            /* 00101001 01...... ........ ........ */
            /* ./loongarch.decode.2:326 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_ST_H;
            return true;
            break;
        case 0x6:
            /* 00101001 10...... ........ ........ */
            /* ./loongarch.decode.2:327 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_ST_W;
            return true;
            break;
        case 0x7:
            /* 00101001 11...... ........ ........ */
            /* ./loongarch.decode.2:328 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_ST_D;
            return true;
            break;
        case 0x8:
            /* 00101010 00...... ........ ........ */
            /* ./loongarch.decode.2:329 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_LD_BU;
            return true;
            break;
        case 0x9:
            /* 00101010 01...... ........ ........ */
            /* ./loongarch.decode.2:330 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_LD_HU;
            return true;
            break;
        case 0xa:
            /* 00101010 10...... ........ ........ */
            /* ./loongarch.decode.2:331 */
            decode_extract_format_20(info, insn);
            info->opc = OPC_LD_WU;
            return true;
            break;
        case 0xb:
            /* 00101010 11...... ........ ........ */
            /* ./loongarch.decode.2:332 */
            decode_extract_format_36(info, insn);
            info->opc = OPC_PRELD;
            return true;
            break;
        case 0xc:
            /* 00101011 00...... ........ ........ */
            /* ./loongarch.decode.2:333 */
            decode_extract_format_37(info, insn);
            info->opc = OPC_FLD_S;
            return true;
            break;
        case 0xd:
            /* 00101011 01...... ........ ........ */
            /* ./loongarch.decode.2:334 */
            decode_extract_format_37(info, insn);
            info->opc = OPC_FST_S;
            return true;
            break;
        case 0xe:
            /* 00101011 10...... ........ ........ */
            /* ./loongarch.decode.2:335 */
            decode_extract_format_37(info, insn);
            info->opc = OPC_FLD_D;
            return true;
            break;
        case 0xf:
            /* 00101011 11...... ........ ........ */
            /* ./loongarch.decode.2:336 */
            decode_extract_format_37(info, insn);
            info->opc = OPC_FST_D;
            return true;
            break;
        }
        break;
    case 0xb:
        /* 001011.. ........ ........ ........ */
        decode_extract_format_20(info, insn);
        switch ((insn >> 22) & 0xf) {
        case 0x8:
            /* 00101110 00...... ........ ........ */
            /* ./loongarch.decode.2:612 */
            info->opc = OPC_LDL_W;
            return true;
            break;
        case 0x9:
            /* 00101110 01...... ........ ........ */
            /* ./loongarch.decode.2:613 */
            info->opc = OPC_LDR_W;
            return true;
            break;
        case 0xa:
            /* 00101110 10...... ........ ........ */
            /* ./loongarch.decode.2:614 */
            info->opc = OPC_LDL_D;
            return true;
            break;
        case 0xb:
            /* 00101110 11...... ........ ........ */
            /* ./loongarch.decode.2:615 */
            info->opc = OPC_LDR_D;
            return true;
            break;
        case 0xc:
            /* 00101111 00...... ........ ........ */
            /* ./loongarch.decode.2:616 */
            info->opc = OPC_STL_W;
            return true;
            break;
        case 0xd:
            /* 00101111 01...... ........ ........ */
            /* ./loongarch.decode.2:617 */
            info->opc = OPC_STR_W;
            return true;
            break;
        case 0xe:
            /* 00101111 10...... ........ ........ */
            /* ./loongarch.decode.2:618 */
            info->opc = OPC_STL_D;
            return true;
            break;
        case 0xf:
            /* 00101111 11...... ........ ........ */
            /* ./loongarch.decode.2:619 */
            info->opc = OPC_STR_D;
            return true;
            break;
        }
        break;
    case 0xe:
        /* 001110.. ........ ........ ........ */
        switch ((insn >> 15) & 0x7ff) {
        case 0x0:
            /* 00111000 00000000 0....... ........ */
            /* ./loongarch.decode.2:337 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDX_B;
            return true;
            break;
        case 0x8:
            /* 00111000 00000100 0....... ........ */
            /* ./loongarch.decode.2:338 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDX_H;
            return true;
            break;
        case 0x10:
            /* 00111000 00001000 0....... ........ */
            /* ./loongarch.decode.2:339 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDX_W;
            return true;
            break;
        case 0x18:
            /* 00111000 00001100 0....... ........ */
            /* ./loongarch.decode.2:340 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDX_D;
            return true;
            break;
        case 0x20:
            /* 00111000 00010000 0....... ........ */
            /* ./loongarch.decode.2:341 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STX_B;
            return true;
            break;
        case 0x28:
            /* 00111000 00010100 0....... ........ */
            /* ./loongarch.decode.2:342 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STX_H;
            return true;
            break;
        case 0x30:
            /* 00111000 00011000 0....... ........ */
            /* ./loongarch.decode.2:343 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STX_W;
            return true;
            break;
        case 0x38:
            /* 00111000 00011100 0....... ........ */
            /* ./loongarch.decode.2:344 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STX_D;
            return true;
            break;
        case 0x40:
            /* 00111000 00100000 0....... ........ */
            /* ./loongarch.decode.2:345 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDX_BU;
            return true;
            break;
        case 0x48:
            /* 00111000 00100100 0....... ........ */
            /* ./loongarch.decode.2:346 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDX_HU;
            return true;
            break;
        case 0x50:
            /* 00111000 00101000 0....... ........ */
            /* ./loongarch.decode.2:347 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDX_WU;
            return true;
            break;
        case 0x58:
            /* 00111000 00101100 0....... ........ */
            /* ./loongarch.decode.2:348 */
            decode_extract_format_38(info, insn);
            info->opc = OPC_PRELDX;
            return true;
            break;
        case 0x60:
            /* 00111000 00110000 0....... ........ */
            /* ./loongarch.decode.2:349 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FLDX_S;
            return true;
            break;
        case 0x68:
            /* 00111000 00110100 0....... ........ */
            /* ./loongarch.decode.2:350 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FLDX_D;
            return true;
            break;
        case 0x70:
            /* 00111000 00111000 0....... ........ */
            /* ./loongarch.decode.2:351 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FSTX_S;
            return true;
            break;
        case 0x78:
            /* 00111000 00111100 0....... ........ */
            /* ./loongarch.decode.2:352 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FSTX_D;
            return true;
            break;
        case 0xc0:
            /* 00111000 01100000 0....... ........ */
            /* ./loongarch.decode.2:353 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMSWAP_W;
            return true;
            break;
        case 0xc1:
            /* 00111000 01100000 1....... ........ */
            /* ./loongarch.decode.2:354 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMSWAP_D;
            return true;
            break;
        case 0xc2:
            /* 00111000 01100001 0....... ........ */
            /* ./loongarch.decode.2:355 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMADD_W;
            return true;
            break;
        case 0xc3:
            /* 00111000 01100001 1....... ........ */
            /* ./loongarch.decode.2:356 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMADD_D;
            return true;
            break;
        case 0xc4:
            /* 00111000 01100010 0....... ........ */
            /* ./loongarch.decode.2:357 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMAND_W;
            return true;
            break;
        case 0xc5:
            /* 00111000 01100010 1....... ........ */
            /* ./loongarch.decode.2:358 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMAND_D;
            return true;
            break;
        case 0xc6:
            /* 00111000 01100011 0....... ........ */
            /* ./loongarch.decode.2:359 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMOR_W;
            return true;
            break;
        case 0xc7:
            /* 00111000 01100011 1....... ........ */
            /* ./loongarch.decode.2:360 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMOR_D;
            return true;
            break;
        case 0xc8:
            /* 00111000 01100100 0....... ........ */
            /* ./loongarch.decode.2:361 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMXOR_W;
            return true;
            break;
        case 0xc9:
            /* 00111000 01100100 1....... ........ */
            /* ./loongarch.decode.2:362 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMXOR_D;
            return true;
            break;
        case 0xca:
            /* 00111000 01100101 0....... ........ */
            /* ./loongarch.decode.2:363 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMAX_W;
            return true;
            break;
        case 0xcb:
            /* 00111000 01100101 1....... ........ */
            /* ./loongarch.decode.2:364 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMAX_D;
            return true;
            break;
        case 0xcc:
            /* 00111000 01100110 0....... ........ */
            /* ./loongarch.decode.2:365 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMIN_W;
            return true;
            break;
        case 0xcd:
            /* 00111000 01100110 1....... ........ */
            /* ./loongarch.decode.2:366 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMIN_D;
            return true;
            break;
        case 0xce:
            /* 00111000 01100111 0....... ........ */
            /* ./loongarch.decode.2:367 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMAX_WU;
            return true;
            break;
        case 0xcf:
            /* 00111000 01100111 1....... ........ */
            /* ./loongarch.decode.2:368 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMAX_DU;
            return true;
            break;
        case 0xd0:
            /* 00111000 01101000 0....... ........ */
            /* ./loongarch.decode.2:369 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMIN_WU;
            return true;
            break;
        case 0xd1:
            /* 00111000 01101000 1....... ........ */
            /* ./loongarch.decode.2:370 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMIN_DU;
            return true;
            break;
        case 0xd2:
            /* 00111000 01101001 0....... ........ */
            /* ./loongarch.decode.2:371 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMSWAP_DB_W;
            return true;
            break;
        case 0xd3:
            /* 00111000 01101001 1....... ........ */
            /* ./loongarch.decode.2:372 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMSWAP_DB_D;
            return true;
            break;
        case 0xd4:
            /* 00111000 01101010 0....... ........ */
            /* ./loongarch.decode.2:373 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMADD_DB_W;
            return true;
            break;
        case 0xd5:
            /* 00111000 01101010 1....... ........ */
            /* ./loongarch.decode.2:374 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMADD_DB_D;
            return true;
            break;
        case 0xd6:
            /* 00111000 01101011 0....... ........ */
            /* ./loongarch.decode.2:375 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMAND_DB_W;
            return true;
            break;
        case 0xd7:
            /* 00111000 01101011 1....... ........ */
            /* ./loongarch.decode.2:376 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMAND_DB_D;
            return true;
            break;
        case 0xd8:
            /* 00111000 01101100 0....... ........ */
            /* ./loongarch.decode.2:377 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMOR_DB_W;
            return true;
            break;
        case 0xd9:
            /* 00111000 01101100 1....... ........ */
            /* ./loongarch.decode.2:378 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMOR_DB_D;
            return true;
            break;
        case 0xda:
            /* 00111000 01101101 0....... ........ */
            /* ./loongarch.decode.2:379 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMXOR_DB_W;
            return true;
            break;
        case 0xdb:
            /* 00111000 01101101 1....... ........ */
            /* ./loongarch.decode.2:380 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMXOR_DB_D;
            return true;
            break;
        case 0xdc:
            /* 00111000 01101110 0....... ........ */
            /* ./loongarch.decode.2:381 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMAX_DB_W;
            return true;
            break;
        case 0xdd:
            /* 00111000 01101110 1....... ........ */
            /* ./loongarch.decode.2:382 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMAX_DB_D;
            return true;
            break;
        case 0xde:
            /* 00111000 01101111 0....... ........ */
            /* ./loongarch.decode.2:383 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMIN_DB_W;
            return true;
            break;
        case 0xdf:
            /* 00111000 01101111 1....... ........ */
            /* ./loongarch.decode.2:384 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMIN_DB_D;
            return true;
            break;
        case 0xe0:
            /* 00111000 01110000 0....... ........ */
            /* ./loongarch.decode.2:385 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMAX_DB_WU;
            return true;
            break;
        case 0xe1:
            /* 00111000 01110000 1....... ........ */
            /* ./loongarch.decode.2:386 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMAX_DB_DU;
            return true;
            break;
        case 0xe2:
            /* 00111000 01110001 0....... ........ */
            /* ./loongarch.decode.2:387 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMIN_DB_WU;
            return true;
            break;
        case 0xe3:
            /* 00111000 01110001 1....... ........ */
            /* ./loongarch.decode.2:388 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_AMMIN_DB_DU;
            return true;
            break;
        case 0xe4:
            /* 00111000 01110010 0....... ........ */
            /* ./loongarch.decode.2:389 */
            decode_extract_format_40(info, insn);
            info->opc = OPC_DBAR;
            return true;
            break;
        case 0xe5:
            /* 00111000 01110010 1....... ........ */
            /* ./loongarch.decode.2:390 */
            decode_extract_format_41(info, insn);
            info->opc = OPC_IBAR;
            return true;
            break;
        case 0xe8:
            /* 00111000 01110100 0....... ........ */
            /* ./loongarch.decode.2:391 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FLDGT_S;
            return true;
            break;
        case 0xe9:
            /* 00111000 01110100 1....... ........ */
            /* ./loongarch.decode.2:392 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FLDGT_D;
            return true;
            break;
        case 0xea:
            /* 00111000 01110101 0....... ........ */
            /* ./loongarch.decode.2:393 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FLDLE_S;
            return true;
            break;
        case 0xeb:
            /* 00111000 01110101 1....... ........ */
            /* ./loongarch.decode.2:394 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FLDLE_D;
            return true;
            break;
        case 0xec:
            /* 00111000 01110110 0....... ........ */
            /* ./loongarch.decode.2:395 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FSTGT_S;
            return true;
            break;
        case 0xed:
            /* 00111000 01110110 1....... ........ */
            /* ./loongarch.decode.2:396 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FSTGT_D;
            return true;
            break;
        case 0xee:
            /* 00111000 01110111 0....... ........ */
            /* ./loongarch.decode.2:397 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FSTLE_S;
            return true;
            break;
        case 0xef:
            /* 00111000 01110111 1....... ........ */
            /* ./loongarch.decode.2:398 */
            decode_extract_format_39(info, insn);
            info->opc = OPC_FSTLE_D;
            return true;
            break;
        case 0xf0:
            /* 00111000 01111000 0....... ........ */
            /* ./loongarch.decode.2:399 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDGT_B;
            return true;
            break;
        case 0xf1:
            /* 00111000 01111000 1....... ........ */
            /* ./loongarch.decode.2:400 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDGT_H;
            return true;
            break;
        case 0xf2:
            /* 00111000 01111001 0....... ........ */
            /* ./loongarch.decode.2:401 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDGT_W;
            return true;
            break;
        case 0xf3:
            /* 00111000 01111001 1....... ........ */
            /* ./loongarch.decode.2:402 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDGT_D;
            return true;
            break;
        case 0xf4:
            /* 00111000 01111010 0....... ........ */
            /* ./loongarch.decode.2:403 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDLE_B;
            return true;
            break;
        case 0xf5:
            /* 00111000 01111010 1....... ........ */
            /* ./loongarch.decode.2:404 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDLE_H;
            return true;
            break;
        case 0xf6:
            /* 00111000 01111011 0....... ........ */
            /* ./loongarch.decode.2:405 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDLE_W;
            return true;
            break;
        case 0xf7:
            /* 00111000 01111011 1....... ........ */
            /* ./loongarch.decode.2:406 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_LDLE_D;
            return true;
            break;
        case 0xf8:
            /* 00111000 01111100 0....... ........ */
            /* ./loongarch.decode.2:407 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STGT_B;
            return true;
            break;
        case 0xf9:
            /* 00111000 01111100 1....... ........ */
            /* ./loongarch.decode.2:408 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STGT_H;
            return true;
            break;
        case 0xfa:
            /* 00111000 01111101 0....... ........ */
            /* ./loongarch.decode.2:409 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STGT_W;
            return true;
            break;
        case 0xfb:
            /* 00111000 01111101 1....... ........ */
            /* ./loongarch.decode.2:410 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STGT_D;
            return true;
            break;
        case 0xfc:
            /* 00111000 01111110 0....... ........ */
            /* ./loongarch.decode.2:411 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STLE_B;
            return true;
            break;
        case 0xfd:
            /* 00111000 01111110 1....... ........ */
            /* ./loongarch.decode.2:412 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STLE_H;
            return true;
            break;
        case 0xfe:
            /* 00111000 01111111 0....... ........ */
            /* ./loongarch.decode.2:413 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STLE_W;
            return true;
            break;
        case 0xff:
            /* 00111000 01111111 1....... ........ */
            /* ./loongarch.decode.2:414 */
            decode_extract_format_4(info, insn);
            info->opc = OPC_STLE_D;
            return true;
            break;
        }
        break;
    case 0x10:
        /* 010000.. ........ ........ ........ */
        /* ./loongarch.decode.2:415 */
        decode_extract_format_42(info, insn);
        info->opc = OPC_BEQZ;
        return true;
        break;
    case 0x11:
        /* 010001.. ........ ........ ........ */
        /* ./loongarch.decode.2:416 */
        decode_extract_format_42(info, insn);
        info->opc = OPC_BNEZ;
        return true;
        break;
    case 0x12:
        /* 010010.. ........ ........ ........ */
        switch ((insn >> 8) & 0x3) {
        case 0x0:
            /* 010010.. ........ ......00 ........ */
            /* ./loongarch.decode.2:417 */
            decode_extract_format_43(info, insn);
            info->opc = OPC_BCEQZ;
            return true;
            break;
        case 0x1:
            /* 010010.. ........ ......01 ........ */
            /* ./loongarch.decode.2:418 */
            decode_extract_format_43(info, insn);
            info->opc = OPC_BCNEZ;
            return true;
            break;
        case 0x2:
            /* 010010.. ........ ......10 ........ */
            decode_extract_format_64(info, insn);
            switch ((insn >> 5) & 0x7) {
            case 0x0:
                /* 010010.. ........ ......10 000..... */
                /* ./loongarch.decode.2:620 */
                info->opc = OPC_JISCR0;
                return true;
                break;
            }
            break;
        case 0x3:
            /* 010010.. ........ ......11 ........ */
            decode_extract_format_64(info, insn);
            switch ((insn >> 5) & 0x7) {
            case 0x0:
                /* 010010.. ........ ......11 000..... */
                /* ./loongarch.decode.2:621 */
                info->opc = OPC_JISCR1;
                return true;
                break;
            }
            break;
        }
        break;
    case 0x13:
        /* 010011.. ........ ........ ........ */
        /* ./loongarch.decode.2:419 */
        decode_extract_format_44(info, insn);
        info->opc = OPC_JIRL;
        return true;
        break;
    case 0x14:
        /* 010100.. ........ ........ ........ */
        /* ./loongarch.decode.2:420 */
        decode_extract_format_45(info, insn);
        info->opc = OPC_B;
        return true;
        break;
    case 0x15:
        /* 010101.. ........ ........ ........ */
        /* ./loongarch.decode.2:421 */
        decode_extract_format_45(info, insn);
        info->opc = OPC_BL;
        return true;
        break;
    case 0x16:
        /* 010110.. ........ ........ ........ */
        /* ./loongarch.decode.2:422 */
        decode_extract_format_44(info, insn);
        info->opc = OPC_BEQ;
        return true;
        break;
    case 0x17:
        /* 010111.. ........ ........ ........ */
        /* ./loongarch.decode.2:423 */
        decode_extract_format_44(info, insn);
        info->opc = OPC_BNE;
        return true;
        break;
    case 0x18:
        /* 011000.. ........ ........ ........ */
        /* ./loongarch.decode.2:424 */
        decode_extract_format_44(info, insn);
        info->opc = OPC_BLT;
        return true;
        break;
    case 0x19:
        /* 011001.. ........ ........ ........ */
        /* ./loongarch.decode.2:425 */
        decode_extract_format_44(info, insn);
        info->opc = OPC_BGE;
        return true;
        break;
    case 0x1a:
        /* 011010.. ........ ........ ........ */
        /* ./loongarch.decode.2:426 */
        decode_extract_format_44(info, insn);
        info->opc = OPC_BLTU;
        return true;
        break;
    case 0x1b:
        /* 011011.. ........ ........ ........ */
        /* ./loongarch.decode.2:427 */
        decode_extract_format_44(info, insn);
        info->opc = OPC_BGEU;
        return true;
        break;
    }
    return false;
}

void print_format_0(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_1(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->srcs_regs[1]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_10(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<fpr_name[info->dst_freg];
out<<" ";
out<<fpr_name[info->srcs_fregs[0]] <<" ";
out<<" ";
out<<fpr_name[info->srcs_fregs[1]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_11(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<fpr_name[info->dst_freg];
out<<" ";
out<<fpr_name[info->srcs_fregs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_12(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<fpr_name[info->dst_freg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_13(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<fpr_name[info->srcs_fregs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_14(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<fcsr_name[info->dst_fcsr];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_15(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<fcsr_name[info->srcs_fcsrregs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_16(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<cc_name[info->dst_cfreg];
out<<" ";
out<<fpr_name[info->srcs_fregs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_17(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<fpr_name[info->dst_freg];
out<<" ";
out<<cc_name[info->srcs_cfregs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_18(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<cc_name[info->dst_cfreg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_19(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<cc_name[info->srcs_cfregs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_2(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->srcs_regs[1]] <<" ";
out<<" ";
out<<std::dec<<info->sa;
out<<" ";
out<<std::endl;
}

void print_format_20(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->si;
out<<" ";
out<<std::endl;
}

void print_format_21(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<std::endl;
}

void print_format_22(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::dec<<info->csr;
out<<" ";
out<<std::endl;
}

void print_format_23(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->csr;
out<<" ";
out<<std::endl;
}

void print_format_24(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->code_2;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->si;
out<<" ";
out<<std::endl;
}

void print_format_25(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->level;
out<<" ";
out<<std::endl;
}

void print_format_26(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->seq;
out<<" ";
out<<std::endl;
}

void print_format_27(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::endl;
}

void print_format_28(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->level_3;
out<<" ";
out<<std::endl;
}

void print_format_29(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->op;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->srcs_regs[1]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_3(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->srcs_regs[1]] <<" ";
out<<" ";
out<<std::dec<<info->sa;
out<<" ";
out<<std::endl;
}

void print_format_30(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<fpr_name[info->dst_freg];
out<<" ";
out<<fpr_name[info->srcs_fregs[0]] <<" ";
out<<" ";
out<<fpr_name[info->srcs_fregs[1]] <<" ";
out<<" ";
out<<fpr_name[info->srcs_fregs[2]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_31(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<cc_name[info->dst_cfreg];
out<<" ";
out<<fpr_name[info->srcs_fregs[0]] <<" ";
out<<" ";
out<<fpr_name[info->srcs_fregs[1]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_32(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<fpr_name[info->dst_freg];
out<<" ";
out<<fpr_name[info->srcs_fregs[0]] <<" ";
out<<" ";
out<<fpr_name[info->srcs_fregs[1]] <<" ";
out<<" ";
out<<cc_name[info->srcs_cfregs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_33(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->si;
out<<" ";
out<<std::endl;
}

void print_format_34(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::dec<<info->si;
out<<" ";
out<<std::endl;
}

void print_format_35(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->si;
out<<" ";
out<<std::endl;
}

void print_format_36(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->hint;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->si;
out<<" ";
out<<std::endl;
}

void print_format_37(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<fpr_name[info->dst_freg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->si;
out<<" ";
out<<std::endl;
}

void print_format_38(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->hint;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->srcs_regs[1]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_39(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<fpr_name[info->dst_freg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->srcs_regs[1]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_4(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->srcs_regs[1]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_40(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->hint;
out<<" ";
out<<std::endl;
}

void print_format_41(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->hint;
out<<" ";
out<<std::endl;
}

void print_format_42(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->offs;
out<<" ";
out<<std::endl;
}

void print_format_43(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<cc_name[info->srcs_cfregs[0]] <<" ";
out<<" ";
out<<std::dec<<info->offs;
out<<" ";
out<<std::endl;
}

void print_format_44(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->offs;
out<<" ";
out<<std::endl;
}

void print_format_45(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->offs;
out<<" ";
out<<std::endl;
}

void print_format_46(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<scr_name[info->dst_sccrach];
out<<" ";
out<<std::endl;
}

void print_format_47(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<scr_name[info->sccrach_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::endl;
}

void print_format_48(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->ptr;
out<<" ";
out<<std::endl;
}

void print_format_49(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::endl;
}

void print_format_5(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->code;
out<<" ";
out<<std::endl;
}

void print_format_50(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_51(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->si;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::endl;
}

void print_format_52(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->cond;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::endl;
}

void print_format_53(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->cond;
out<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::endl;
}

void print_format_54(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->srcs_regs[1]] <<" ";
out<<" ";
out<<std::dec<<info->cond;
out<<" ";
out<<std::endl;
}

void print_format_55(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->cond;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_56(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::endl;
}

void print_format_57(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::endl;
}

void print_format_58(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_59(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_6(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<std::endl;
}

void print_format_60(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_61(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::endl;
}

void print_format_62(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<std::dec<<info->op;
out<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::endl;
}

void print_format_63(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<std::endl;
}

void print_format_64(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<std::dec<<info->offs;
out<<" ";
out<<std::endl;
}

void print_format_7(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->ui;
out<<" ";
out<<std::endl;
}

void print_format_8(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->msb;
out<<" ";
out<<std::dec<<info->lsb;
out<<" ";
out<<std::endl;
}

void print_format_9(std::ostream& out, LoongArchInsInfo *info)
{
out<<opcode_name[info->opc]<<" ";
out<<gpr_name[info->dst_reg];
out<<" ";
out<<gpr_name[info->srcs_regs[0]] <<" ";
out<<" ";
out<<std::dec<<info->msb;
out<<" ";
out<<std::dec<<info->lsb;
out<<" ";
out<<std::endl;
}

void encode_encode_format_0(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_1(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->srcs_regs[1],10,5);
}

void encode_encode_format_10(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_freg,0,5);
encode32(pinsn, info->srcs_fregs[0],5,5);
encode32(pinsn, info->srcs_fregs[1],10,5);
}

void encode_encode_format_11(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_freg,0,5);
encode32(pinsn, info->srcs_fregs[0],5,5);
}

void encode_encode_format_12(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_freg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_13(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_fregs[0],5,5);
}

void encode_encode_format_14(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_fcsr,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_15(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_fcsrregs[0],5,5);
}

void encode_encode_format_16(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_cfreg,0,3);
encode32(pinsn, info->srcs_fregs[0],5,5);
}

void encode_encode_format_17(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_freg,0,5);
encode32(pinsn, info->srcs_cfregs[0],5,3);
}

void encode_encode_format_18(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_cfreg,0,3);
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_19(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_cfregs[0],5,3);
}

void encode_encode_format_2(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->srcs_regs[1],10,5);
encode32(pinsn, info->sa,15,2);
}

void encode_encode_format_20(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->si,10,12);
}

void encode_encode_format_21(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->ui,10,12);
}

void encode_encode_format_22(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->csr,10,14);
}

void encode_encode_format_23(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->csr,10,14);
}

void encode_encode_format_24(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->code_2,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->si,10,12);
}

void encode_encode_format_25(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->level,10,8);
}

void encode_encode_format_26(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->seq,10,8);
}

void encode_encode_format_27(LoongArchInsInfo *info, uint32_t* pinsn)
{
}

void encode_encode_format_28(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->level_3,0,15);
}

void encode_encode_format_29(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->op,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->srcs_regs[1],10,5);
}

void encode_encode_format_3(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->srcs_regs[1],10,5);
encode32(pinsn, info->sa,15,3);
}

void encode_encode_format_30(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_freg,0,5);
encode32(pinsn, info->srcs_fregs[0],5,5);
encode32(pinsn, info->srcs_fregs[1],10,5);
encode32(pinsn, info->srcs_fregs[2],15,5);
}

void encode_encode_format_31(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_cfreg,0,3);
encode32(pinsn, info->srcs_fregs[0],5,5);
encode32(pinsn, info->srcs_fregs[1],10,5);
}

void encode_encode_format_32(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_freg,0,5);
encode32(pinsn, info->srcs_fregs[0],5,5);
encode32(pinsn, info->srcs_fregs[1],10,5);
encode32(pinsn, info->srcs_cfregs[0],15,3);
}

void encode_encode_format_33(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->si,10,16);
}

void encode_encode_format_34(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->si,5,20);
}

void encode_encode_format_35(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->si,10,14);
}

void encode_encode_format_36(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->hint,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->si,10,12);
}

void encode_encode_format_37(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_freg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->si,10,12);
}

void encode_encode_format_38(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->hint,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->srcs_regs[1],10,5);
}

void encode_encode_format_39(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_freg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->srcs_regs[1],10,5);
}

void encode_encode_format_4(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->srcs_regs[1],10,5);
}

void encode_encode_format_40(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->hint,0,15);
}

void encode_encode_format_41(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->hint,0,15);
}

void encode_encode_format_42(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->srcs_regs[0],5,5);
u_int8_t start_and_len[4];
start_and_len[0]=10;
start_and_len[1]=16;
start_and_len[2]=0;
start_and_len[3]=5;
encode32_muti_field(pinsn, info->offs, start_and_len, 4);
}

void encode_encode_format_43(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->srcs_cfregs[0],5,3);
u_int8_t start_and_len[4];
start_and_len[0]=10;
start_and_len[1]=16;
start_and_len[2]=0;
start_and_len[3]=5;
encode32_muti_field(pinsn, info->offs, start_and_len, 4);
}

void encode_encode_format_44(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->offs,10,16);
}

void encode_encode_format_45(LoongArchInsInfo *info, uint32_t* pinsn)
{
u_int8_t start_and_len[4];
start_and_len[0]=10;
start_and_len[1]=16;
start_and_len[2]=0;
start_and_len[3]=10;
encode32_muti_field(pinsn, info->offs, start_and_len, 4);
}

void encode_encode_format_46(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->dst_sccrach,0,2);
}

void encode_encode_format_47(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->sccrach_regs[0],5,2);
encode32(pinsn, info->dst_reg,0,5);
}

void encode_encode_format_48(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->ptr,5,3);
}

void encode_encode_format_49(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
}

void encode_encode_format_5(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->code,0,15);
}

void encode_encode_format_50(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_51(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->si,10,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->dst_reg,0,5);
}

void encode_encode_format_52(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->cond,10,4);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->dst_reg,0,5);
}

void encode_encode_format_53(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->cond,10,4);
encode32(pinsn, info->dst_reg,0,5);
}

void encode_encode_format_54(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->srcs_regs[0],10,5);
encode32(pinsn, info->srcs_regs[1],5,5);
encode32(pinsn, info->cond,0,4);
}

void encode_encode_format_55(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->cond,10,4);
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_56(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->ui,10,3);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->dst_reg,0,5);
}

void encode_encode_format_57(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->ui,10,4);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->dst_reg,0,5);
}

void encode_encode_format_58(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->ui,10,3);
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_59(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->ui,10,4);
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_6(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->ui,10,5);
}

void encode_encode_format_60(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->ui,10,5);
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_61(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->ui,10,6);
encode32(pinsn, info->srcs_regs[0],5,5);
}

void encode_encode_format_62(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->ui,10,8);
encode32(pinsn, info->op,5,5);
encode32(pinsn, info->dst_reg,0,5);
}

void encode_encode_format_63(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->ui,10,8);
encode32(pinsn, info->dst_reg,0,5);
}

void encode_encode_format_64(LoongArchInsInfo *info, uint32_t* pinsn)
{
u_int8_t start_and_len[4];
start_and_len[0]=0;
start_and_len[1]=5;
start_and_len[2]=10;
start_and_len[3]=16;
encode32_muti_field(pinsn, info->offs, start_and_len, 4);
}

void encode_encode_format_7(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->ui,10,6);
}

void encode_encode_format_8(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->msb,16,5);
encode32(pinsn, info->lsb,10,5);
}

void encode_encode_format_9(LoongArchInsInfo *info, uint32_t* pinsn)
{
encode32(pinsn, info->dst_reg,0,5);
encode32(pinsn, info->srcs_regs[0],5,5);
encode32(pinsn, info->msb,16,6);
encode32(pinsn, info->lsb,10,6);
}

